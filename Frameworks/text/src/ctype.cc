#include "ctype.h"
#include <oak/oak.h>
#include <oak/debug.h>

static CFCharacterSetRef create_character_set ()
{
	// East Asian Width count: 180889
	static uint32_t Fixed[]      = {
	      0x23F0,  0x23F3,  0x267F,  0x2693,  0x26A1,  0x26CE,  0x26D4,  0x26EA,  0x26F5,  0x26FA,
	      0x26FD,  0x2705,  0x2728,  0x274C,  0x274E,  0x2757,  0x27B0,  0x27BF,  0x2B50,  0x2B55,
	     0x16FE0, 0x1F004, 0x1F0CF, 0x1F18E, 0x1F3F4, 0x1F440, 0x1F57A, 0x1F5A4, 0x1F6CC, 0x1F930,
	     0x1F9C0 };
	static uint32_t RangeBegin[] = {
	      0x1100,  0x231A,  0x2329,  0x23E9,  0x25FD,  0x2614,  0x2648,  0x26AA,  0x26BD,  0x26C4,
	      0x26F2,  0x270A,  0x2753,  0x2795,  0x2B1B,  0x2E80,  0x2E9B,  0x2F00,  0x2FF0,  0x3001,
	      0x3041,  0x3099,  0x3105,  0x3131,  0x3190,  0x31C0,  0x31F0,  0x3220,  0x3250,  0x3300,
	      0x4E00,  0xA490,  0xA960,  0xAC00,  0xF900,  0xFE10,  0xFE30,  0xFE54,  0xFE68, 0x17000,
	     0x18800, 0x1B000, 0x1F191, 0x1F200, 0x1F210, 0x1F240, 0x1F250, 0x1F300, 0x1F32D, 0x1F337,
	     0x1F37E, 0x1F3A0, 0x1F3CF, 0x1F3E0, 0x1F3F8, 0x1F442, 0x1F4FF, 0x1F54B, 0x1F550, 0x1F595,
	     0x1F5FB, 0x1F680, 0x1F6D0, 0x1F6EB, 0x1F6F4, 0x1F910, 0x1F920, 0x1F933, 0x1F940, 0x1F950,
	     0x1F980, 0x20000, 0x30000 };
	static uint32_t RangeEnd[]   = {
	      0x115F,  0x231B,  0x232A,  0x23EC,  0x25FE,  0x2615,  0x2653,  0x26AB,  0x26BE,  0x26C5,
	      0x26F3,  0x270B,  0x2755,  0x2797,  0x2B1C,  0x2E99,  0x2EF3,  0x2FD5,  0x2FFB,  0x303E,
	      0x3096,  0x30FF,  0x312D,  0x318E,  0x31BA,  0x31E3,  0x321E,  0x3247,  0x32FE,  0x4DBF,
	      0xA48C,  0xA4C6,  0xA97C,  0xD7A3,  0xFAFF,  0xFE19,  0xFE52,  0xFE66,  0xFE6B, 0x187EC,
	     0x18AF2, 0x1B001, 0x1F19A, 0x1F202, 0x1F23B, 0x1F248, 0x1F251, 0x1F320, 0x1F335, 0x1F37C,
	     0x1F393, 0x1F3CA, 0x1F3D3, 0x1F3F0, 0x1F43E, 0x1F4FC, 0x1F53D, 0x1F54E, 0x1F567, 0x1F596,
	     0x1F64F, 0x1F6C5, 0x1F6D2, 0x1F6EC, 0x1F6F6, 0x1F91E, 0x1F927, 0x1F93E, 0x1F94B, 0x1F95E,
	     0x1F991, 0x2FFFD, 0x3FFFD };

	CFMutableCharacterSetRef res = CFCharacterSetCreateMutable(kCFAllocatorDefault);
	for(auto const& ch : Fixed)
		CFCharacterSetAddCharactersInRange(res, CFRangeMake(ch, 1));
	for(size_t i = 0; i < sizeofA(RangeBegin); ++i)
		CFCharacterSetAddCharactersInRange(res, CFRangeMake(RangeBegin[i], RangeEnd[i] - RangeBegin[i] + 1));
	return res;
}

static CFCharacterSetRef create_character_set_minus_emoji ()
{
	// East Asian Width(180889) - emoji(718) = count: 180248  (641)
	static uint32_t Fixed[]      = {
	      0x27BF,  0x303E,  0x3298, 0x16FE0, 0x1F200, 0x1F23B, 0x1F310, 0x1F312, 0x1F31A, 0x1F34B,
	     0x1F350, 0x1F37C, 0x1F3C5, 0x1F3C7, 0x1F3C9, 0x1F3E4, 0x1F3F4, 0x1F413, 0x1F42A, 0x1F465,
	     0x1F4AD, 0x1F4EF, 0x1F4F5, 0x1F4F8, 0x1F515, 0x1F57A, 0x1F5A4, 0x1F600, 0x1F60E, 0x1F615,
	     0x1F617, 0x1F619, 0x1F61B, 0x1F61F, 0x1F62C, 0x1F634, 0x1F636, 0x1F686, 0x1F688, 0x1F690,
	     0x1F694, 0x1F696, 0x1F698, 0x1F6A3, 0x1F6A6, 0x1F6BF, 0x1F6CC, 0x1F930, 0x1F9C0 };
	static uint32_t RangeBegin[] = {
	      0x1100,  0x2329,  0x2E80,  0x2E9B,  0x2F00,  0x2FF0,  0x3001,  0x3031,  0x3041,  0x3099,
	      0x3105,  0x3131,  0x3190,  0x31C0,  0x31F0,  0x3220,  0x3250,  0x329A,  0x3300,  0x4E00,
	      0xA490,  0xA960,  0xAC00,  0xF900,  0xFE10,  0xFE30,  0xFE54,  0xFE68, 0x17000, 0x18800,
	     0x1B000, 0x1F210, 0x1F21B, 0x1F230, 0x1F240, 0x1F30D, 0x1F316, 0x1F31C, 0x1F32D, 0x1F332,
	     0x1F37E, 0x1F3CF, 0x1F3F8, 0x1F40F, 0x1F415, 0x1F46C, 0x1F4B6, 0x1F4EC, 0x1F4FF, 0x1F504,
	     0x1F52C, 0x1F54B, 0x1F55C, 0x1F595, 0x1F607, 0x1F610, 0x1F626, 0x1F62E, 0x1F641, 0x1F681,
	     0x1F68A, 0x1F68D, 0x1F69B, 0x1F6AE, 0x1F6B3, 0x1F6B7, 0x1F6C1, 0x1F6D0, 0x1F6EB, 0x1F6F4,
	     0x1F910, 0x1F920, 0x1F933, 0x1F940, 0x1F950, 0x1F980, 0x20000, 0x30000 };
	static uint32_t RangeEnd[]   = {
	      0x115F,  0x232A,  0x2E99,  0x2EF3,  0x2FD5,  0x2FFB,  0x302F,  0x303C,  0x3096,  0x30FF,
	      0x312D,  0x318E,  0x31BA,  0x31E3,  0x321E,  0x3247,  0x3296,  0x32FE,  0x4DBF,  0xA48C,
	      0xA4C6,  0xA97C,  0xD7A3,  0xFAFF,  0xFE19,  0xFE52,  0xFE66,  0xFE6B, 0x187EC, 0x18AF2,
	     0x1B001, 0x1F219, 0x1F22E, 0x1F231, 0x1F248, 0x1F30E, 0x1F318, 0x1F31E, 0x1F32F, 0x1F333,
	     0x1F37F, 0x1F3D3, 0x1F40B, 0x1F410, 0x1F416, 0x1F46D, 0x1F4B7, 0x1F4ED, 0x1F502, 0x1F509,
	     0x1F52D, 0x1F54E, 0x1F567, 0x1F596, 0x1F608, 0x1F611, 0x1F627, 0x1F62F, 0x1F644, 0x1F682,
	     0x1F68B, 0x1F68E, 0x1F6A1, 0x1F6B1, 0x1F6B5, 0x1F6B8, 0x1F6C5, 0x1F6D2, 0x1F6EC, 0x1F6F6,
	     0x1F91E, 0x1F927, 0x1F93E, 0x1F94B, 0x1F95E, 0x1F991, 0x2FFFD, 0x3FFFD };

	CFMutableCharacterSetRef res = CFCharacterSetCreateMutable(kCFAllocatorDefault);
	for(auto const& ch : Fixed)
		CFCharacterSetAddCharactersInRange(res, CFRangeMake(ch, 1));
	for(size_t i = 0; i < sizeofA(RangeBegin); ++i)
		CFCharacterSetAddCharactersInRange(res, CFRangeMake(RangeBegin[i], RangeEnd[i] - RangeBegin[i] + 1));
	return res;
}

namespace text
{
	bool is_east_asian_width (uint32_t ch)
	{
		static CFCharacterSetRef const cfset = create_character_set();
		return CFCharacterSetIsLongCharacterMember(cfset, ch);
	}

	bool is_east_asian_width_minus_emoji (uint32_t ch)
	{
		static CFCharacterSetRef const cfset = create_character_set_minus_emoji();
		return CFCharacterSetIsLongCharacterMember(cfset, ch);
	}

} /* text */
