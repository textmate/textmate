;;; finder-inf.el --- automatically extracted keyword-to-package mapping
;;
;;; Code:

(setq package--builtins '(
  (5x5 . [nil nil "simple little puzzle game"])
  (ada-mode . [nil nil "major-mode for editing Ada sources"])
  (add-log . [nil nil "change log maintenance commands for Emacs"])
  (align . [nil nil "align text to a specific column, by regexp"])
  (allout . [(2 3) nil "extensive outline mode for use alone and with other modes"])
  (allout-widgets . [(1 0) nil "Visually highlight allout outline structure."])
  (ange-ftp . [nil nil "transparent FTP support for GNU Emacs"])
  (animate . [nil nil "make text dance"])
  (ansi-color . [(3 4 2) nil "translate ANSI escape sequences into faces"])
  (antlr-mode . [(2 2 3) nil "major mode for ANTLR grammar files"])
  (arc-mode . [nil nil "simple editing of archives"])
  (array . [nil nil "array editing commands for GNU Emacs"])
  (artist . [(1 2 6) nil "draw ascii graphics with your mouse"])
  (asm-mode . [nil nil "mode for editing assembler code"])
  (assoc . [nil nil "insert/delete functions on association lists"])
  (autoarg . [nil nil "make digit keys supply prefix args"])
  (autoconf . [nil nil "mode for editing Autoconf configure.in files"])
  (autoinsert . [nil nil "automatic mode-dependent insertion of text into new files"])
  (autorevert . [nil nil "revert buffers when files on disk change"])
  (avl-tree . [nil nil "balanced binary trees, AVL-trees"])
  (avoid . [nil nil "make mouse pointer stay out of the way of editing"])
  (battery . [nil nil "display battery status information"])
  (benchmark . [nil nil "support for benchmarking code"])
  (bib-mode . [nil nil "major mode for editing bib files"])
  (bibtex . [nil nil "BibTeX mode for GNU Emacs"])
  (bibtex-style . [nil nil "Major mode for BibTeX Style files"])
  (bindat . [nil nil "binary data structure packing and unpacking."])
  (binhex . [nil nil "decode BinHex-encoded text"])
  (blackbox . [nil nil "blackbox game in Emacs Lisp"])
  (bookmark . [nil nil "set bookmarks, maybe annotate them, jump to them later"])
  (browse-url . [nil nil "pass a URL to a WWW browser"])
  (bruce . [nil nil "bruce phrase utility for overloading the Communications"])
  (bs . [(1 17) nil "menu for selecting and displaying buffers"])
  (bubbles . [nil nil "Puzzle game for Emacs"])
  (bug-reference . [nil nil "buttonize bug references"])
  (calc . [nil nil "the GNU Emacs calculator"])
  (calculator . [nil nil "a [not so] simple calculator for Emacs"])
  (calendar . [nil nil "calendar functions"])
  (cap-words . [nil nil "minor mode for motion in CapitalizedWordIdentifiers"])
  (cc-guess . [nil nil "guess indentation values by scanning existing code"])
  (cc-mode . [nil nil "major mode for editing C and similar languages"])
  (cdl . [nil nil "Common Data Language (CDL) utility functions for GNU Emacs"])
  (cedet . [(1 0 -1 7) nil "Setup CEDET environment"])
  (cfengine . [(1 1) nil "mode for editing Cfengine files"])
  (chart . [(0 2) nil "Draw charts (bar charts, etc)"])
  (check-declare . [nil nil "Check declare-function statements"])
  (checkdoc . [(0 6 2) nil "check documentation strings for style requirements"])
  (chistory . [nil nil "list command history"])
  (cl . [(2 2) nil "Common Lisp extensions for Emacs"])
  (cmacexp . [nil nil "expand C macros in a region"])
  (cmuscheme . [nil nil "Scheme process in a buffer. Adapted from tea.el"])
  (color . [nil nil "Color manipulation library"])
  (compare-w . [nil nil "compare text between windows for Emacs"])
  (compile . [nil nil "run compiler as inferior of Emacs, parse error messages"])
  (completion . [nil nil "dynamic word-completion code"])
  (conf-mode . [nil nil "Simple major mode for editing conf/ini/properties files"])
  (cookie1 . [nil nil "retrieve random phrases from fortune cookie files"])
  (copyright . [nil nil "update the copyright notice in current buffer"])
  (cperl-mode . [nil nil "Perl code editing commands for Emacs"])
  (cpp . [nil nil "highlight or hide text according to cpp conditionals"])
  (crisp . [nil nil "CRiSP/Brief Emacs emulator"])
  (crm . [nil nil "read multiple strings with completion"])
  (css-mode . [nil nil "Major mode to edit CSS files"])
  (cua-base . [nil nil "emulate CUA key bindings"])
  (cust-print . [nil nil "handles print-level and print-circle"])
  (cvs-status . [nil nil "major mode for browsing `cvs status' output"])
  (cwarn . [(1 3 1) nil "highlight suspicious C and C++ constructions"])
  (dabbrev . [nil nil "dynamic abbreviation package"])
  (dbus . [nil nil "Elisp bindings for D-Bus."])
  (dcl-mode . [nil nil "major mode for editing DCL command files"])
  (debug . [nil nil "debuggers and related commands for Emacs"])
  (decipher . [nil nil "cryptanalyze monoalphabetic substitution ciphers"])
  (delim-col . [(2 1) nil "prettify all columns in a region or rectangle"])
  (delphi . [nil nil "major mode for editing Delphi source (Object Pascal) in Emacs"])
  (delsel . [nil nil "delete selection if you insert"])
  (descr-text . [nil nil "describe text mode"])
  (desktop . [nil nil "save partial status of Emacs when killed"])
  (dframe . [nil nil "dedicate frame support modes"])
  (diary-lib . [nil nil "diary functions"])
  (diff . [nil nil "run `diff'"])
  (diff-mode . [nil nil "a mode for viewing/editing context diffs"])
  (dig . [nil nil "Domain Name System dig interface"])
  (dirtrack . [nil nil "Directory Tracking by watching the prompt"])
  (disass . [nil nil "disassembler for compiled Emacs Lisp code"])
  (dissociate . [nil nil "scramble text amusingly for Emacs"])
  (dns . [nil nil "Domain Name Service lookups"])
  (dns-mode . [nil nil "a mode for viewing/editing Domain Name System master files"])
  (doc-view . [nil nil "View PDF/PostScript/DVI files in Emacs"])
  (doctor . [nil nil "psychological help for frustrated users"])
  (double . [nil nil "support for keyboard remapping with double clicking"])
  (dunnet . [(2 1) nil "text adventure for Emacs"])
  (ebnf2ps . [(4 4) nil "translate an EBNF to a syntactic chart on PostScript"])
  (ebrowse . [nil nil "Emacs C++ class browser & tags facility"])
  (ebuff-menu . [nil nil "electric-buffer-list mode"])
  (echistory . [nil nil "Electric Command History Mode"])
  (ede . [(1 0 -1 7) nil "Emacs Development Environment gloss"])
  (edebug . [nil nil "a source-level debugger for Emacs Lisp"])
  (ediff . [(2 81 4) nil "a comprehensive visual interface to diff & patch"])
  (edmacro . [(2 1) nil "keyboard macro editor"])
  (edt . [nil nil "enhanced EDT keypad mode emulation for GNU Emacs"])
  (ehelp . [nil nil "bindings for electric-help mode"])
  (eieio . [(1 3) nil "Enhanced Implementation of Emacs Interpreted Objects"])
  (eldoc . [nil nil "show function arglist or variable docstring in echo area"])
  (electric . [nil nil "window maker and Command loop for `electric' modes"])
  (elide-head . [nil nil "hide headers in files"])
  (elint . [nil nil "Lint Emacs Lisp"])
  (elp . [nil nil "Emacs Lisp Profiler"])
  (emacs . [nil nil "abbrev mode commands for Emacs"])
  (emacs-lock . [nil nil "protect buffers against killing or exiting"])
  (emerge . [nil nil "merge diffs under Emacs control"])
  (enriched . [nil nil "read and save files in text/enriched format"])
  (epa . [nil nil "the EasyPG Assistant"])
  (epg . [(1 0 0) nil "the EasyPG Library"])
  (erc . [(5 3) nil "An Emacs Internet Relay Chat client"])
  (ert . [nil nil "Emacs Lisp Regression Testing"])
  (ert-x . [nil nil "Staging area for experimental extensions to ERT"])
  (eshell . [(2 4 2) nil "the Emacs command shell"])
  (etags . [nil nil "etags facility for Emacs"])
  (eudc . [nil nil "Emacs Unified Directory Client"])
  (ewoc . [nil nil "utility to maintain a view of a list of objects in a buffer"])
  (executable . [nil nil "base functionality for executable interpreter scripts"])
  (expand . [nil nil "make abbreviations more usable"])
  (ezimage . [nil nil "Generalized Image management"])
  (f90 . [nil nil "Fortran-90 mode (free format)"])
  (face-remap . [nil nil "Functions for managing `face-remapping-alist'"])
  (feedmail . [(11) nil "assist other email packages to massage outgoing messages"])
  (ffap . [nil nil "find file (or url) at point"])
  (filecache . [nil nil "find files using a pre-loaded cache"])
  (filesets . [nil nil "handle group of files"])
  (find-cmd . [(0 6) nil "Build a valid find(1) command with sexps"])
  (find-dired . [nil nil "run a `find' command and dired the output"])
  (find-file . [nil nil "find a file corresponding to this one given a pattern"])
  (find-func . [nil nil "find the definition of the Emacs Lisp function near point"])
  (find-gc . [nil nil "detect functions that call the garbage collector"])
  (find-lisp . [nil nil "emulation of find in Emacs Lisp"])
  (finder . [(1 0) nil "topic & keyword-based code finder"])
  (flow-ctrl . [nil nil "help for lusers on cu(1) or ttys with wired-in ^S/^Q flow control"])
  (flymake . [(0 3) nil "a universal on-the-fly syntax checker"])
  (flyspell . [nil nil "on-the-fly spell checker"])
  (foldout . [(1 10) nil "folding extensions for outline-mode and outline-minor-mode"])
  (follow . [nil nil "synchronize windows showing the same buffer"])
  (footnote . [(0 19) nil "footnote support for message mode"])
  (format-spec . [nil nil "functions for formatting arbitrary formatting strings"])
  (forms . [nil nil "Forms mode: edit a file as a form to fill in"])
  (forms-d2 . [nil nil "demo forms-mode"])
  (forms-pass . [nil nil "passwd file demo for forms-mode"])
  (fortran . [nil nil "Fortran mode for GNU Emacs"])
  (fortune . [nil nil "use fortune to create signatures"])
  (gamegrid . [(1 2) nil "library for implementing grid-based games on Emacs"])
  (gametree . [nil nil "manage game analysis trees in Emacs"])
  (gdb-mi . [nil nil "User Interface for running GDB"])
  (glasses . [nil nil "make cantReadThis readable"])
  (gnus . [(5 13) nil "a newsreader for GNU Emacs"])
  (gnutls . [nil nil "Support SSL/TLS connections through GnuTLS"])
  (gomoku . [nil nil "Gomoku game between you and Emacs"])
  (goto-addr . [nil nil "click to browse URL or to send to e-mail address"])
  (grep . [nil nil "run `grep' and display the results"])
  (gs . [nil nil "interface to Ghostscript"])
  (gud . [nil nil "Grand Unified Debugger mode for running GDB and other debuggers"])
  (gulp . [nil nil "ask for updates for Lisp packages"])
  (handwrite . [nil nil "turns your emacs buffer into a handwritten document"])
  (hanoi . [nil nil "towers of hanoi in Emacs"])
  (hashcash . [nil nil "Add hashcash payments to email"])
  (help-at-pt . [nil nil "local help through the keyboard"])
  (hex-util . [nil nil "Functions to encode/decode hexadecimal string."])
  (hexl . [nil nil "edit a file in a hex dump format using the hexl filter"])
  (hi-lock . [nil nil "minor mode for interactive automatic highlighting"])
  (hideif . [nil nil "hides selected code within ifdef"])
  (hideshow . [nil nil "minor mode cmds to selectively display code/comment blocks"])
  (hilit-chg . [nil nil "minor mode displaying buffer changes with special face"])
  (hippie-exp . [(1 6) nil "expand text trying various ways to find its expansion"])
  (hl-line . [nil nil "highlight the current line"])
  (hmac-def . [nil nil "A macro for defining HMAC functions."])
  (hmac-md5 . [nil nil "Compute HMAC-MD5."])
  (htmlfontify . [(0 21) nil "htmlize a buffer/source tree with optional hyperlinks"])
  (ibuffer . [nil nil "operate on buffers like dired"])
  (icalendar . [(0 19) nil "iCalendar implementation"])
  (icomplete . [nil nil "minibuffer completion incremental feedback"])
  (icon . [nil nil "mode for editing Icon code"])
  (idlwave . [(6 1 22) nil "IDL editing mode for GNU Emacs"])
  (ido . [nil nil "interactively do things with buffers and files"])
  (ielm . [nil nil "interaction mode for Emacs Lisp"])
  (iimage . [nil nil "Inline image minor mode."])
  (image-dired . [(0 4 11) nil "use dired to browse and manipulate your images"])
  (image-file . [nil nil "support for visiting image files"])
  (imap . [nil nil "imap library"])
  (imenu . [nil nil "framework for mode-specific buffer indexes"])
  (inf-lisp . [nil nil "an inferior-lisp mode"])
  (info . [nil nil "info package for Emacs"])
  (info-look . [nil nil "major-mode-sensitive Info index lookup facility"])
  (info-xref . [(3) nil "check external references in an Info document"])
  (informat . [nil nil "info support functions package for Emacs"])
  (inversion . [(0 2) nil "When you need something in version XX.XX"])
  (isearchb . [(1 5) nil "a marriage between iswitchb and isearch"])
  (ispell . [nil nil "interface to International Ispell Versions 3.1 and 3.2"])
  (iswitchb . [nil nil "switch between buffers using substrings"])
  (jka-compr . [nil nil "reading/writing/loading compressed files"])
  (js . [(9) nil "Major mode for editing JavaScript"])
  (json . [(1 3) nil "JavaScript Object Notation parser / generator"])
  (kermit . [nil nil "additions to shell mode for use with kermit"])
  (keypad . [nil nil "simplified keypad bindings"])
  (kmacro . [nil nil "enhanced keyboard macros"])
  (landmark . [nil nil "neural-network robot that learns landmarks"])
  (ld-script . [nil nil "GNU linker script editing mode for Emacs"])
  (ldap . [nil nil "client interface to LDAP for Emacs"])
  (ledit . [nil nil "Emacs side of ledit interface"])
  (life . [nil nil "John Horton Conway's `Life' game for GNU Emacs"])
  (linum . [(0 9 24) nil "display line numbers in the left margin"])
  (lisp-mnt . [nil nil "utility functions for Emacs Lisp maintainers"])
  (loadhist . [nil nil "lisp functions for working with feature groups"])
  (locate . [nil nil "interface to the locate command"])
  (log-edit . [nil nil "Major mode for editing CVS commit messages"])
  (log-view . [nil nil "Major mode for browsing RCS/CVS/SCCS log output"])
  (longlines . [nil nil "automatically wrap long lines"])
  (lpr . [nil nil "print Emacs buffer on line printer"])
  (m4-mode . [nil nil "m4 code editing commands for Emacs"])
  (macroexp . [nil nil "Additional macro-expansion support"])
  (mail-utils . [nil nil "utility functions used both by rmail and rnews"])
  (mailabbrev . [nil nil "abbrev-expansion of mail aliases"])
  (mailalias . [nil nil "expand and complete mailing address aliases"])
  (mailclient . [nil nil "mail sending via system's mail client."])
  (mailpost . [nil nil "RMAIL coupler to /usr/uci/post mailer"])
  (mairix . [nil nil "Mairix interface for Emacs"])
  (make-mode . [nil nil "makefile editing commands for Emacs"])
  (makeinfo . [nil nil "run makeinfo conveniently"])
  (makesum . [nil nil "generate key binding summary for Emacs"])
  (man . [nil nil "browse UNIX manual pages"])
  (mantemp . [nil nil "create manual template instantiations from g++ 2.7.2 output"])
  (map-ynp . [nil nil "general-purpose boolean question-asker"])
  (master . [(1 0 2) nil "make a buffer the master over another buffer"])
  (mb-depth . [nil nil "Indicate minibuffer-depth in prompt"])
  (md4 . [(1 0) nil "MD4 Message Digest Algorithm."])
  (meese . [nil nil "protect the impressionable young minds of America"])
  (meta-mode . [(1 0) nil "major mode for editing Metafont or MetaPost sources"])
  (metamail . [nil nil "Metamail interface for GNU Emacs"])
  (mh-e . [(8 3 1) nil "GNU Emacs interface to the MH mail system"])
  (midnight . [nil nil "run something every midnight, e.g., kill old buffers"])
  (minibuf-eldef . [nil nil "Only show defaults in prompts when applicable"])
  (misearch . [nil nil "isearch extensions for multi-buffer search"])
  (mixal-mode . [(0 1) nil "Major mode for the mix asm language."])
  (mode-local . [nil nil "Support for mode local facilities"])
  (modula2 . [nil nil "Modula-2 editing support package"])
  (morse . [nil nil "convert text to morse code and back"])
  (mouse-copy . [nil nil "one-click text copy and move"])
  (mouse-drag . [nil nil "use mouse-2 to do a new style of scrolling"])
  (mouse-sel . [nil nil "multi-click selection support"])
  (mpc . [nil nil "A client for the Music Player Daemon"])
  (mpuz . [nil nil "multiplication puzzle for GNU Emacs"])
  (msb . [nil nil "customizable buffer-selection with multiple menus"])
  (mspools . [nil nil "show mail spools waiting to be read"])
  (net-utils . [nil nil "network functions"])
  (netrc . [nil nil ".netrc parsing functionality"])
  (network-stream . [nil nil "open network processes, possibly with encryption"])
  (newsticker . [(1 99) nil "A Newsticker for Emacs."])
  (notifications . [nil nil "Client interface to desktop notifications."])
  (novice . [nil nil "handling of disabled commands (\"novice mode\") for Emacs"])
  (nroff-mode . [nil nil "GNU Emacs major mode for editing nroff source"])
  (ntlm . [(1 0) nil "NTLM (NT LanManager) authentication support"])
  (nxml . [nil nil "XML encoding auto-detection"])
  (octave-mod . [nil nil "editing Octave source files under Emacs"])
  (org . [(7 8 11) nil "Outline-based notes management and organizer"])
  (outline . [nil nil "outline mode commands for Emacs"])
  (package . [(1 0) nil "Simple package system for Emacs"])
  (page-ext . [nil nil "extended page handling commands"])
  (paren . [nil nil "highlight matching paren"])
  (parse-time . [nil nil "parsing time strings"])
  (pascal . [nil nil "major mode for editing pascal source in Emacs"])
  (password-cache . [nil nil "Read passwords, possibly using a password cache."])
  (patcomp . [nil nil "used by patch files to update Emacs releases"])
  (pcase . [nil nil "ML-style pattern-matching macro for Elisp"])
  (pcomplete . [nil nil "programmable completion"])
  (pcvs . [nil nil "a front-end to CVS"])
  (perl-mode . [nil nil "Perl code editing commands for GNU Emacs"])
  (picture . [nil nil "\"Picture mode\" -- editing using quarter-plane screen model"])
  (po . [nil nil "basic support of PO translation files"])
  (pong . [nil nil "classical implementation of pong"])
  (pp . [nil nil "pretty printer for Emacs Lisp"])
  (printing . [(6 9 3) nil "printing utilities"])
  (proced . [nil nil "operate on system processes like dired"])
  (prolog . [nil nil "major mode for editing and running Prolog (and Mercury) code"])
  (ps-mode . [(1 1 8) nil "PostScript mode for GNU Emacs"])
  (ps-print . [(7 3 5) nil "print text from the buffer as PostScript"])
  (pulse . [(1 0) nil "Pulsing Overlays"])
  (python . [nil nil "silly walks for Python"])
  (quickurl . [nil nil "insert a URL based on text at point in buffer"])
  (rcirc . [nil nil "default, simple IRC client."])
  (rcompile . [nil nil "run a compilation on a remote machine"])
  (re-builder . [nil nil "building Regexps with visual feedback"])
  (recentf . [nil nil "setup a menu of recently opened files"])
  (refbib . [nil nil "convert refer-style references to ones usable by Latex bib"])
  (refer . [nil nil "look up references in bibliography files"])
  (refill . [nil nil "`auto-fill' by refilling paragraphs on changes"])
  (reftex . [(4 31) nil "minor mode for doing \\label, \\ref, \\cite, \\index in LaTeX"])
  (regexp-opt . [nil nil "generate efficient regexps to match strings"])
  (regi . [(1 8) nil "REGular expression Interpreting engine"])
  (remember . [(2 0) nil "a mode for quickly jotting down things to remember"])
  (repeat . [(0 51) nil "convenient way to repeat the previous command"])
  (reporter . [nil nil "customizable bug reporting of lisp programs"])
  (reposition . [nil nil "center a Lisp function or comment on the screen"])
  (reveal . [nil nil "Automatically reveal hidden text at point"])
  (rfc2368 . [nil nil "support for rfc2368"])
  (rfc822 . [nil nil "hairy rfc822 parser for mail and news and suchlike"])
  (ring . [nil nil "handle rings of items"])
  (rlogin . [nil nil "remote login interface"])
  (rmail . [nil nil "main code of \"RMAIL\" mail reader for Emacs"])
  (rot13 . [nil nil "display a buffer in ROT13"])
  (rst . [nil nil "Mode for viewing and editing reStructuredText-documents."])
  (ruby-mode . [(1 0) nil "Major mode for editing Ruby files"])
  (ruler-mode . [(1 6) nil "display a ruler in the header line"])
  (rx . [nil nil "sexp notation for regular expressions"])
  (sasl . [nil nil "SASL client framework"])
  (savehist . [(24) nil "Save minibuffer history"])
  (saveplace . [nil nil "automatically save place in files"])
  (sb-image . [nil nil "Image management for speedbar"])
  (scheme . [nil nil "Scheme (and DSSSL) editing mode"])
  (scroll-all . [nil nil "scroll all buffers together minor mode"])
  (scroll-lock . [nil nil "Scroll lock scrolling."])
  (secrets . [nil nil "Client interface to gnome-keyring and kwallet."])
  (select . [nil nil "lisp portion of standard selection support"])
  (semantic . [(2 0) nil "Semantic buffer evaluator."])
  (sendmail . [nil nil "mail sending commands for Emacs"])
  (server . [nil nil "Lisp code for GNU Emacs running as server process"])
  (ses . [nil nil "Simple Emacs Spreadsheet"])
  (sgml-mode . [nil nil "SGML- and HTML-editing modes"])
  (sh-script . [(2 0 6) nil "shell-script editing commands for Emacs"])
  (shadow . [nil nil "locate Emacs Lisp file shadowings"])
  (shadowfile . [nil nil "automatic file copying"])
  (shell . [nil nil "specialized comint.el for running the shell"])
  (simula . [nil nil "SIMULA 87 code editing commands for Emacs"])
  (skeleton . [nil nil "Lisp language extension for writing statement skeletons"])
  (smerge-mode . [nil nil "Minor mode to resolve diff3 conflicts"])
  (smie . [nil nil "Simple Minded Indentation Engine"])
  (smtpmail . [nil nil "simple SMTP protocol (RFC 821) for sending mail"])
  (snake . [nil nil "implementation of Snake for Emacs"])
  (snmp-mode . [nil nil "SNMP & SNMPv2 MIB major mode"])
  (soap-client . [nil nil "Access SOAP web services from Emacs"])
  (socks . [nil nil "A Socks v5 Client for Emacs"])
  (solitaire . [nil nil "game of solitaire in Emacs Lisp"])
  (sort . [nil nil "commands to sort text in an Emacs buffer"])
  (soundex . [nil nil "implement Soundex algorithm"])
  (speedbar . [nil nil "quick access to files and tags in a frame"])
  (spook . [nil nil "spook phrase utility for overloading the NSA line eater"])
  (sql . [(3 0) nil "specialized comint.el for SQL interpreters"])
  (srecode . [(1 0 -1 7) nil "Semantic buffer evaluator."])
  (strokes . [nil nil "control Emacs through mouse strokes"])
  (studly . [nil nil "StudlyCaps (tm)(r)(c)(xxx)"])
  (subword . [nil nil "Handling capitalized subwords in a nomenclature"])
  (supercite . [nil nil "minor mode for citing mail and news replies"])
  (syntax . [nil nil "helper functions to find syntactic context"])
  (t-mouse . [nil nil "mouse support within the text terminal"])
  (table . [nil nil "create and edit WYSIWYG text based embedded tables"])
  (tabulated-list . [nil nil "generic major mode for tabulated lists"])
  (talk . [nil nil "allow several users to talk to each other through Emacs"])
  (tar-mode . [nil nil "simple editing of tar files from GNU Emacs"])
  (tcl . [nil nil "Tcl code editing commands for Emacs"])
  (telnet . [nil nil "run a telnet session from within an Emacs buffer"])
  (tempo . [nil nil "Flexible template insertion"])
  (term . [nil nil "general command interpreter in a window stuff"])
  (terminal . [nil nil "terminal emulator for GNU Emacs"])
  (testcover . [nil nil "Visual code-coverage tool"])
  (tetris . [(2 1) nil "implementation of Tetris for Emacs"])
  (tex-mode . [nil nil "TeX, LaTeX, and SliTeX mode commands"])
  (texinfmt . [nil nil "format Texinfo files into Info files"])
  (texinfo . [nil nil "major mode for editing Texinfo files"])
  (texnfo-upd . [nil nil "utilities for updating nodes and menus in Texinfo files"])
  (thingatpt . [nil nil "get the `thing' at point"])
  (thumbs . [nil nil "Thumbnails previewer for images files"])
  (tildify . [(4 5) nil "adding hard spaces into texts"])
  (time . [nil nil "display time, load and mail indicator in mode line of Emacs"])
  (time-date . [nil nil "Date and time handling functions"])
  (time-stamp . [nil nil "Maintain last change time stamps in files edited by Emacs"])
  (timeclock . [(2 6 1) nil "mode for keeping track of how much you work"])
  (timezone . [nil nil "time zone package for GNU Emacs"])
  (tls . [nil nil "TLS/SSL support via wrapper around GnuTLS"])
  (tmm . [nil nil "text mode access to menu-bar"])
  (todo-mode . [nil nil "major mode for editing TODO list files"])
  (tpu-edt . [(4 5) nil "Emacs emulating TPU emulating EDT"])
  (tq . [nil nil "utility to maintain a transaction queue"])
  (trace . [nil nil "tracing facility for Emacs Lisp functions"])
  (tramp . [nil nil "Transparent Remote Access, Multiple Protocol"])
  (tree-widget . [nil nil "Tree widget"])
  (two-column . [nil nil "minor mode for editing of two-column text"])
  (type-break . [nil nil "encourage rests from typing at appropriate intervals"])
  (uce . [nil nil "facilitate reply to unsolicited commercial email"])
  (underline . [nil nil "insert/remove underlining (done by overstriking) in Emacs"])
  (undigest . [nil nil "digest-cracking support for the RMAIL mail reader"])
  (unrmail . [nil nil "convert Rmail Babyl files to mailbox files"])
  (unsafep . [nil nil "Determine whether a Lisp form is safe to evaluate"])
  (url . [nil nil "Uniform Resource Locator retrieval tool"])
  (userlock . [nil nil "handle file access contention between multiple users"])
  (uudecode . [nil nil "elisp native uudecode"])
  (vc . [nil nil "drive a version-control system from within Emacs"])
  (vcursor . [nil nil "manipulate an alternative (\"virtual\") cursor"])
  (vera-mode . [(2 28) nil "major mode for editing Vera files"])
  (verilog-mode . [nil nil "major mode for editing verilog source in Emacs"])
  (vhdl-mode . [nil nil "major mode for editing VHDL code"])
  (vi . [nil nil "major mode for emulating \"vi\" editor under GNU Emacs"])
  (view . [nil nil "peruse file or buffer without editing"])
  (vip . [nil nil "a VI Package for GNU Emacs"])
  (viper . [(3 14 1) nil "A full-featured Vi emulator for Emacs and XEmacs,"])
  (vt-control . [nil nil "Common VTxxx control functions"])
  (vt100-led . [nil nil "functions for LED control on VT-100 terminals & clones"])
  (warnings . [nil nil "log and display warnings"])
  (wdired . [(2 0) nil "Rename files editing their names in dired buffers"])
  (webjump . [nil nil "programmable Web hotlist"])
  (which-func . [nil nil "print current function in mode line"])
  (whitespace . [(13 2 2) nil "minor mode to visualize TAB, (HARD) SPACE, NEWLINE"])
  (windmove . [nil nil "directional window-selection routines"])
  (winner . [nil nil "Restore old window configurations"])
  (woman . [(0 551) nil "browse UN*X manual pages `wo (without) man'"])
  (ws-mode . [(0 7) nil "WordStar emulation mode for GNU Emacs"])
  (xesam . [nil nil "Xesam interface to search engines."])
  (xml . [nil nil "XML parser"])
  (xscheme . [nil nil "run MIT Scheme under Emacs"])
  (xt-mouse . [nil nil "support the mouse when emacs run in an xterm"])
  (yow . [nil nil "quote random zippyisms"])
  (zeroconf . [nil nil "Service browser using Avahi."])
  (zone . [nil nil "idle display hacks"])
))

(setq finder-keywords-hash
      #s(hash-table size 487 test eq rehash-size 1.5 rehash-threshold 0.8 data (abbrev (skeleton pcomplete emacs icomplete hippie-exp expand edmacro dabbrev completion autoarg) convenience (calc erc keypad cua-base diff-mode compare-w table picture emacs makeinfo flyspell winner windmove vcursor tmm ruler-mode repeat minibuf-eldef mb-depth longlines linum kmacro json iswitchb imenu ido ibuffer hippie-exp follow filesets filecache ffap ebuff-menu desktop delsel dabbrev completion chistory calculator bs autorevert autoinsert align) languages (erc smie emacs xscheme vhdl-mode verilog-mode vera-mode tcl sql simula sh-script scheme ruby-mode python ps-mode perl-mode pascal octave-mod modula2 mixal-mode meta-mode m4-mode ld-script js idlwave icon fortran flymake f90 executable delphi dcl-mode cwarn cperl-mode cfengine cc-mode cc-guess cap-words autoconf asm-mode antlr-mode ada-mode sgml-mode tempo skeleton paren ledit info-look allout align) lisp (inversion cedet unsafep trace testcover tabulated-list smie shadow re-builder pp map-ynp macroexp emacs ewoc ert elp elint eieio edebug debug checkdoc check-declare benchmark xscheme scheme inf-lisp hideshow strokes isearchb ielm color cmuscheme align) outlines (org hideshow hideif reveal outline foldout elide-head allout allout-widgets) wp (org handwrite ebnf2ps underline two-column tildify emacs table sgml-mode refill picture page-ext nroff-mode ispell enriched whitespace ps-print printing longlines allout) pgp (gnus epg epa emacs allout) gnupg (gnus epg epa emacs allout) comm (erc url zeroconf webjump tramp tls telnet socks soap-client secrets rlogin rcirc net-utils ldap gnutls eudc dns dig dbus ange-ftp bindat sql sgml-mode dns-mode terminal talk shadowfile notifications master kermit ansi-color) processes (erc url tramp rcompile bindat sql inf-lisp idlwave grep compile eshell term shell server proced pcomplete emacs emacs-lock dirtrack cmuscheme ansi-color) terminals (tramp xt-mouse vt-control terminal ansi-color) services (ansi-color) help (emacs woman novice man makesum informat info info-look icomplete help-at-pt finder ehelp) files (url compare-w po wdired view emacs shadowfile recentf locate ffap doc-view arc-mode) archives (arc-mode) msdog (arc-mode) editing (hideshow dcl-mode arc-mode) major-mode (dcl-mode arc-mode) extensions (calc cookie1 gnus tq tabulated-list rx ring regi regexp-opt map-ynp ewoc eldoc emacs cust-print cl benchmark avl-tree assoc type-break tree-widget thingatpt tempo strokes skeleton ido emacs-lock electric ehelp array) emulations (ws-mode viper vip vi tpu-edt edt cua-base crisp emacs hl-line delsel autoarg) mouse (goto-addr browse-url artist xt-mouse emacs thingatpt t-mouse strokes msb mouse-sel mouse-drag mouse-copy ffap avoid) hardware (zeroconf dbus vt100-led emacs flow-ctrl battery) internal (emacs warnings syntax smie disass userlock select novice loadhist gs delim-col) bookmarks (saveplace bookmark) placeholders (saveplace bookmark) annotations (bookmark) tools (semantic reporter mail-utils xesam rcompile vc smerge-mode log-view emerge ediff diff cvs-status add-log trace re-builder package ert elp eieio edebug debug copyright emacs check-declare which-func make-mode hideshow gud grep glasses gdb-mi flymake etags ebrowse cpp compile bug-reference asm-mode time-stamp tempo speedbar skeleton sb-image imenu format-spec find-file ezimage elide-head dframe calculator) i18n (emacs gnus po double descr-text) data (org gnus url snmp-mode bindat timeclock remember page-ext xml whitespace jka-compr emacs hexl hex-util cdl) faces (gnus erc m4-mode ld-script cwarn cpp enriched emacs paren hl-line hilit-chg hi-lock face-remap descr-text color) color (color) hex (color) rgb (htmlfontify color) hsv (color) hsl (color) cie-lab (color) background (color) mule (emacs ps-print) multilingual (emacs descr-text) character\ composition (emacs) expand (dabbrev) completion (crm iswitchb dabbrev) unicode (emacs descr-text) file (dns-mode speedbar sb-image ezimage dframe) tags (semantic ebrowse speedbar sb-image ezimage dframe) dired (wdired emacs) window (emacs windmove follow) drag (emacs) drop (emacs) pdf (doc-view) ps (doc-view) dvi (doc-view) font (ps-print emacs) system-font (emacs) tool-bar-style (emacs) unix (telnet rlogin emerge ediff diff sh-script make-mode gud gdb-mi executable cc-mode ispell woman tar-mode sort proced emacs lpr locate find-lisp find-dired) mail (mh-e fortune gnus unrmail undigest uce supercite smtpmail sendmail rmail rfc822 rfc2368 reporter mspools metamail mailpost mail-utils mailclient mailalias mailabbrev hashcash footnote feedmail emacs mairix imap goto-addr time-date epa) message (gnus feedmail epa) face\ remapping (face-remap) display (hi-lock follow face-remap) user\ commands (face-remap) hypermedia (org url xesam soap-client quickurl browse-url sgml-mode css-mode emacs htmlfontify ffap) matching (regi re-builder thingatpt soundex misearch emacs hi-lock find-file ffap) filesets (filesets) c (hideshow hideif flymake cwarn cpp cmacexp cc-mode cc-guess emacs find-file) folding (foldout) minor-mode (hi-lock follow) frames (winner emacs talk hl-line) generic (emacs) comment (emacs) font-lock (emacs) colour (htmlfontify) html (gnus htmlfontify) markup (htmlfontify) etags (htmlfontify) buffer (msb ibuffer) multimedia (gnus metamail thumbs mpc emacs image-file image-dired iimage) docs (lisp-mnt checkdoc texnfo-upd texinfo texinfmt makeinfo info-xref) keyboard (keypad cua-base kmacro) md4 (md4) utilities (midnight) menu (erc msb) uncomment (emacs) desktop (notifications) notifications (notifications) password (secrets password-cache) cache (password-cache) passphrase (secrets password-cache) key (password-cache) print (handwrite ps-print printing) postscript (handwrite gnus ps-mode ebnf2ps ps-print printing) bdf (ps-print) multibyte (ps-print) vi (repeat) repeat (repeat) minibuffer (crm savehist emacs) scroll (scroll-all) crisp (crisp scroll-all) brief (crisp scroll-all) lock (scroll-all) spreadsheet (testcover ses) dijkstra (ses) gpm (t-mouse) linux (t-mouse) news (gnus uudecode supercite metamail mail-utils footnote binhex newsticker netrc time-date timezone) timers (type-break) virtual\ cursor (vcursor) environment (wdired) renaming (wdired) movement (windmove) xml (nxml xml) ccl (emacs) character\ set (emacs) coding-system (emacs) multibyte\ character (emacs) syntax (semantic mode-local emacs) category (emacs) fontset (emacs) isearch (emacs) tex (org meta-mode tildify texnfo-upd texinfo texinfmt tex-mode reftex refbib bibtex bibtex-style emacs) iso (emacs) latin (emacs) japanese (emacs) kinsoku (emacs) coding\ system (emacs) latex (bibtex emacs) charset (emacs) diagnosis (emacs) input\ method (emacs) quail (emacs) tit (emacs) cxterm (emacs) normalization (emacs) bib (refer refbib bib-mode) bibtex (bibtex) conf (conf-mode) ini (conf-mode) windows (conf-mode) java (hideshow conf-mode) dns (dig dns-mode) master (dns-mode) zone (dns-mode) soa (dns-mode) memory (remember) todo (todo-mode remember) pim (remember) maint (reporter emacs gulp edebug debug copyright checkdoc check-declare texnfo-upd texinfo texinfmt) text (tildify) sgml (tildify) ada (ada-mode) project\ file (ada-mode) xref (ada-mode) antlr (antlr-mode) code\ generator (antlr-mode) awk (cc-mode) cc-mode (cc-mode) oop (cc-guess) perl (cperl-mode) dcl (dcl-mode) ebnf (ebnf2ps) c++ (hideshow ebrowse) fortran (org fortran f90) f90 (f90) comments (hideshow) blocks (hideshow) hiding (hideshow) javascript (js) g++ (mantemp) templates (mantemp) metafont (meta-mode) metapost (meta-mode) knuth (mixal-mode) mix (mixal-mode) mixal (mixal-mode) asm (mixal-mode) mixvm (mixal-mode) the\ art\ of\ computer\ programming (mixal-mode) prolog (prolog) major (prolog) mode (prolog) sicstus (prolog) swi (prolog) mercury (prolog) ruby (ruby-mode) tcl (tcl) modes (tcl) vera (vera-mode) vhdl (vhdl-mode) mode-line (which-func) imenu (which-func) calendar (org gnus todo-mode timeclock calendar icalendar diary-lib) holidays (calendar) util (time-date parse-time) data\ structures (avl-tree) avl (avl-tree) tree (cvs-status avl-tree) oo (inversion cedet eieio chart) chart (chart) graph (chart) multiple\ elements (crm) debugging (elp) emacs-lisp (find-func) functions (find-func) variables (find-func) compiler (macroexp) macros (macroexp) strings (rx regexp-opt) regexps (rx regexp-opt) parsing (smie) indentation (smie) utility (unsafep testcover) safety (unsafep testcover) vc (ede url vc smerge-mode pcvs log-view log-edit emerge ediff diff diff-mode cvs-status compare-w add-log) pcl-cvs (pcvs log-edit cvs-status) cvs (smerge-mode pcvs log-view log-edit cvs-status) status (cvs-status) patch (diff-mode) diff (diff-mode) comparing (ediff) merging (ediff) patching (ediff) commit (log-edit) log (log-view log-edit) rcs (log-view) sccs (log-view) release\ management (pcvs) revision\ control (smerge-mode) merge (smerge-mode) diff3 (smerge-mode) conflict (smerge-mode) url (erc url vc) cua (cua-base) mark (cua-base) hypertext (browse-url) bind (dig) dig (gnus dig) network (gnus network-stream net-utils dns) tls (gnus tls gnutls) ssl (gnus tls gnutls) encryption (gnutls) mh-e (goto-addr) www (webjump goto-addr) hmac (gnus hmac-md5 hmac-def) rfc2104 (gnus hmac-md5 hmac-def) hmac-md5 (hmac-md5) md5 (hmac-md5) keyed-md5 (hmac-md5) cram-md5 (sasl hmac-md5) searching (gnus mairix) rss (gnus newsticker) atom (newsticker) ntlm (sasl ntlm) sasl (sasl ntlm) digest-md5 (sasl) soap (soap-client) web-services (soap-client) firewalls (socks) gnutls (gnus tls) relaxng (nxml) regexp (erc nxml) irc (org erc) chat (erc) client (erc) internet (erc) button (erc) logging (erc) timestamp (erc) binhex (gnus binhex) email (rmail feedmail) queue (feedmail) sendmail (feedmail) spray (feedmail) smtp (feedmail) draft (feedmail) hashcash (gnus hashcash) history (mail-utils) mime (gnus metamail) spam (mh-e gnus rmail) filter (rmail) rmail (rmail) uce (uce) unsolicited\ commercial\ email (uce) uudecode (gnus uudecode) cancel-lock (gnus) sha1 (gnus) web (gnus) xpm (gnus) annotation (gnus) glyph (gnus) registry (gnus) synchronization (gnus) nntp (gnus) nnrss (gnus) external-body (gnus) partial (gnus) shar (gnus) forward (gnus) gnatsweb (gnus) gnus (gnus) s/mime (gnus) mml (gnus) ir (gnus) hz (gnus) hz+ (gnus) smime (gnus) x\.509 (gnus) pem (gnus) openssl (gnus) gmane (gnus) report (gnus) bogofilter (gnus) bbdb (gnus) dspam (gnus) whitelist (gnus) blacklist (gnus) spamassassin (gnus) bsfilter (gnus) ifile (gnus) stat (gnus) crm114 (gnus) spamoracle (gnus) yenc (gnus) burma (emacs) cham (emacs) chinese (emacs) cyrillic (emacs) czech (emacs) ethiopic (emacs) european (emacs) greek (emacs) korean (emacs) hanja (emacs) hebrew (emacs) indian (emacs) devanagari (emacs) khmer (emacs) lao (emacs) romanian (emacs) sinhala (emacs) slovak (emacs) tai\ viet (emacs) thai (emacs) word\ break (emacs) emacs (emacs) tibetan (emacs) vietnamese (emacs) project (ede semantic) make (ede semantic) codegeneration (srecode) scheme (org ede) games (zone yow tetris studly spook solitaire snake pong mpuz morse meese life landmark hanoi gomoku gametree gamegrid fortune dunnet doctor dissociate decipher cookie1 bubbles bruce blackbox animate 5x5) puzzles (5x5) utils (fortune) cursive\ writing (handwrite) gomoku (landmark) neural\ network (landmark) adaptive\ search (landmark) chemotaxis (landmark) literate\ programming (org) reproducible\ research (org) r (org) statistics (org) comint (org) js (org) accounting (org) babel\ language (org) maxima (org) interactive\ shell (org) shen (org) org (org) task (org) remember (org) org-mode (org) docbook (org) erc (org) link (org) tables (org) plotting (org) emacsclient (org) taskjuggler (org) project\ planning (org))))

(provide 'finder-inf)
;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; finder-inf.el ends here
