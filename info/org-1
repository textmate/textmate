This is ../../info/org, produced by makeinfo version 4.13 from org.texi.

This manual is for Org version 7.8.11.

   Copyright (C) 2004-2012  Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

INFO-DIR-SECTION Emacs editing modes
START-INFO-DIR-ENTRY
* Org Mode: (org).      Outline-based notes management and organizer
END-INFO-DIR-ENTRY


File: org,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

Org Mode Manual
***************

This manual is for Org version 7.8.11.

   Copyright (C) 2004-2012  Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

* Menu:

* Introduction::                Getting started
* Document Structure::          A tree works like your brain
* Tables::                      Pure magic for quick formatting
* Hyperlinks::                  Notes in context
* TODO Items::                  Every tree branch can be a TODO item
* Tags::                        Tagging headlines and matching sets of tags
* Properties and Columns::      Storing information about an entry
* Dates and Times::             Making items useful for planning
* Capture - Refile - Archive::  The ins and outs for projects
* Agenda Views::                Collecting information into views
* Markup::                      Prepare text for rich export
* Exporting::                   Sharing and publishing of notes
* Publishing::                  Create a web site of linked Org files
* Working With Source Code::    Export, evaluate, and tangle code blocks
* Miscellaneous::               All the rest which did not fit elsewhere
* Hacking::                     How to hack your way around
* MobileOrg::                   Viewing and capture on a mobile device
* History and Acknowledgments::  How Org came into being
* Main Index::                  An index of Org's concepts and features
* Key Index::                   Key bindings and where they are described
* Command and Function Index::  Command names and some internal functions
* Variable Index::              Variables mentioned in the manual

 --- The Detailed Node Listing ---

Introduction

* Summary::                     Brief summary of what Org does
* Installation::                How to install a downloaded version of Org
* Activation::                  How to activate Org for certain buffers
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual

Document structure

* Outlines::                    Org is based on Outline mode
* Headlines::                   How to typeset Org tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Sparse trees::                Matches embedded in context
* Plain lists::                 Additional structure within an entry
* Drawers::                     Tucking stuff away
* Blocks::                      Folding blocks
* Footnotes::                   How footnotes are defined in Org's syntax
* Orgstruct mode::              Structure editing outside Org

Tables

* Built-in table editor::       Simple tables
* Column width and alignment::  Overrule the automatic settings
* Column groups::               Grouping to trigger vertical lines
* Orgtbl mode::                 The table editor as minor mode
* The spreadsheet::             The table editor has spreadsheet capabilities
* Org-Plot::                    Plotting from org tables

The spreadsheet

* References::                  How to refer to another field or range
* Formula syntax for Calc::     Using Calc to compute stuff
* Formula syntax for Lisp::     Writing formulas in Emacs Lisp
* Durations and time values::   How to compute durations and time values
* Field and range formulas::    Formula for specific (ranges of) fields
* Column formulas::             Formulas valid for an entire column
* Editing and debugging formulas::  Fixing formulas
* Updating the table::          Recomputing all dependent fields
* Advanced features::           Field and column names, parameters and automatic recalc

Hyperlinks

* Link format::                 How links in Org are formatted
* Internal links::              Links to other places in the current file
* External links::              URL-like links to the world
* Handling links::              Creating, inserting and following
* Using links outside Org::     Linking from my C source code?
* Link abbreviations::          Shortcuts for writing complex links
* Search options::              Linking to a specific location
* Custom searches::             When the default search is not enough

Internal links

* Radio targets::               Make targets trigger links in plain text

TODO items

* TODO basics::                 Marking and displaying TODO entries
* TODO extensions::             Workflow and assignments
* Progress logging::            Dates and notes for progress
* Priorities::                  Some things are more important than others
* Breaking down tasks::         Splitting a task into manageable pieces
* Checkboxes::                  Tick-off lists

Extended use of TODO keywords

* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred does the rest
* Multiple sets in one file::   Mixing it all, and still finding your way
* Fast access to TODO states::  Single letter selection of a state
* Per-file keywords::           Different files, different requirements
* Faces for TODO keywords::     Highlighting states
* TODO dependencies::           When one task needs to wait for others

Progress logging

* Closing items::               When was this entry marked DONE?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::        How consistent have you been?

Tags

* Tag inheritance::             Tags use the tree structure of the outline
* Setting tags::                How to assign tags to a headline
* Tag searches::                Searching for combinations of tags

Properties and columns

* Property syntax::             How properties are spelled out
* Special properties::          Access to other Org mode features
* Property searches::           Matching property values
* Property inheritance::        Passing values down the tree
* Column view::                 Tabular viewing and editing
* Property API::                Properties for Lisp programmers

Column view

* Defining columns::            The COLUMNS format property
* Using column view::           How to create and use column view
* Capturing column view::       A dynamic block for column view

Defining columns

* Scope of column definitions::  Where defined, where valid?
* Column attributes::           Appearance and content of a column

Dates and times

* Timestamps::                  Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps
* Deadlines and scheduling::    Planning your work
* Clocking work time::          Tracking how long you spend on a task
* Effort estimates::            Planning work effort in advance
* Relative timer::              Notes with a running timer
* Countdown timer::             Starting a countdown timer for a task

Creating timestamps

* The date/time prompt::        How Org mode helps you entering date and time
* Custom time format::          Making dates look different

Deadlines and scheduling

* Inserting deadline/schedule::  Planning items
* Repeated tasks::              Items that show up again and again

Clocking work time

* Clocking commands::           Starting and stopping a clock
* The clock table::             Detailed reports
* Resolving idle time::         Resolving time when you've been idle

Capture - Refile - Archive

* Capture::                     Capturing new stuff
* Attachments::                 Add files to tasks
* RSS Feeds::                   Getting input from RSS feeds
* Protocols::                   External (e.g. Browser) access to Emacs and Org
* Refiling notes::              Moving a tree from one place to another
* Archiving::                   What to do with finished projects

Capture

* Setting up capture::          Where notes will be stored
* Using capture::               Commands to invoke and terminate capture
* Capture templates::           Define the outline of different note types

Capture templates

* Template elements::           What is needed for a complete template entry
* Template expansion::          Filling in information about time and context

Archiving

* Moving subtrees::             Moving a tree to an archive file
* Internal archiving::          Switch off a tree but keep it in the file

Agenda views

* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Built-in agenda views::       What is available out of the box?
* Presentation and sorting::    How agenda items are prepared for display
* Agenda commands::             Remote editing of Org trees
* Custom agenda views::         Defining special searches and views
* Exporting Agenda Views::      Writing a view to a file
* Agenda column view::          Using column view for collected entries

The built-in agenda views

* Weekly/daily agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Timeline::                    Time-sorted view for single file
* Search view::                 Find entries by searching for text
* Stuck projects::              Find projects you need to review

Presentation and sorting

* Categories::                  Not all tasks are equal
* Time-of-day specifications::  How the agenda knows the time
* Sorting of agenda items::     The order of things

Custom agenda views

* Storing searches::            Type once, use often
* Block agenda::                All the stuff you need in a single buffer
* Setting Options::             Changing the rules

Markup for rich export

* Structural markup elements::  The basic structure as seen by the exporter
* Images and tables::           Tables and Images will be included
* Literal examples::            Source code examples with special formatting
* Include files::               Include additional files into a document
* Index entries::               Making an index
* Macro replacement::           Use macros to create complex output
* Embedded LaTeX::           LaTeX can be freely used inside Org documents

Structural markup elements

* Document title::              Where the title is taken from
* Headings and sections::       The document structure as seen by the exporter
* Table of contents::           The if and where of the table of contents
* Initial text::                Text before the first heading?
* Lists::                       Lists
* Paragraphs::                  Paragraphs
* Footnote markup::             Footnotes
* Emphasis and monospace::      Bold, italic, etc.
* Horizontal rules::            Make a line
* Comment lines::               What will *not* be exported

Embedded LaTeX

* Special symbols::             Greek letters and other symbols
* Subscripts and superscripts::  Simple syntax for raising/lowering text
* LaTeX fragments::             Complex formulas made easy
* Previewing LaTeX fragments::  What will this snippet look like?
* CDLaTeX mode::                Speed up entering of formulas

Exporting

* Selective export::            Using tags to select and exclude trees
* Export options::              Per-file export settings
* The export dispatcher::       How to access exporter commands
* ASCII/Latin-1/UTF-8 export::  Exporting to flat files with encoding
* HTML export::                 Exporting to HTML
* LaTeX and PDF export::     Exporting to LaTeX, and processing to PDF
* DocBook export::              Exporting to DocBook
* OpenDocument Text export::    Exporting to OpenDocument Text
* TaskJuggler export::          Exporting to TaskJuggler
* Freemind export::             Exporting to Freemind mind maps
* XOXO export::                 Exporting to XOXO
* iCalendar export::            Exporting in iCalendar format

HTML export

* HTML Export commands::        How to invoke HTML export
* HTML preamble and postamble::  How to insert a preamble and a postamble
* Quoting HTML tags::           Using direct HTML in Org mode
* Links in HTML export::        How links will be interpreted and formatted
* Tables in HTML export::       How to modify the formatting of tables
* Images in HTML export::       How to insert figures into HTML output
* Math formatting in HTML export::  Beautiful math also on the web
* Text areas in HTML export::   An alternative way to show an example
* CSS support::                 Changing the appearance of the output
* JavaScript support::          Info and Folding in a web browser

LaTeX and PDF export

* LaTeX/PDF export commands::
* Header and sectioning::       Setting up the export file structure
* Quoting LaTeX code::       Incorporating literal LaTeX code
* Tables in LaTeX export::   Options for exporting tables to LaTeX
* Images in LaTeX export::   How to insert figures into LaTeX output
* Beamer class export::         Turning the file into a presentation

DocBook export

* DocBook export commands::     How to invoke DocBook export
* Quoting DocBook code::        Incorporating DocBook code in Org files
* Recursive sections::          Recursive sections in DocBook
* Tables in DocBook export::    Tables are exported as HTML tables
* Images in DocBook export::    How to insert figures into DocBook output
* Special characters::          How to handle special characters

OpenDocument Text export

* Pre-requisites for ODT export::  What packages ODT exporter relies on
* ODT export commands::         How to invoke ODT export
* Extending ODT export::        How to produce `doc', `pdf' files
* Applying custom styles::      How to apply custom styles to the output
* Links in ODT export::         How links will be interpreted and formatted
* Tables in ODT export::        How Tables are exported
* Images in ODT export::        How to insert images
* Math formatting in ODT export::  How LaTeX fragments are formatted
* Labels and captions in ODT export::  How captions are rendered
* Literal examples in ODT export::  How source and example blocks are formatted
* Advanced topics in ODT export::  Read this if you are a power user

Math formatting in ODT export

* Working with LaTeX math snippets::  How to embed LaTeX math fragments
* Working with MathML or OpenDocument formula files::  How to embed equations in native format

Advanced topics in ODT export

* Configuring a document converter::  How to register a document converter
* Working with OpenDocument style files::  Explore the internals
* Creating one-off styles::     How to produce custom highlighting etc
* Customizing tables in ODT export::  How to define and use Table templates
* Validating OpenDocument XML::  How to debug corrupt OpenDocument files

Publishing

* Configuration::               Defining projects
* Uploading files::             How to get files up on the server
* Sample configuration::        Example projects
* Triggering publication::      Publication commands

Configuration

* Project alist::               The central configuration variable
* Sources and destinations::    From here to there
* Selecting files::             What files are part of the project?
* Publishing action::           Setting the function doing the publishing
* Publishing options::          Tweaking HTML/LaTeX export
* Publishing links::            Which links keep working after publishing?
* Sitemap::                     Generating a list of all pages
* Generating an index::         An index that reaches across pages

Sample configuration

* Simple example::              One-component publishing
* Complex example::             A multi-component publishing example

Working with source code

* Structure of code blocks::    Code block syntax described
* Editing source code::         Language major-mode editing
* Exporting code blocks::       Export contents and/or results
* Extracting source code::      Create pure source code files
* Evaluating code blocks::      Place results of evaluation in the Org mode buffer
* Library of Babel::            Use and contribute to a library of useful code blocks
* Languages::                   List of supported code block languages
* Header arguments::            Configure code block functionality
* Results of evaluation::       How evaluation results are handled
* Noweb reference syntax::      Literate programming in Org mode
* Key bindings and useful functions::  Work quickly with code blocks
* Batch execution::             Call functions from the command line

Header arguments

* Using header arguments::      Different ways to set header arguments
* Specific header arguments::   List of header arguments

Using header arguments

* System-wide header arguments::  Set global default values
* Language-specific header arguments::  Set default values by language
* Buffer-wide header arguments::  Set default values for a specific buffer
* Header arguments in Org mode properties::  Set default values for a buffer or heading
* Code block specific header arguments::  The most common way to set values
* Header arguments in function calls::  The most specific level

Specific header arguments

* var::                         Pass arguments to code blocks
* results::                     Specify the type of results and how they will
                                be collected and handled
* file::                        Specify a path for file output
* dir::                         Specify the default (possibly remote)
                                directory for code block execution
* exports::                     Export code and/or results
* tangle::                      Toggle tangling and specify file name
* mkdirp::                      Toggle creation of parent directories of target
                                files during tangling
* comments::                    Toggle insertion of comments in tangled
                                code files
* padline::                     Control insertion of padding lines in tangled
                                code files
* no-expand::                   Turn off variable assignment and noweb
                                expansion during tangling
* session::                     Preserve the state of code evaluation
* noweb::                       Toggle expansion of noweb references
* noweb-ref::                   Specify block's noweb reference resolution target
* noweb-sep::                   String used to separate noweb references
* cache::                       Avoid re-evaluating unchanged code blocks
* sep::                         Delimiter for writing tabular results outside Org
* hlines::                      Handle horizontal lines in tables
* colnames::                    Handle column names in tables
* rownames::                    Handle row names in tables
* shebang::                     Make tangled files executable
* eval::                        Limit evaluation of specific code blocks

Miscellaneous

* Completion::                  M-TAB knows what you need
* Easy Templates::              Quick insertion of structural elements
* Speed keys::                  Electric commands at the beginning of a headline
* Code evaluation security::    Org mode files evaluate inline code
* Customization::               Adapting Org to your taste
* In-buffer settings::          Overview of the #+KEYWORDS
* The very busy C-c C-c key::   When in doubt, press C-c C-c
* Clean view::                  Getting rid of leading stars in the outline
* TTY keys::                    Using Org on a tty
* Interaction::                 Other Emacs packages
* org-crypt.el::                Encrypting Org files

Interaction with other packages

* Cooperation::                 Packages Org cooperates with
* Conflicts::                   Packages that lead to conflicts

Hacking

* Hooks::                       Who to reach into Org's internals
* Add-on packages::             Available extensions
* Adding hyperlink types::      New custom link types
* Context-sensitive commands::  How to add functionality to such commands
* Tables in arbitrary syntax::  Orgtbl for LaTeX and other programs
* Dynamic blocks::              Automatically filled blocks
* Special agenda views::        Customized views
* Extracting agenda information::  Postprocessing of agenda information
* Using the property API::      Writing programs that use entry properties
* Using the mapping API::       Mapping over all or selected entries

Tables and lists in arbitrary syntax

* Radio tables::                Sending and receiving radio tables
* A LaTeX example::          Step by step, almost a tutorial
* Translator functions::        Copy and modify
* Radio lists::                 Doing the same for lists

MobileOrg

* Setting up the staging area::  Where to interact with the mobile device
* Pushing to MobileOrg::        Uploading Org files and agendas
* Pulling from MobileOrg::      Integrating captured and flagged items


File: org,  Node: Introduction,  Next: Document Structure,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Summary::                     Brief summary of what Org does
* Installation::                How to install a downloaded version of Org
* Activation::                  How to activate Org for certain buffers
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual


File: org,  Node: Summary,  Next: Installation,  Prev: Introduction,  Up: Introduction

1.1 Summary
===========

Org is a mode for keeping notes, maintaining TODO lists, and doing
project planning with a fast and effective plain-text system.

   Org develops organizational tasks around NOTES files that contain
lists or information about projects as plain text.  Org is implemented
on top of Outline mode, which makes it possible to keep the content of
large files well structured.  Visibility cycling and structure editing
help to work with the tree.  Tables are easily created with a built-in
table editor.  Org supports TODO items, deadlines, timestamps, and
scheduling.  It dynamically compiles entries into an agenda that
utilizes and smoothly integrates much of the Emacs calendar and diary.
Plain text URL-like links connect to websites, emails, Usenet messages,
BBDB entries, and any files related to the projects.  For printing and
sharing of notes, an Org file can be exported as a structured ASCII
file, as HTML, or (TODO and agenda items only) as an iCalendar file.
It can also serve as a publishing tool for a set of linked web pages.

   As a project planning environment, Org works by adding metadata to
outline nodes.  Based on this data, specific entries can be extracted
in queries and create dynamic agenda views.

   Org mode contains the Org Babel environment which allows you to work
with embedded source code blocks in a file, to facilitate code
evaluation, documentation, and literate programming techniques.

   Org's automatic, context-sensitive table editor with spreadsheet
capabilities can be integrated into any major mode by activating the
minor Orgtbl mode.  Using a translation step, it can be used to maintain
tables in arbitrary file types, for example in LaTeX.  The structure
editing and list creation capabilities can be used outside Org with the
minor Orgstruct mode.

   Org keeps simple things simple.  When first fired up, it should feel
like a straightforward, easy to use outliner.  Complexity is not
imposed, but a large amount of functionality is available when you need
it.  Org is a toolbox and can be used in different ways and for
different ends, for example:

     * an outline extension with visibility cycling and structure editing
     * an ASCII system and table editor for taking structured notes
     * a TODO list editor
     * a full agenda and planner with deadlines and work scheduling
     * an environment in which to implement David Allen's GTD system
     * a simple hypertext system, with HTML and LaTeX export
     * a publishing tool to create a set of interlinked webpages
     * an environment for literate programming

   There is a website for Org which provides links to the newest
version of Org, as well as additional information, frequently asked
questions (FAQ), links to tutorials, etc.  This page is located at
`http://orgmode.org'.

   The version 7.3 of this manual is available as a paperback book from
Network Theory Ltd. (http://www.network-theory.co.uk/org/manual/)


File: org,  Node: Installation,  Next: Activation,  Prev: Summary,  Up: Introduction

1.2 Installation
================

Important: If you are using a version of Org that is part of the Emacs
distribution or an XEmacs package, please skip this section and go
directly to *note Activation::.  To see what version of Org (if any) is
part of your Emacs distribution, type `M-x load-library RET org' and
then `M-x org-version'.

   If you have downloaded Org from the Web, either as a distribution
`.zip' or `.tar' file, or as a Git archive, you must take the following
steps to install it: go into the unpacked Org distribution directory
and edit the top section of the file `Makefile'.  You must set the name
of the Emacs binary (likely either `emacs' or `xemacs'), and the paths
to the directories where local Lisp and Info files are kept.  If you
don't have access to the system-wide directories, you can simply run
Org directly from the distribution directory by adding the `lisp'
subdirectory to the Emacs load path.  To do this, add the following
line to `.emacs':

     (setq load-path (cons "~/path/to/orgdir/lisp" load-path))

If you plan to use code from the `contrib' subdirectory, do a similar
step for this directory:

     (setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))

Now byte-compile the Lisp files with the shell command:

     make

If you are running Org from the distribution directory, this is all.
If you want to install Org into the system directories, use (as
administrator)

     make install

   Installing Info files is system dependent, because of differences in
the `install-info' program.  The following should correctly install the
Info files on most systems, please send a bug report if not(1).

     make install-info

   Then add the following line to `.emacs'.  It is needed so that Emacs
can autoload functions that are located in files not immediately loaded
when Org mode starts.
     (require 'org-install)

   Do not forget to activate Org as described in the following section.

   ---------- Footnotes ----------

   (1) The output from install-info (if any) is also system dependent.
In particular Debian and its derivatives use two different versions of
install-info and you may see the message:

     This is not dpkg install-info anymore, but GNU install-info
     See the man page for ginstall-info for command line arguments

which can be safely ignored.


File: org,  Node: Activation,  Next: Feedback,  Prev: Installation,  Up: Introduction

1.3 Activation
==============

To make sure files with extension `.org' use Org mode, add the following
line to your `.emacs' file.
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
   Org mode buffers need font-lock to be turned on - this is the
default in Emacs(1).

   The four Org commands `org-store-link', `org-capture', `org-agenda',
and `org-iswitchb' should be accessible through global keys (i.e.
anywhere in Emacs, not just in Org buffers).  Here are suggested
bindings for these keys, please modify the keys to your own liking.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

   With this setup, all files with extension `.org' will be put into
Org mode.  As an alternative, make the first line of a file look like
this:

     MY PROJECTS    -*- mode: org; -*-

which will select Org mode for this buffer no matter what the file's
name is.  See also the variable `org-insert-mode-line-in-empty-file'.

   Many commands in Org work on the region if the region is active.  To
make use of this, you need to have `transient-mark-mode'
(`zmacs-regions' in XEmacs) turned on.  In Emacs 23 this is the default,
in Emacs 22 you need to do this yourself with
     (transient-mark-mode 1)
   If you do not like `transient-mark-mode', you can create an active
region by using the mouse to select a region, or pressing `C-<SPC>'
twice before moving the cursor.

   ---------- Footnotes ----------

   (1) If you don't use font-lock globally, turn it on in Org buffer
with `(add-hook 'org-mode-hook 'turn-on-font-lock)'


File: org,  Node: Feedback,  Next: Conventions,  Prev: Activation,  Up: Introduction

1.4 Feedback
============

If you find problems with Org, or if you have questions, remarks, or
ideas about it, please mail to the Org mailing list
<emacs-orgmode@gnu.org>.  If you are not a member of the mailing list,
your mail will be passed to the list after a moderator has approved
it(1).

   For bug reports, please first try to reproduce the bug with the
latest version of Org available--if you are running an outdated
version, it is quite possible that the bug has been fixed already.  If
the bug persists, prepare a report and provide as much information as
possible, including the version information of Emacs (`M-x
emacs-version <RET>') and Org (`M-x org-version <RET>'), as well as the
Org related setup in `.emacs'.  The easiest way to do this is to use
the command
     M-x org-submit-bug-report
   which will put all this information into an Emacs mail buffer so
that you only need to add your description.  If you re not sending the
Email from within Emacs, please copy and paste the content into your
Email program.

   Sometimes you might face a problem due to an error in your Emacs or
Org mode setup.  Before reporting a bug, it is very helpful to start
Emacs with minimal customizations and reproduce the problem.  Doing so
often helps you determine if the problem is with your customization or
with Org mode itself.  You can start a typical minimal session with a
command like the example below.

     $ emacs -Q -l /path/to/minimal-org.el

   However if you are using Org mode as distributed with Emacs, a
minimal setup is not necessary.  In that case it is sufficient to start
Emacs as `emacs -Q'.  The `minimal-org.el' setup file can have contents
as shown below.

     ;;; Minimal setup to load latest `org-mode'

     ;; activate debugging
     (setq debug-on-error t
           debug-on-signal nil
           debug-on-quit nil)

     ;; add latest org-mode to load path
     (add-to-list 'load-path (expand-file-name "/path/to/org-mode/lisp"))
     (add-to-list 'load-path (expand-file-name "/path/to/org-mode/contrib/lisp"))

     ;; activate org
     (require 'org-install)

   If an error occurs, a backtrace can be very useful (see below on how
to create one).  Often a small example file helps, along with clear
information about:

  1. What exactly did you do?

  2. What did you expect to happen?

  3. What happened instead?
        Thank you for helping to improve this program.

How to create a useful backtrace
................................

If working with Org produces an error with a message you don't
understand, you may have hit a bug.  The best way to report this is by
providing, in addition to what was mentioned above, a _backtrace_.
This is information from the built-in debugger about where and how the
error occurred.  Here is how to produce a useful backtrace:

  1. Reload uncompiled versions of all Org mode Lisp files.  The
     backtrace contains much more information if it is produced with
     uncompiled code.  To do this, use
          C-u M-x org-reload RET
     or select `Org -> Refresh/Reload -> Reload Org uncompiled' from the
     menu.

  2. Go to the `Options' menu and select `Enter Debugger on Error'
     (XEmacs has this option in the `Troubleshooting' sub-menu).

  3. Do whatever you have to do to hit the error.  Don't forget to
     document the steps you take.

  4. When you hit the error, a `*Backtrace*' buffer will appear on the
     screen.  Save this buffer to a file (for example using `C-x C-w')
     and attach it to your bug report.

   ---------- Footnotes ----------

   (1) Please consider subscribing to the mailing list, in order to
minimize the work the mailing list moderators have to do.


File: org,  Node: Conventions,  Prev: Feedback,  Up: Introduction

1.5 Typesetting conventions used in this manual
===============================================

Org uses three types of keywords: TODO keywords, tags, and property
names.  In this manual we use the following conventions:

`TODO'
`WAITING'
     TODO keywords are written with all capitals, even if they are
     user-defined.

`boss'
`ARCHIVE'
     User-defined tags are written in lowercase; built-in tags with
     special meaning are written with all capitals.

`Release'
`PRIORITY'
     User-defined properties are capitalized; built-in properties with
     special meaning are written with all capitals.

   The manual lists both the keys and the corresponding commands for
accessing functionality.  Org mode often uses the same key for
different functions, depending on context.  The command that is bound
to such keys has a generic name, like `org-metaright'.  In the manual
we will, wherever possible, give the function that is internally called
by the generic command.  For example, in the chapter on document
structure, `M-<right>' will be listed to call `org-do-demote', while in
the chapter on tables, it will be listed to call
org-table-move-column-right.

   If you prefer, you can compile the manual without the command names
by unsetting the flag `cmdnames' in `org.texi'.


File: org,  Node: Document Structure,  Next: Tables,  Prev: Introduction,  Up: Top

2 Document structure
********************

Org is based on Outline mode and provides flexible commands to edit the
structure of the document.

* Menu:

* Outlines::                    Org is based on Outline mode
* Headlines::                   How to typeset Org tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Sparse trees::                Matches embedded in context
* Plain lists::                 Additional structure within an entry
* Drawers::                     Tucking stuff away
* Blocks::                      Folding blocks
* Footnotes::                   How footnotes are defined in Org's syntax
* Orgstruct mode::              Structure editing outside Org


File: org,  Node: Outlines,  Next: Headlines,  Prev: Document Structure,  Up: Document Structure

2.1 Outlines
============

Org is implemented on top of Outline mode.  Outlines allow a document
to be organized in a hierarchical structure, which (at least for me) is
the best representation of notes and thoughts.  An overview of this
structure is achieved by folding (hiding) large parts of the document
to show only the general document structure and the parts currently
being worked on.  Org greatly simplifies the use of outlines by
compressing the entire show/hide functionality into a single command,
`org-cycle', which is bound to the <TAB> key.


File: org,  Node: Headlines,  Next: Visibility cycling,  Prev: Outlines,  Up: Document Structure

2.2 Headlines
=============

Headlines define the structure of an outline tree.  The headlines in Org
start with one or more stars, on the left margin(1).  For example:

     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text

     * Another top level headline

Some people find the many stars too noisy and would prefer an outline
that has whitespace followed by a single star as headline starters.
*note Clean view::, describes a setup to realize this.

   An empty line after the end of a subtree is considered part of it and
will be hidden when the subtree is folded.  However, if you leave at
least two empty lines, one empty line will remain visible after folding
the subtree, in order to structure the collapsed view.  See the
variable `org-cycle-separator-lines' to modify this behavior.

   ---------- Footnotes ----------

   (1) See the variables `org-special-ctrl-a/e', `org-special-ctrl-k',
and `org-ctrl-k-protect-subtree' to configure special behavior of `C-a',
`C-e', and `C-k' in headlines.


File: org,  Node: Visibility cycling,  Next: Motion,  Prev: Headlines,  Up: Document Structure

2.3 Visibility cycling
======================

Outlines make it possible to hide parts of the text in the buffer.  Org
uses just two commands, bound to <TAB> and `S-<TAB>' to change the
visibility in the buffer.

`<TAB>'     (`org-cycle')
     _Subtree cycling_: Rotate current subtree among the states

          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'

     The cursor must be on a headline for this to work(1).  When the
     cursor is at the beginning of the buffer and the first line is not
     a headline, then <TAB> actually runs global cycling (see
     below)(2).  Also when called with a prefix argument (`C-u <TAB>'),
     global cycling is invoked.

`S-<TAB>'     (`org-global-cycle')
C-u <TAB>
     _Global cycling_: Rotate the entire buffer among the states

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

     When `S-<TAB>' is called with a numeric prefix argument N, the
     CONTENTS view up to headlines of level N will be shown.  Note that
     inside tables, `S-<TAB>' jumps to the previous field.

`C-u C-u C-u <TAB>'     (`show-all')
     Show all, including drawers.  

`C-c C-r'     (`org-reveal')
     Reveal context around point, showing the current entry, the
     following heading and the hierarchy above.  Useful for working
     near a location that has been exposed by a sparse tree command
     (*note Sparse trees::) or an agenda command (*note Agenda
     commands::).  With a prefix argument show, on each level, all
     sibling headings.  With a double prefix argument, also show the
     entire subtree of the parent.  

`C-c C-k'     (`show-branches')
     Expose all the headings of the subtree, CONTENT view for just one
     subtree.  

`C-c C-x b'     (`org-tree-to-indirect-buffer')
     Show the current subtree in an indirect buffer(3).  With a numeric
     prefix argument N, go up to level N and then take that tree.  If N
     is negative then go up that many levels.  With a `C-u' prefix, do
     not remove the previously used indirect buffer.  

`C-c C-x v'     (`org-copy-visible')
     Copy the visible text in the region into the kill ring.

   When Emacs first visits an Org file, the global state is set to
OVERVIEW, i.e. only the top level headlines are visible.  This can be
configured through the variable `org-startup-folded', or on a per-file
basis by adding one of the following lines anywhere in the buffer:

     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything

Furthermore, any entries with a `VISIBILITY' property (*note Properties
and Columns::) will get their visibility adapted accordingly.  Allowed
values for this property are `folded', `children', `content', and `all'.
`C-u C-u <TAB>'     (`org-set-startup-visibility')
     Switch back to the startup visibility of the buffer, i.e. whatever
     is requested by startup options and `VISIBILITY' properties in
     individual entries.

   ---------- Footnotes ----------

   (1) see, however, the option `org-cycle-emulate-tab'.

   (2) see the option `org-cycle-global-at-bob'.

   (3) The indirect buffer (*note Indirect Buffers: (emacs)Indirect
Buffers.)  will contain the entire buffer, but will be narrowed to the
current tree.  Editing the indirect buffer will also change the
original buffer, but without affecting visibility in that buffer.


File: org,  Node: Motion,  Next: Structure editing,  Prev: Visibility cycling,  Up: Document Structure

2.4 Motion
==========

The following commands jump to other headlines in the buffer.

`C-c C-n'     (`outline-next-visible-heading')
     Next heading.  

`C-c C-p'     (`outline-previous-visible-heading')
     Previous heading.  

`C-c C-f'     (`org-forward-same-level')
     Next heading same level.  

`C-c C-b'     (`org-backward-same-level')
     Previous heading same level.  

`C-c C-u'     (`outline-up-heading')
     Backward to higher level heading.  

`C-c C-j'     (`org-goto')
     Jump to a different place without changing the current outline
     visibility.  Shows the document structure in a temporary buffer,
     where you can use the following keys to find your destination: 
          <TAB>         Cycle visibility.
          <down> / <up>   Next/previous visible headline.
          <RET>         Select this location.
          /           Do a Sparse-tree search
          The following keys work if you turn off `org-goto-auto-isearch'
          n / p        Next/previous visible headline.
          f / b        Next/previous headline same level.
          u            One level up.
          0-9          Digit argument.
          q            Quit
     See also the variable `org-goto-interface'.


File: org,  Node: Structure editing,  Next: Sparse trees,  Prev: Motion,  Up: Document Structure

2.5 Structure editing
=====================

`M-<RET>'     (`org-insert-heading')
     Insert new heading with same level as current.  If the cursor is
     in a plain list item, a new item is created (*note Plain lists::).
     To force creation of a new headline, use a prefix argument.  When
     this command is used in the middle of a line, the line is split
     and the rest of the line becomes the new headline(1).  If the
     command is used at the beginning of a headline, the new headline
     is created before the current line.  If at the beginning of any
     other line, the content of that line is made the new heading.  If
     the command is used at the end of a folded subtree (i.e.  behind
     the ellipses at the end of a headline), then a headline like the
     current one will be inserted after the end of the subtree.  

`C-<RET>'     (`org-insert-heading-respect-content')
     Just like `M-<RET>', except when adding a new heading below the
     current heading, the new heading is placed after the body instead
     of before it.  This command works from anywhere in the entry.  

`M-S-<RET>'     (`org-insert-todo-heading')
     Insert new TODO entry with same level as current heading.  See
     also the variable `org-treat-insert-todo-heading-as-state-change'.  

`C-S-<RET>'     (`org-insert-todo-heading-respect-content')
     Insert new TODO entry with same level as current heading.  Like
     `C-<RET>', the new headline will be inserted after the current
     subtree.  

`<TAB>'     (`org-cycle')
     In a new entry with no text yet, the first <TAB> demotes the entry
     to become a child of the previous one.  The next <TAB> makes it a
     parent, and so on, all the way to top level.  Yet another <TAB>,
     and you are back to the initial level.  

`M-<left>'     (`org-do-promote')
     Promote current heading by one level.  

`M-<right>'     (`org-do-demote')
     Demote current heading by one level.  

`M-S-<left>'     (`org-promote-subtree')
     Promote the current subtree by one level.  

`M-S-<right>'     (`org-demote-subtree')
     Demote the current subtree by one level.  

`M-S-<up>'     (`org-move-subtree-up')
     Move subtree up (swap with previous subtree of same level).  

`M-S-<down>'     (`org-move-subtree-down')
     Move subtree down (swap with next subtree of same level).  

`C-c C-x C-w'     (`org-cut-subtree')
     Kill subtree, i.e. remove it from buffer but save in kill ring.
     With a numeric prefix argument N, kill N sequential subtrees.  

`C-c C-x M-w'     (`org-copy-subtree')
     Copy subtree to kill ring.  With a numeric prefix argument N, copy
     the N sequential subtrees.  

`C-c C-x C-y'     (`org-paste-subtree')
     Yank subtree from kill ring.  This does modify the level of the
     subtree to make sure the tree fits in nicely at the yank position.
     The yank level can also be specified with a numeric prefix
     argument, or by yanking after a headline marker like `****'.  

`C-y'     (`org-yank')
     Depending on the variables `org-yank-adjusted-subtrees' and
     `org-yank-folded-subtrees', Org's internal `yank' command will
     paste subtrees folded and in a clever way, using the same command
     as `C-c C-x C-y'.  With the default settings, no level adjustment
     will take place, but the yanked tree will be folded unless doing
     so would swallow text previously visible.  Any prefix argument to
     this command will force a normal `yank' to be executed, with the
     prefix passed along.  A good way to force a normal yank is `C-u
     C-y'.  If you use `yank-pop' after a yank, it will yank previous
     kill items plainly, without adjustment and folding.  

`C-c C-x c'     (`org-clone-subtree-with-time-shift')
     Clone a subtree by making a number of sibling copies of it.  You
     will be prompted for the number of copies to make, and you can
     also specify if any timestamps in the entry should be shifted.
     This can be useful, for example, to create a number of tasks
     related to a series of lectures to prepare.  For more details, see
     the docstring of the command `org-clone-subtree-with-time-shift'.  

`C-c C-w'     (`org-refile')
     Refile entry or region to a different location.  *Note Refiling
     notes::.  

`C-c ^'     (`org-sort-entries-or-items')
     Sort same-level entries.  When there is an active region, all
     entries in the region will be sorted.  Otherwise the children of
     the current headline are sorted.  The command prompts for the
     sorting method, which can be alphabetically, numerically, by time
     (first timestamp with active preferred, creation time, scheduled
     time, deadline time), by priority, by TODO keyword (in the
     sequence the keywords have been defined in the setup) or by the
     value of a property.  Reverse sorting is possible as well.  You
     can also supply your own function to extract the sorting key.
     With a `C-u' prefix, sorting will be case-sensitive.  

`C-x n s'     (`org-narrow-to-subtree')
     Narrow buffer to current subtree.  

`C-x n b'     (`org-narrow-to-block')
     Narrow buffer to current block.  

`C-x n w'     (`widen')
     Widen buffer to remove narrowing.  

`C-c *'     (`org-toggle-heading')
     Turn a normal line or plain list item into a headline (so that it
     becomes a subheading at its location).  Also turn a headline into
     a normal line by removing the stars.  If there is an active
     region, turn all lines in the region into headlines.  If the first
     line in the region was an item, turn only the item lines into
     headlines.  Finally, if the first line is a headline, remove the
     stars from all headlines in the region.

   When there is an active region (Transient Mark mode), promotion and
demotion work on all headlines in the region.  To select a region of
headlines, it is best to place both point and mark at the beginning of a
line, mark at the beginning of the first headline, and point at the line
just after the last headline to change.  Note that when the cursor is
inside a table (*note Tables::), the Meta-Cursor keys have different
functionality.

   ---------- Footnotes ----------

   (1) If you do not want the line to be split, customize the variable
`org-M-RET-may-split-line'.


File: org,  Node: Sparse trees,  Next: Plain lists,  Prev: Structure editing,  Up: Document Structure

2.6 Sparse trees
================

An important feature of Org mode is the ability to construct _sparse
trees_ for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is
made visible along with the headline structure above it(1).  Just try
it out and you will see immediately how it works.

   Org mode contains several commands creating such trees, all these
commands can be accessed through a dispatcher:

`C-c /'     (`org-sparse-tree')
     This prompts for an extra key to select a sparse-tree creating
     command.  

`C-c / r'     (`org-occur')
     Prompts for a regexp and shows a sparse tree with all matches.  If
     the match is in a headline, the headline is made visible.  If the
     match is in the body of an entry, headline and body are made
     visible.  In order to provide minimal context, also the full
     hierarchy of headlines above the match is shown, as well as the
     headline following the match.  Each match is also highlighted; the
     highlights disappear when the buffer is changed by an editing
     command(2), or by pressing `C-c C-c'.  When called with a `C-u'
     prefix argument, previous highlights are kept, so several calls to
     this command can be stacked.  

`M-g n'  or  `M-g M-n'     (`next-error')
     Jump to the next sparse tree match in this buffer.  

`M-g p'  or  `M-g M-p'     (`previous-error')
     Jump to the previous sparse tree match in this buffer.

For frequently used sparse trees of specific search strings, you can
use the variable `org-agenda-custom-commands' to define fast keyboard
access to specific sparse trees.  These commands will then be
accessible through the agenda dispatcher (*note Agenda dispatcher::).
For example:

     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))

will define the key `C-c a f' as a shortcut for creating a sparse tree
matching the string `FIXME'.

   The other sparse tree commands select headings based on TODO
keywords, tags, or properties and will be discussed later in this
manual.

   To print a sparse tree, you can use the Emacs command
`ps-print-buffer-with-faces' which does not print invisible parts of
the document (3).  Or you can use the command `C-c C-e v' to export
only the visible part of the document and print the resulting file.

   ---------- Footnotes ----------

   (1) See also the variables `org-show-hierarchy-above',
`org-show-following-heading', `org-show-siblings', and
`org-show-entry-below' for detailed control on how much context is
shown around each match.

   (2) This depends on the option `org-remove-highlights-with-change'

   (3) This does not work under XEmacs, because XEmacs uses selective
display for outlining, not text properties.


File: org,  Node: Plain lists,  Next: Drawers,  Prev: Sparse trees,  Up: Document Structure

2.7 Plain lists
===============

Within an entry of the outline tree, hand-formatted lists can provide
additional structure.  They also provide a way to create lists of
checkboxes (*note Checkboxes::).  Org supports editing such lists, and
every exporter (*note Exporting::) can parse and format them.

   Org knows ordered lists, unordered lists, and description lists.
   * _Unordered_ list items start with `-', `+', or `*'(1)  as bullets.

   * _Ordered_ list items start with a numeral followed by either a
     period or a right parenthesis(2), such as `1.' or `1)'(3).  If you
     want a list to start with a different value (e.g. 20), start the
     text of the item with `[@20]'(4).  Those constructs can be used in
     any item of the list in order to enforce a particular numbering.

   * _Description_ list items are unordered list items, and contain the
     separator ` :: ' to distinguish the description _term_ from the
     description.

   Items belonging to the same list must have the same indentation on
the first line.  In particular, if an ordered list reaches number
`10.', then the 2-digit numbers must be written left-aligned with the
other numbers in the list.  An item ends before the next line that is
less or equally indented than its bullet/number.

   A list ends whenever every item has ended, which means before any
line less or equally indented than items at top level.  It also ends
before two blank lines(5).  In that case, all items are closed.  Here
is an example:

     ** Lord of the Rings
        My favorite scenes are (in this order)
        1. The attack of the Rohirrim
        2. Eowyn's fight with the witch king
           + this was already my favorite scene in the book
           + I really like Miranda Otto.
        3. Peter Jackson being shot by Legolas
           - on DVD only
           He makes a really funny face when it happens.
        But in the end, no individual scenes matter but the film as a whole.
        Important actors in this film are:
        - Elijah Wood :: He plays Frodo
        - Sean Austin :: He plays Sam, Frodo's friend.  I still remember
          him very well from his role as Mikey Walsh in The Goonies.

   Org supports these lists by tuning filling and wrapping commands to
deal with them correctly(6), and by exporting them properly (*note
Exporting::).  Since indentation is what governs the structure of these
lists, many structural constructs like `#+BEGIN_...' blocks can be
indented to signal that they belong to a particular item.

   If you find that using a different bullet for a sub-list (than that
used for the current list-level) improves readability, customize the
variable `org-list-demote-modify-bullet'.  To get a greater difference
of indentation between items and theirs sub-items, customize
`org-list-indent-offset'.

   The following commands act on items when the cursor is in the first
line of an item (the line with the bullet or number).  Some of them
imply the application of automatic rules to keep list structure intact.
If some of these actions get in your way, configure
`org-list-automatic-rules' to disable them individually.

`<TAB>'     (`org-cycle')
     Items can be folded just like headline levels.  Normally this
     works only if the cursor is on a plain list item.  For more
     details, see the variable `org-cycle-include-plain-lists'.  If
     this variable is set to `integrate', plain list items will be
     treated like low-level headlines.  The level of an item is then
     given by the indentation of the bullet/number.  Items are always
     subordinate to real headlines, however; the hierarchies remain
     completely separated.  In a new item with no text yet, the first
     <TAB> demotes the item to become a child of the previous one.
     Subsequent <TAB>s move the item to meaningful levels in the list
     and eventually get it back to its initial position.  

`M-<RET>'     (`org-insert-heading')
     Insert new item at current level.  With a prefix argument, force a
     new heading (*note Structure editing::).  If this command is used
     in the middle of an item, that item is _split_ in two, and the
     second part becomes the new item(7).  If this command is executed
     _before item's body_, the new item is created _before_ the current
     one.

`M-S-RET'
     Insert a new item with a checkbox (*note Checkboxes::).  

`S-up'
`S-down'
     Jump to the previous/next item in the current list(8), but only if
     `org-support-shift-select' is off.  If not, you can still use
     paragraph jumping commands like `C-<up>' and `C-<down>' to quite
     similar effect.  

`M-up'
`M-down'
     Move the item including subitems up/down(9) (swap with
     previous/next item of same indentation).  If the list is ordered,
     renumbering is automatic.  

`M-left'
`M-right'
     Decrease/increase the indentation of an item, leaving children
     alone.  

`M-S-left'
`M-S-right'
     Decrease/increase the indentation of the item, including subitems.
     Initially, the item tree is selected based on current indentation.
     When these commands are executed several times in direct
     succession, the initially selected region is used, even if the new
     indentation would imply a different hierarchy.  To use the new
     hierarchy, break the command chain with a cursor motion or so.

     As a special case, using this command on the very first item of a
     list will move the whole list.  This behavior can be disabled by
     configuring `org-list-automatic-rules'.  The global indentation of
     a list has no influence on the text _after_ the list.  

`C-c C-c'
     If there is a checkbox (*note Checkboxes::) in the item line,
     toggle the state of the checkbox.  In any case, verify bullets and
     indentation consistency in the whole list.  

`C-c -'
     Cycle the entire list level through the different
     itemize/enumerate bullets (`-', `+', `*', `1.', `1)') or a subset
     of them, depending on `org-plain-list-ordered-item-terminator',
     the type of list, and its position(10).  With a numeric prefix
     argument N, select the Nth bullet from this list.  If there is an
     active region when calling this, selected text will be changed
     into an item.  With a prefix argument, all lines will be converted
     to list items.  If the first line already was a list item, any
     item marker will be removed from the list.  Finally, even without
     an active region, a normal line will be converted into a list item.  

`C-c *'
     Turn a plain list item into a headline (so that it becomes a
     subheading at its location).  *Note Structure editing::, for a
     detailed explanation.  

`C-c C-*'
     Turn the whole plain list into a subtree of the current heading.
     Checkboxes (*note Checkboxes::) will become TODO (resp. DONE)
     keywords when unchecked (resp. checked).  

`S-left/right'
     This command also cycles bullet styles when the cursor in on the
     bullet or anywhere in an item line, details depending on
     `org-support-shift-select'.  

`C-c ^'
     Sort the plain list.  You will be prompted for the sorting method:
     numerically, alphabetically, by time, or by custom function.

   ---------- Footnotes ----------

   (1) When using `*' as a bullet, lines must be indented or they will
be seen as top-level headlines.  Also, when you are hiding leading
stars to get a clean outline view, plain list items starting with a
star may be hard to distinguish from true headlines.  In short: even
though `*' is supported, it may be better to not use it for plain list
items.

   (2) You can filter out any of them by configuring
`org-plain-list-ordered-item-terminator'.

   (3) You can also get `a.', `A.', `a)' and `A)' by configuring
`org-alphabetical-lists'.  To minimize confusion with normal text,
those are limited to one character only.  Beyond that limit, bullets
will automatically fallback to numbers.

   (4) If there's a checkbox in the item, the cookie must be put
_before_ the checkbox.  If you have activated alphabetical lists, you
can also use counters like `[@b]'.

   (5) See also `org-empty-line-terminates-plain-lists'.

   (6) Org only changes the filling settings for Emacs.  For XEmacs,
you should use Kyle E. Jones' `filladapt.el'.  To turn this on, put
into `.emacs': `(require 'filladapt)'

   (7) If you do not want the item to be split, customize the variable
`org-M-RET-may-split-line'.

   (8) If you want to cycle around items that way, you may customize
`org-list-use-circular-motion'.

   (9) See `org-liste-use-circular-motion' for a cyclic behavior.

   (10) See `bullet' rule in `org-list-automatic-rules' for more
information.


File: org,  Node: Drawers,  Next: Blocks,  Prev: Plain lists,  Up: Document Structure

2.8 Drawers
===========

Sometimes you want to keep information associated with an entry, but you
normally don't want to see it.  For this, Org mode has _drawers_.
Drawers need to be configured with the variable `org-drawers'(1).
Drawers look like this:

     ** This is a headline
        Still outside the drawer
        :DRAWERNAME:
        This is inside the drawer.
        :END:
        After the drawer.

   Visibility cycling (*note Visibility cycling::) on the headline will
hide and show the entry, but keep the drawer collapsed to a single
line.  In order to look inside the drawer, you need to move the cursor
to the drawer line and press <TAB> there.  Org mode uses the
`PROPERTIES' drawer for storing properties (*note Properties and
Columns::), and you can also arrange for state change notes (*note
Tracking TODO state changes::) and clock times (*note Clocking work
time::) to be stored in a drawer `LOGBOOK'.  If you want to store a
quick note in the LOGBOOK drawer, in a similar way to state changes, use

`C-c C-z'
     Add a time-stamped note to the LOGBOOK drawer.

   ---------- Footnotes ----------

   (1) You can define drawers on a per-file basis with a line like
`#+DRAWERS: HIDDEN PROPERTIES STATE'


File: org,  Node: Blocks,  Next: Footnotes,  Prev: Drawers,  Up: Document Structure

2.9 Blocks
==========

Org mode uses begin...end blocks for various purposes from including
source code examples (*note Literal examples::) to capturing time
logging information (*note Clocking work time::).  These blocks can be
folded and unfolded by pressing TAB in the begin line.  You can also
get all blocks folded at startup by configuring the variable
`org-hide-block-startup' or on a per-file basis by using

     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks


File: org,  Node: Footnotes,  Next: Orgstruct mode,  Prev: Blocks,  Up: Document Structure

2.10 Footnotes
==============

Org mode supports the creation of footnotes.  In contrast to the
`footnote.el' package, Org mode's footnotes are designed for work on a
larger document, not only for one-off documents like emails.  The basic
syntax is similar to the one used by `footnote.el', i.e. a footnote is
defined in a paragraph that is started by a footnote marker in square
brackets in column 0, no indentation allowed.  If you need a paragraph
break inside a footnote, use the LaTeX idiom `\par'.  The footnote
reference is simply the marker in square brackets, inside text.  For
example:

     The Org homepage[fn:1] now looks a lot better than it used to.
     ...
     [fn:1] The link is: http://orgmode.org

   Org mode extends the number-based syntax to _named_ footnotes and
optional inline definition.  Using plain numbers as markers (as
`footnote.el' does) is supported for backward compatibility, but not
encouraged because of possible conflicts with LaTeX snippets (*note
Embedded LaTeX::).  Here are the valid references:

`[1]'
     A plain numeric footnote marker.  Compatible with `footnote.el',
     but not recommended because something like `[1]' could easily be
     part of a code snippet.

`[fn:name]'
     A named footnote reference, where `name' is a unique label word,
     or, for simplicity of automatic creation, a number.

`[fn:: This is the inline definition of this footnote]'
     A LaTeX-like anonymous footnote where the definition is given
     directly at the reference point.

`[fn:name: a definition]'
     An inline definition of a footnote, which also specifies a name
     for the note.  Since Org allows multiple references to the same
     note, you can then use `[fn:name]' to create additional references.

   Footnote labels can be created automatically, or you can create
names yourself.  This is handled by the variable
`org-footnote-auto-label' and its corresponding `#+STARTUP' keywords.
See the docstring of that variable for details.

The following command handles footnotes:

`C-c C-x f'
     The footnote action command.

     When the cursor is on a footnote reference, jump to the
     definition.  When it is at a definition, jump to the (first)
     reference.

     Otherwise, create a new footnote.  Depending on the variable
     `org-footnote-define-inline'(1), the definition will be placed
     right into the text as part of the reference, or separately into
     the location determined by the variable `org-footnote-section'.

     When this command is called with a prefix argument, a menu of
     additional options is offered:
          s   Sort the footnote definitions by reference sequence.  During editing,
              Org makes no effort to sort footnote definitions into a particular
              sequence.  If you want them sorted, use this command, which will
              also move entries according to `org-footnote-section'.  Automatic
              sorting after each insertion/deletion can be configured using the
              variable `org-footnote-auto-adjust'.
          r   Renumber the simple `fn:N' footnotes.  Automatic renumbering
              after each insertion/deletion can be configured using the variable
              `org-footnote-auto-adjust'.
          S   Short for first `r', then `s' action.
          n   Normalize the footnotes by collecting all definitions (including
              inline definitions) into a special section, and then numbering them
              in sequence.  The references will then also be numbers.  This is
              meant to be the final step before finishing a document (e.g. sending
              off an email).  The exporters do this automatically, and so could
              something like `message-send-hook'.
          d   Delete the footnote at point, and all definitions of and references
              to it.
     Depending on the variable `org-footnote-auto-adjust'(2),
     renumbering and sorting footnotes can be automatic after each
     insertion or deletion.

`C-c C-c'
     If the cursor is on a footnote reference, jump to the definition.
     If it is a the definition, jump back to the reference.  When
     called at a footnote location with a prefix argument, offer the
     same menu as `C-c C-x f'.  

`C-c C-o  or mouse-1/2'
     Footnote labels are also links to the corresponding
     definition/reference, and you can use the usual commands to follow
     these links.

   ---------- Footnotes ----------

   (1) The corresponding in-buffer setting is: `#+STARTUP: fninline' or
`#+STARTUP: nofninline'

   (2) the corresponding in-buffer options are `fnadjust' and
`nofnadjust'.


File: org,  Node: Orgstruct mode,  Prev: Footnotes,  Up: Document Structure

2.11 The Orgstruct minor mode
=============================

If you like the intuitive way the Org mode structure editing and list
formatting works, you might want to use these commands in other modes
like Text mode or Mail mode as well.  The minor mode `orgstruct-mode'
makes this possible.   Toggle the mode with `M-x orgstruct-mode', or
turn it on by default, for example in Message mode, with one of:

     (add-hook 'message-mode-hook 'turn-on-orgstruct)
     (add-hook 'message-mode-hook 'turn-on-orgstruct++)

   When this mode is active and the cursor is on a line that looks to
Org like a headline or the first line of a list item, most structure
editing commands will work, even if the same keys normally have
different functionality in the major mode you are using.  If the cursor
is not in one of those special lines, Orgstruct mode lurks silently in
the shadows.  When you use `orgstruct++-mode', Org will also export
indentation and autofill settings into that mode, and detect item
context after the first line of an item.


File: org,  Node: Tables,  Next: Hyperlinks,  Prev: Document Structure,  Up: Top

3 Tables
********

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported using the Emacs `calc' package (*note Calc:
(calc)Top.).

* Menu:

* Built-in table editor::       Simple tables
* Column width and alignment::  Overrule the automatic settings
* Column groups::               Grouping to trigger vertical lines
* Orgtbl mode::                 The table editor as minor mode
* The spreadsheet::             The table editor has spreadsheet capabilities
* Org-Plot::                    Plotting from org tables


File: org,  Node: Built-in table editor,  Next: Column width and alignment,  Prev: Tables,  Up: Tables

3.1 The built-in table editor
=============================

Org makes it easy to format tables in plain ASCII.  Any line with `|' as
the first non-whitespace character is considered part of a table.  `|'
is also the column separator(1).  A table might look like this:

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   A table is re-aligned automatically each time you press <TAB> or
<RET> or `C-c C-c' inside the table.  <TAB> also moves to the next
field (<RET> to the next row) and creates new table rows at the end of
the table or before horizontal lines.  The indentation of the table is
set by the first line.  Any line starting with `|-' is considered as a
horizontal separator line and will be expanded on the next re-align to
span the whole table width.  So, to create the above table, you would
only type

     |Name|Phone|Age|
     |-

and then press <TAB> to align the table and start filling in fields.
Even faster would be to type `|Name|Phone|Age' followed by `C-c <RET>'.

   When typing text into a field, Org treats <DEL>, <Backspace>, and
all character keys in a special way, so that inserting and deleting
avoids shifting other fields.  Also, when typing _immediately after the
cursor was moved into a new field with `<TAB>', `S-<TAB>' or `<RET>'_,
the field is automatically made blank.  If this behavior is too
unpredictable for you, configure the variables
`org-enable-table-editor' and `org-table-auto-blank-field'.

Creation and conversion
.......................

`C-c |     (`org-table-create-or-convert-from-region')'
     Convert the active region to table.  If every line contains at
     least one TAB character, the function assumes that the material is
     tab separated.  If every line contains a comma, comma-separated
     values (CSV) are assumed.  If not, lines are split at whitespace
     into fields.  You can use a prefix argument to force a specific
     separator: `C-u' forces CSV, `C-u C-u' forces TAB, and a numeric
     argument N indicates that at least N consecutive spaces, or
     alternatively a TAB will be the separator.
     If there is no active region, this command creates an empty Org
     table.  But it is easier just to start typing, like
     `|Name|Phone|Age <RET> |- <TAB>'.

Re-aligning and field motion
............................

`C-c C-c     (`org-table-align')'
     Re-align the table without moving the cursor.  

`<TAB>     (`org-table-next-field')'
     Re-align the table, move to the next field.  Creates a new row if
     necessary.  

`S-<TAB>     (`org-table-previous-field')'
     Re-align, move to previous field.  

`<RET>     (`org-table-next-row')'
     Re-align the table and move down to next row.  Creates a new row if
     necessary.  At the beginning or end of a line, <RET> still does
     NEWLINE, so it can be used to split a table.  

`M-a     (`org-table-beginning-of-field')'
     Move to beginning of the current table field, or on to the
     previous field.  

`M-e     (`org-table-end-of-field')'
     Move to end of the current table field, or on to the next field.

Column and row editing
......................

`M-<left>     (`org-table-move-column-left')'
`M-<right>     (`org-table-move-column-right')'
     Move the current column left/right.  

`M-S-<left>     (`org-table-delete-column')'
     Kill the current column.  

`M-S-<right>     (`org-table-insert-column')'
     Insert a new column to the left of the cursor position.  

`M-<up>     (`org-table-move-row-up')'
`M-<down>     (`org-table-move-row-down')'
     Move the current row up/down.  

`M-S-<up>     (`org-table-kill-row')'
     Kill the current row or horizontal line.  

`M-S-<down>     (`org-table-insert-row')'
     Insert a new row above the current row.  With a prefix argument,
     the line is created below the current one.  

`C-c -     (`org-table-insert-hline')'
     Insert a horizontal line below current row.  With a prefix
     argument, the line is created above the current line.  

`C-c <RET>     (`org-table-hline-and-move')'
     Insert a horizontal line below current row, and move the cursor
     into the row below that line.  

`C-c ^     (`org-table-sort-lines')'
     Sort the table lines in the region.  The position of point
     indicates the column to be used for sorting, and the range of
     lines is the range between the nearest horizontal separator lines,
     or the entire table.  If point is before the first column, you
     will be prompted for the sorting column.  If there is an active
     region, the mark specifies the first line and the sorting column,
     while point should be in the last line to be included into the
     sorting.  The command prompts for the sorting type
     (alphabetically, numerically, or by time).  When called with a
     prefix argument, alphabetic sorting will be case-sensitive.

Regions
.......

`C-c C-x M-w     (`org-table-copy-region')'
     Copy a rectangular region from a table to a special clipboard.
     Point and mark determine edge fields of the rectangle.  If there
     is no active region, copy just the current field.  The process
     ignores horizontal separator lines.  

`C-c C-x C-w     (`org-table-cut-region')'
     Copy a rectangular region from a table to a special clipboard, and
     blank all fields in the rectangle.  So this is the "cut" operation.  

`C-c C-x C-y     (`org-table-paste-rectangle')'
     Paste a rectangular region into a table.  The upper left corner
     ends up in the current field.  All involved fields will be
     overwritten.  If the rectangle does not fit into the present table,
     the table is enlarged as needed.  The process ignores horizontal
     separator lines.  

`M-<RET>     (`org-table-wrap-region')'
     Split the current field at the cursor position and move the rest
     to the line below.  If there is an active region, and both point
     and mark are in the same column, the text in the column is wrapped
     to minimum width for the given number of lines.  A numeric prefix
     argument may be used to change the number of desired lines.  If
     there is no region, but you specify a prefix argument, the current
     field is made blank, and the content is appended to the field
     above.

Calculations
............

`C-c +     (`org-table-sum')'
     Sum the numbers in the current column, or in the rectangle defined
     by the active region.  The result is shown in the echo area and can
     be inserted with `C-y'.  

`S-<RET>     (`org-table-copy-down')'
     When current field is empty, copy from first non-empty field
     above.  When not empty, copy current field down to next row and
     move cursor along with it.  Depending on the variable
     `org-table-copy-increment', integer field values will be
     incremented during copy.  Integers that are too large will not be
     incremented.  Also, a `0' prefix argument temporarily disables the
     increment.  This key is also used by shift-selection and related
     modes (*note Conflicts::).

Miscellaneous
.............

`C-c `     (`org-table-edit-field')'
     Edit the current field in a separate window.  This is useful for
     fields that are not fully visible (*note Column width and
     alignment::).  When called with a `C-u' prefix, just make the full
     field visible, so that it can be edited in place.  When called
     with two `C-u' prefixes, make the editor window follow the cursor
     through the table and always show the current field.  The follow
     mode exits automatically when the cursor leaves the table, or when
     you repeat this command with `C-u C-u C-c `'.

`M-x org-table-import'
     Import a file as a table.  The table should be TAB or whitespace
     separated.  Use, for example, to import a spreadsheet table or data
     from a database, because these programs generally can write
     TAB-separated text files.  This command works by inserting the
     file into the buffer and then converting the region to a table.
     Any prefix argument is passed on to the converter, which uses it
     to determine the separator.  

`C-c |     (`org-table-create-or-convert-from-region')'
     Tables can also be imported by pasting tabular text into the Org
     buffer, selecting the pasted text with `C-x C-x' and then using the
     `C-c |' command (see above under Creation and conversion).

`M-x org-table-export'
     Export the table, by default as a TAB-separated file.  Use for data
     exchange with, for example, spreadsheet or database programs.  The
     format used to export the file can be configured in the variable
     `org-table-export-default-format'.  You may also use properties
     `TABLE_EXPORT_FILE' and `TABLE_EXPORT_FORMAT' to specify the file
     name and the format for table export in a subtree.  Org supports
     quite general formats for exported tables.  The exporter format is
     the same as the format used by Orgtbl radio tables, see *note
     Translator functions::, for a detailed description.

   If you don't like the automatic table editor because it gets in your
way on lines which you would like to start with `|', you can turn it
off with

     (setq org-enable-table-editor nil)

Then the only table command that still works is `C-c C-c' to do a
manual re-align.

   ---------- Footnotes ----------

   (1) To insert a vertical bar into a table field, use `\vert' or,
inside a word `abc\vert{}def'.


File: org,  Node: Column width and alignment,  Next: Column groups,  Prev: Built-in table editor,  Up: Tables

3.2 Column width and alignment
==============================

The width of columns is automatically determined by the table editor.
And also the alignment of a column is determined automatically from the
fraction of number-like versus non-number fields in the column.

   Sometimes a single field or a few fields need to carry more text,
leading to inconveniently wide columns.  Or maybe you want to make a
table with several columns having a fixed width, regardless of content.
To set(1) the width of a column, one field anywhere in the column may
contain just the string `<N>' where `N' is an integer specifying the
width of the column in characters.  The next re-align will then set the
width of this column to this value.

     |---+------------------------------|               |---+--------|
     |   |                              |               |   | <6>    |
     | 1 | one                          |               | 1 | one    |
     | 2 | two                          |     ----\     | 2 | two    |
     | 3 | This is a long chunk of text |     ----/     | 3 | This=> |
     | 4 | four                         |               | 4 | four   |
     |---+------------------------------|               |---+--------|

Fields that are wider become clipped and end in the string `=>'.  Note
that the full text is still in the buffer but is hidden.  To see the
full text, hold the mouse over the field--a tool-tip window will show
the full content.  To edit such a field, use the command `C-c `' (that
is `C-c' followed by the backquote).  This will open a new window with
the full field.  Edit it and finish with `C-c C-c'.

   When visiting a file containing a table with narrowed columns, the
necessary character hiding has not yet happened, and the table needs to
be aligned before it looks nice.  Setting the option
`org-startup-align-all-tables' will realign all tables in a file upon
visiting, but also slow down startup.  You can also set this option on
a per-file basis with:

     #+STARTUP: align
     #+STARTUP: noalign

   If you would like to overrule the automatic alignment of number-rich
columns to the right and of string-rich column to the left, you can use
`<r>', `c'(2) or `<l>' in a similar fashion.  You may also combine
alignment and field width like this: `<l10>'.

   Lines which only contain these formatting cookies will be removed
automatically when exporting the document.

   ---------- Footnotes ----------

   (1) This feature does not work on XEmacs.

   (2) Centering does not work inside Emacs, but it does have an effect
when exporting to HTML.


File: org,  Node: Column groups,  Next: Orgtbl mode,  Prev: Column width and alignment,  Up: Tables

3.3 Column groups
=================

When Org exports tables, it does so by default without vertical lines
because that is visually more satisfying in general.  Occasionally
however, vertical lines can be useful to structure a table into groups
of columns, much like horizontal lines can do for groups of rows.  In
order to specify column groups, you can use a special row where the
first field contains only `/'.  The further fields can either contain
`<' to indicate that this column should start a group, `>' to indicate
the end of a column, or `<>' (no space between `<' and `>') to make a
column a group of its own.  Boundaries between column groups will upon
export be marked with vertical lines.  Here is an example:

     | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |---+-----+-----+-----+---------+------------|
     | / |   < |     |   > |       < |          > |
     | 1 |   1 |   1 |   1 |       1 |          1 |
     | 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
     | 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
     |---+-----+-----+-----+---------+------------|
     #+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

   It is also sufficient to just insert the column group starters after
every vertical line you would like to have:

     |  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |----+-----+-----+-----+---------+------------|
     | /  | <   |     |     | <       |            |


File: org,  Node: Orgtbl mode,  Next: The spreadsheet,  Prev: Column groups,  Up: Tables

3.4 The Orgtbl minor mode
=========================

If you like the intuitive way the Org table editor works, you might
also want to use it in other modes like Text mode or Mail mode.  The
minor mode Orgtbl mode makes this possible.  You can always toggle the
mode with `M-x orgtbl-mode'.  To turn it on by default, for example in
Message mode, use

     (add-hook 'message-mode-hook 'turn-on-orgtbl)

   Furthermore, with some special setup, it is possible to maintain
tables in arbitrary syntax with Orgtbl mode.  For example, it is
possible to construct LaTeX tables with the underlying ease and power of
Orgtbl mode, including spreadsheet capabilities.  For details, see
*note Tables in arbitrary syntax::.


File: org,  Node: The spreadsheet,  Next: Org-Plot,  Prev: Orgtbl mode,  Up: Tables

3.5 The spreadsheet
===================

The table editor makes use of the Emacs `calc' package to implement
spreadsheet-like capabilities.  It can also evaluate Emacs Lisp forms to
derive fields from other fields.  While fully featured, Org's
implementation is not identical to other spreadsheets.  For example,
Org knows the concept of a _column formula_ that will be applied to all
non-header fields in a column without having to copy the formula to
each relevant field.  There is also a formula debugger, and a formula
editor with features for highlighting fields in the table corresponding
to the references at the point in the formula, moving these references
by arrow keys

* Menu:

* References::                  How to refer to another field or range
* Formula syntax for Calc::     Using Calc to compute stuff
* Formula syntax for Lisp::     Writing formulas in Emacs Lisp
* Durations and time values::   How to compute durations and time values
* Field and range formulas::    Formula for specific (ranges of) fields
* Column formulas::             Formulas valid for an entire column
* Editing and debugging formulas::  Fixing formulas
* Updating the table::          Recomputing all dependent fields
* Advanced features::           Field and column names, parameters and automatic recalc


File: org,  Node: References,  Next: Formula syntax for Calc,  Prev: The spreadsheet,  Up: The spreadsheet

3.5.1 References
----------------

To compute fields in the table from other fields, formulas must
reference other fields or ranges.  In Org, fields can be referenced by
name, by absolute coordinates, and by relative coordinates.  To find
out what the coordinates of a field are, press `C-c ?' in that field,
or press `C-c }' to toggle the display of a grid.

Field references
................

Formulas can reference the value of another field in two ways.  Like in
any other spreadsheet, you may reference fields with a letter/number
combination like `B3', meaning the 2nd field in the 3rd row.  However,
Org prefers(1)  to use another, more general representation that looks
like this:
     @ROW$COLUMN

   Column specifications can be absolute like `$1', `$2',...`$N', or
relative to the current column (i.e. the column of the field which is
being computed) like `$+1' or `$-2'.  `$<' and `$>' are immutable
references to the first and last column, respectively, and you can use
`$>>>' to indicate the third column from the right.

   The row specification only counts data lines and ignores horizontal
separator lines (hlines).  Like with columns, you can use absolute row
numbers `@1', `@2',...`@N', and row numbers relative to the current row
like `@+3' or `@-1'.  `@<' and `@>' are immutable references the first
and last(2) row in the table, respectively.  You may also specify the
row relative to one of the hlines: `@I' refers to the first hline,
`@II' to the second, etc.  `@-I' refers to the first such line above
the current line, `@+I' to the first such line below the current line.
You can also write `@III+2' which is the second data line after the
third hline in the table.

   `@0' and `$0' refer to the current row and column, respectively,
i.e. to the row/column for the field being computed.  Also, if you omit
either the column or the row part of the reference, the current
row/column is implied.

   Org's references with _unsigned_ numbers are fixed references in the
sense that if you use the same reference in the formula for two
different fields, the same field will be referenced each time.  Org's
references with _signed_ numbers are floating references because the
same reference operator can reference different fields depending on the
field being calculated by the formula.

   Here are a few examples:

     @2$3      2nd row, 3rd column (same as `C2')
     $5        column 5 in the current row (same as `E&')
     @2        current column, row 2
     @-1$-3    the field one row up, three columns to the left
     @-I$2     field just under hline above current row, column 2
     @>$5      field in the last row, in column 5

Range references
................

You may reference a rectangular range of fields by specifying two field
references connected by two dots `..'.  If both fields are in the
current row, you may simply use `$2..$7', but if at least one field is
in a different row, you need to use the general `@row$column' format at
least for the first field (i.e the reference must start with `@' in
order to be interpreted correctly).  Examples:

     $1..$3        first three fields in the current row
     $P..$Q        range, using column names (see under Advanced)
     $<<<..$>>     start in third column, continue to the one but last
     @2$1..@4$3    6 fields between these two fields (same as `A2..C4')
     @-1$-2..@-1   3 numbers from the column to the left, 2 up to current row
     @I..II        between first and second hline, short for `@I..@II'

Range references return a vector of values that can be fed into Calc
vector functions.  Empty fields in ranges are normally suppressed, so
that the vector contains only the non-empty fields (but see the `E'
mode switch below).  If there are no non-empty fields, `[0]' is
returned to avoid syntax errors in formulas.

Field coordinates in formulas
.............................

For Calc formulas and Lisp formulas `@#' and `$#' can be used to get
the row or column number of the field where the formula result goes.
The traditional Lisp formula equivalents are `org-table-current-dline'
and `org-table-current-column'.  Examples:

     if(@# % 2, $#, string(""))   column number on odd lines only
     $3 = remote(FOO, @@#$2)      copy column 2 from table FOO into
                                  column 3 of the current table

For the second example, table FOO must have at least as many rows as
the current table.  Note that this is inefficient(3) for large number
of rows.

Named references
................

`$name' is interpreted as the name of a column, parameter or constant.
Constants are defined globally through the variable
`org-table-formula-constants', and locally (for the file) through a
line like

     #+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6

Also properties (*note Properties and Columns::) can be used as
constants in table formulas: for a property `:Xyz:' use the name
`$PROP_Xyz', and the property will be searched in the current outline
entry and in the hierarchy above it.  If you have the `constants.el'
package, it will also be used to resolve constants, including natural
constants like `$h' for Planck's constant, and units like `$km' for
kilometers(4).  Column names and parameters can be specified in special
table lines.  These are described below, see *note Advanced features::.
All names must start with a letter, and further consist of letters and
numbers.

Remote references
.................

You may also reference constants, fields and ranges from a different
table, either in the current file or even in a different file.  The
syntax is

     remote(NAME-OR-ID,REF)

where NAME can be the name of a table in the current file as set by a
`#+TBLNAME: NAME' line before the table.  It can also be the ID of an
entry, even in a different file, and the reference then refers to the
first table in that entry.  REF is an absolute field or range reference
as described above for example `@3$3' or `$somename', valid in the
referenced table.

   ---------- Footnotes ----------

   (1) Org will understand references typed by the user as `B4', but it
will not use this syntax when offering a formula for editing.  You can
customize this behavior using the variable
`org-table-use-standard-references'.

   (2) For backward compatibility you can also use special names like
`$LR5' and `$LR12' to refer in a stable way to the 5th and 12th field
in the last row of the table.  However, this syntax is deprecated, it
should not be used for new documents.  Use `@>$' instead.

   (3) The computation time scales as O(N^2) because table FOO is
parsed for each field to be copied.

   (4) `constants.el' can supply the values of constants in two
different unit systems, `SI' and `cgs'.  Which one is used depends on
the value of the variable `constants-unit-system'.  You can use the
`#+STARTUP' options `constSI' and `constcgs' to set this value for the
current buffer.


File: org,  Node: Formula syntax for Calc,  Next: Formula syntax for Lisp,  Prev: References,  Up: The spreadsheet

3.5.2 Formula syntax for Calc
-----------------------------

A formula can be any algebraic expression understood by the Emacs
`Calc' package.  Note that `calc' has the non-standard convention that
`/' has lower precedence than `*', so that `a/b*c' is interpreted as
`a/(b*c)'.  Before evaluation by `calc-eval' (*note calc-eval:
(calc)Calling Calc from Your Programs.), variable substitution takes
place according to the rules described above.  The range vectors can be
directly fed into the Calc vector functions like `vmean' and `vsum'.

   A formula can contain an optional mode string after a semicolon.
This string consists of flags to influence Calc and other modes during
execution.  By default, Org uses the standard Calc modes (precision 12,
angular units degrees, fraction and symbolic modes off).  The display
format, however, has been changed to `(float 8)' to keep tables
compact.  The default settings can be configured using the variable
`org-calc-default-modes'.

     p20           set the internal Calc calculation precision to 20 digits
     n3 s3 e2 f4   Normal, scientific, engineering, or fixed
                   format of the result of Calc passed back to Org.
                   Calc formatting is unlimited in precision as
                   long as the Calc calculation precision is greater.
     D R           angle modes: degrees, radians
     F S           fraction and symbolic modes
     N             interpret all fields as numbers, use 0 for non-numbers
     E             keep empty fields in ranges
     L             literal

Unless you use large integer numbers or high-precision-calculation and
-display for floating point numbers you may alternatively provide a
`printf' format specifier to reformat the Calc result after it has been
passed back to Org instead of letting Calc already do the formatting(1).
A few examples:

     $1+$2                Sum of first and second field
     $1+$2;%.2f           Same, format result to two decimals
     exp($2)+exp($1)      Math functions can be used
     $0;%.1f              Reformat current cell to 1 decimal
     ($3-32)*5/9          Degrees F -> C conversion
     $c/$1/$cm            Hz -> cm conversion, using `constants.el'
     tan($1);Dp3s1        Compute in degrees, precision 3, display SCI 1
     sin($1);Dp3%.1e      Same, but use printf specifier for display
     vmean($2..$7)        Compute column range mean, using vector function
     vmean($2..$7);EN     Same, but treat empty fields as 0
     taylor($3,x=7,2)     Taylor series of $3, at x=7, second degree

   Calc also contains a complete set of logical operations.  For example

     if($1<20,teen,string(""))  "teen" if age $1 less than 20, else empty

   Note that you can also use two org-specific flags `T' and `t' for
durations computations *note Durations and time values::.

   ---------- Footnotes ----------

   (1) The `printf' reformatting is limited in precision because the
value passed to it is converted into an `integer' or `double'.  The
`integer' is limited in size by truncating the signed value to 32 bits.
The `double' is limited in precision to 64 bits overall which leaves
approximately 16 significant decimal digits.


File: org,  Node: Formula syntax for Lisp,  Next: Durations and time values,  Prev: Formula syntax for Calc,  Up: The spreadsheet

3.5.3 Emacs Lisp forms as formulas
----------------------------------

It is also possible to write a formula in Emacs Lisp; this can be
useful for string manipulation and control structures, if Calc's
functionality is not enough.  If a formula starts with a single-quote
followed by an opening parenthesis, then it is evaluated as a Lisp
form.  The evaluation should return either a string or a number.  Just
as with `calc' formulas, you can specify modes and a printf format
after a semicolon.  With Emacs Lisp forms, you need to be conscious
about the way field references are interpolated into the form.  By
default, a reference will be interpolated as a Lisp string (in
double-quotes) containing the field.  If you provide the `N' mode
switch, all referenced elements will be numbers (non-number fields will
be zero) and interpolated as Lisp numbers, without quotes.  If you
provide the `L' flag, all fields will be interpolated literally,
without quotes.  I.e., if you want a reference to be interpreted as a
string by the Lisp form, enclose the reference operator itself in
double-quotes, like `"$3"'.  Ranges are inserted as space-separated
fields, so you can embed them in list or vector syntax.  Here are a few
examples--note how the `N' mode is used when we do computations in Lisp:

     Swap the first two characters of the content of column 1
       '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
     Add columns 1 and 2, equivalent to Calc's `$1+$2'
       '(+ $1 $2);N
     Compute the sum of columns 1-4, like Calc's `vsum($1..$4)'
       '(apply '+ '($1..$4));N


File: org,  Node: Durations and time values,  Next: Field and range formulas,  Prev: Formula syntax for Lisp,  Up: The spreadsheet

3.5.4 Durations and time values
-------------------------------

If you want to compute time values use the `T' flag, either in Calc
formulas or Elisp formulas:

       |  Task 1 |   Task 2 |    Total |
       |---------+----------+----------|
       |    2:12 |     1:47 | 03:59:00 |
       | 3:02:20 | -2:07:00 |     0.92 |
       #+TBLFM: @2$3=$1+$2;T::@3$3=$1+$2;t

   Input duration values must be of the form `[HH:MM[:SS]', where
seconds are optional.  With the `T' flag, computed durations will be
displayed as `HH:MM:SS' (see the first formula above).  With the `t'
flag, computed durations will be displayed according to the value of
the variable `org-table-duration-custom-format', which defaults to
`'hours' and will display the result as a fraction of hours (see the
second formula in the example above).

   Negative duration values can be manipulated as well, and integers
will be considered as seconds in addition and subtraction.


File: org,  Node: Field and range formulas,  Next: Column formulas,  Prev: Durations and time values,  Up: The spreadsheet

3.5.5 Field and range formulas
------------------------------

To assign a formula to a particular field, type it directly into the
field, preceded by `:=', for example `:=vsum(@II..III)'.  When you press
<TAB> or <RET> or `C-c C-c' with the cursor still in the field, the
formula will be stored as the formula for this field, evaluated, and the
current field will be replaced with the result.

   Formulas are stored in a special line starting with `#+TBLFM:'
directly below the table.  If you type the equation in the 4th field of
the 3rd data line in the table, the formula will look like
`@3$4=$1+$2'.  When inserting/deleting/swapping column and rows with
the appropriate commands, absolute references (but not relative ones)
in stored formulas are modified in order to still reference the same
field.  To avoid this from happening, in particular in range
references, anchor ranges at the table borders (using `@<', `@>', `$<',
`$>'), or at hlines using the `@I' notation.  Automatic adaptation of
field references does of cause not happen if you edit the table
structure with normal editing commands--then you must fix the equations
yourself.

   Instead of typing an equation into the field, you may also use the
following command

`C-u C-c =     (`org-table-eval-formula')'
     Install a new formula for the current field.  The command prompts
     for a formula with default taken from the `#+TBLFM:' line, applies
     it to the current field, and stores it.

   The left-hand side of a formula can also be a special expression in
order to assign the formula to a number of different fields.  There is
no keyboard shortcut to enter such range formulas.  To add them, use
the formula editor (*note Editing and debugging formulas::) or edit the
`#+TBLFM:' line directly.

`$2='
     Column formula, valid for the entire column.  This is so common
     that Org treats these formulas in a special way, see *note Column
     formulas::.

`@3='
     Row formula, applies to all fields in the specified row.  `@>='
     means the last row.

`@1$2..@4$3='
     Range formula, applies to all fields in the given rectangular
     range.  This can also be used to assign a formula to some but not
     all fields in a row.

`$name='
     Named field, see *note Advanced features::.


File: org,  Node: Column formulas,  Next: Editing and debugging formulas,  Prev: Field and range formulas,  Up: The spreadsheet

3.5.6 Column formulas
---------------------

When you assign a formula to a simple column reference like `$3=', the
same formula will be used in all fields of that column, with the
following very convenient exceptions: (i) If the table contains
horizontal separator hlines, everything before the first such line is
considered part of the table _header_ and will not be modified by
column formulas.  (ii) Fields that already get a value from a
field/range formula will be left alone by column formulas.  These
conditions make column formulas very easy to use.

   To assign a formula to a column, type it directly into any field in
the column, preceded by an equal sign, like `=$1+$2'.  When you press
<TAB> or <RET> or `C-c C-c' with the cursor still in the field, the
formula will be stored as the formula for the current column, evaluated
and the current field replaced with the result.  If the field contains
only `=', the previously stored formula for this column is used.  For
each column, Org will only remember the most recently used formula.  In
the `#+TBLFM:' line, column formulas will look like `$4=$1+$2'.  The
left-hand side of a column formula can not be the name of column, it
must be the numeric column reference or `$>'.

   Instead of typing an equation into the field, you may also use the
following command:

`C-c =     (`org-table-eval-formula')'
     Install a new formula for the current column and replace current
     field with the result of the formula.  The command prompts for a
     formula, with default taken from the `#+TBLFM' line, applies it to
     the current field and stores it.  With a numeric prefix
     argument(e.g. `C-5 C-c =') the command will apply it to that many
     consecutive fields in the current column.


File: org,  Node: Editing and debugging formulas,  Next: Updating the table,  Prev: Column formulas,  Up: The spreadsheet

3.5.7 Editing and debugging formulas
------------------------------------

You can edit individual formulas in the minibuffer or directly in the
field.  Org can also prepare a special buffer with all active formulas
of a table.  When offering a formula for editing, Org converts
references to the standard format (like `B3' or `D&') if possible.  If
you prefer to only work with the internal format (like `@3$2' or `$4'),
configure the variable `org-table-use-standard-references'.

`C-c =  or  C-u C-c =     (`org-table-eval-formula')'
     Edit the formula associated with the current column/field in the
     minibuffer.  See *note Column formulas::, and *note Field and
     range formulas::.  

`C-u C-u C-c =     (`org-table-eval-formula')'
     Re-insert the active formula (either a field formula, or a column
     formula) into the current field, so that you can edit it directly
     in the field.  The advantage over editing in the minibuffer is
     that you can use the command `C-c ?'.  

`C-c ?     (`org-table-field-info')'
     While editing a formula in a table field, highlight the field(s)
     referenced by the reference at the cursor position in the formula.  

`C-c }'
     Toggle the display of row and column numbers for a table, using
     overlays (`org-table-toggle-coordinate-overlays').  These are
     updated each time the table is aligned; you can force it with `C-c
     C-c'.  

`C-c {'
     Toggle the formula debugger on and off
     (`org-table-toggle-formula-debugger').  See below.  

`C-c '     (`org-table-edit-formulas')'
     Edit all formulas for the current table in a special buffer, where
     the formulas will be displayed one per line.  If the current field
     has an active formula, the cursor in the formula editor will mark
     it.  While inside the special buffer, Org will automatically
     highlight any field or range reference at the cursor position.
     You may edit, remove and add formulas, and use the following
     commands:
    `C-c C-c  or  C-x C-s     (`org-table-fedit-finish')'
          Exit the formula editor and store the modified formulas.
          With `C-u' prefix, also apply the new formulas to the entire
          table.  

    `C-c C-q     (`org-table-fedit-abort')'
          Exit the formula editor without installing changes.  

    `C-c C-r     (`org-table-fedit-toggle-ref-type')'
          Toggle all references in the formula editor between standard
          (like `B3') and internal (like `@3$2').  

    `<TAB>     (`org-table-fedit-lisp-indent')'
          Pretty-print or indent Lisp formula at point.  When in a line
          containing a Lisp formula, format the formula according to
          Emacs Lisp rules.  Another <TAB> collapses the formula back
          again.  In the open formula, <TAB> re-indents just like in
          Emacs Lisp mode.  

    `M-<TAB>     (`lisp-complete-symbol')'
          Complete Lisp symbols, just like in Emacs Lisp mode.  

    `S-<up>/<down>/<left>/<right>'
          Shift the reference at point.  For example, if the reference
          is `B3' and you press `S-<right>', it will become `C3'.  This
          also works for relative references and for hline references.  

    `M-S-<up>     (`org-table-fedit-line-up')'
    `M-S-<down>     (`org-table-fedit-line-down')'
          Move the test line for column formulas in the Org buffer up
          and down.  

    `M-<up>     (`org-table-fedit-scroll-down')'
    `M-<down>     (`org-table-fedit-scroll-up')'
          Scroll the window displaying the table.  

    `C-c }'
          Turn the coordinate grid in the table on and off.

   Making a table field blank does not remove the formula associated
with the field, because that is stored in a different line (the
`#+TBLFM' line)--during the next recalculation the field will be filled
again.  To remove a formula from a field, you have to give an empty
reply when prompted for the formula, or to edit the `#+TBLFM' line.

   You may edit the `#+TBLFM' directly and re-apply the changed
equations with `C-c C-c' in that line or with the normal recalculation
commands in the table.

Debugging formulas
..................

When the evaluation of a formula leads to an error, the field content
becomes the string `#ERROR'.  If you would like see what is going on
during variable substitution and calculation in order to find a bug,
turn on formula debugging in the `Tbl' menu and repeat the calculation,
for example by pressing `C-u C-u C-c = <RET>' in a field.  Detailed
information will be displayed.


File: org,  Node: Updating the table,  Next: Advanced features,  Prev: Editing and debugging formulas,  Up: The spreadsheet

3.5.8 Updating the table
------------------------

Recalculation of a table is normally not automatic, but needs to be
triggered by a command.  See *note Advanced features::, for a way to
make recalculation at least semi-automatic.

   In order to recalculate a line of a table or the entire table, use
the following commands:

`C-c *     (`org-table-recalculate')'
     Recalculate the current row by first applying the stored column
     formulas from left to right, and all field/range formulas in the
     current row.  

`C-u C-c *'
`C-u C-c C-c'
     Recompute the entire table, line by line.  Any lines before the
     first hline are left alone, assuming that these are part of the
     table header.  

`C-u C-u C-c *  or  C-u C-u C-c C-c     (`org-table-iterate')'
     Iterate the table by recomputing it until no further changes occur.
     This may be necessary if some computed fields use the value of
     other fields that are computed later in the calculation sequence.

`M-x org-table-recalculate-buffer-tables'
     Recompute all tables in the current buffer.

`M-x org-table-iterate-buffer-tables'
     Iterate all tables in the current buffer, in order to converge
     table-to-table dependencies.


File: org,  Node: Advanced features,  Prev: Updating the table,  Up: The spreadsheet

3.5.9 Advanced features
-----------------------

If you want the recalculation of fields to happen automatically, or if
you want to be able to assign names(1) to fields and columns, you need
to reserve the first column of the table for special marking characters.

`C-#     (`org-table-rotate-recalc-marks')'
     Rotate the calculation mark in first column through the states ` ',
     `#', `*', `!', `$'.  When there is an active region, change all
     marks in the region.

   Here is an example of a table that collects exam results of students
and makes use of these features:

     |---+---------+--------+--------+--------+-------+------|
     |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
     |---+---------+--------+--------+--------+-------+------|
     | ! |         |     P1 |     P2 |     P3 |   Tot |      |
     | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
     | ^ |         |     m1 |     m2 |     m3 |    mt |      |
     |---+---------+--------+--------+--------+-------+------|
     | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
     | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
     |---+---------+--------+--------+--------+-------+------|
     |   | Average |        |        |        |  29.7 |      |
     | ^ |         |        |        |        |    at |      |
     | $ | max=50  |        |        |        |       |      |
     |---+---------+--------+--------+--------+-------+------|
     #+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@-II..@-I);%.1f

Important: please note that for these special tables, recalculating the
table with `C-u C-c *' will only affect rows that are marked `#' or
`*', and fields that have a formula assigned to the field itself.  The
column formulas are not applied in rows with empty first field.

   The marking characters have the following meaning:
`!'
     The fields in this line define names for the columns, so that you
     may refer to a column as `$Tot' instead of `$6'.

`^'
     This row defines names for the fields _above_ the row.  With such
     a definition, any formula in the table may use `$m1' to refer to
     the value `10'.  Also, if you assign a formula to a names field, it
     will be stored as `$name=...'.

`_'
     Similar to `^', but defines names for the fields in the row
     _below_.

`$'
     Fields in this row can define _parameters_ for formulas.  For
     example, if a field in a `$' row contains `max=50', then formulas
     in this table can refer to the value 50 using `$max'.  Parameters
     work exactly like constants, only that they can be defined on a
     per-table basis.

`#'
     Fields in this row are automatically recalculated when pressing
     <TAB> or <RET> or `S-<TAB>' in this row.  Also, this row is
     selected for a global recalculation with `C-u C-c *'.  Unmarked
     lines will be left alone by this command.

`*'
     Selects this line for global recalculation with `C-u C-c *', but
     not for automatic recalculation.  Use this when automatic
     recalculation slows down editing too much.

`'
     Unmarked lines are exempt from recalculation with `C-u C-c *'.
     All lines that should be recalculated should be marked with `#' or
     `*'.

`/'
     Do not export this line.  Useful for lines that contain the
     narrowing `<N>' markers or column group markers.

   Finally, just to whet your appetite for what can be done with the
fantastic `calc.el' package, here is a table that computes the Taylor
series of degree `n' at location `x' for a couple of functions.

     |---+-------------+---+-----+--------------------------------------|
     |   | Func        | n | x   | Result                               |
     |---+-------------+---+-----+--------------------------------------|
     | # | exp(x)      | 1 | x   | 1 + x                                |
     | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
     | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
     | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
     | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
     | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
     |---+-------------+---+-----+--------------------------------------|
     #+TBLFM: $5=taylor($2,$4,$3);n3

   ---------- Footnotes ----------

   (1) Such names must start by an alphabetic character and use only
alphanumeric/underscore characters.


File: org,  Node: Org-Plot,  Prev: The spreadsheet,  Up: Tables

3.6 Org-Plot
============

Org-Plot can produce 2D and 3D graphs of information stored in org
tables using `Gnuplot' `http://www.gnuplot.info/' and `gnuplot-mode'
`http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html'.  To see
this in action, ensure that you have both Gnuplot and Gnuplot mode
installed on your system, then call `org-plot/gnuplot' on the following
table.

     #+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
     | Sede      | Max cites | H-index |
     |-----------+-----------+---------|
     | Chile     |    257.72 |   21.39 |
     | Leeds     |    165.77 |   19.68 |
     | Sao Paolo |     71.00 |   11.50 |
     | Stockholm |    134.19 |   14.33 |
     | Morelia   |    257.56 |   17.67 |

   Notice that Org Plot is smart enough to apply the table's headers as
labels.  Further control over the labels, type, content, and appearance
of plots can be exercised through the `#+PLOT:' lines preceding a
table.  See below for a complete list of Org-plot options.  For more
information and examples see the Org-plot tutorial at
`http://orgmode.org/worg/org-tutorials/org-plot.html'.

Plot Options
............

`set'
     Specify any `gnuplot' option to be set when graphing.

`title'
     Specify the title of the plot.

`ind'
     Specify which column of the table to use as the `x' axis.

`deps'
     Specify the columns to graph as a Lisp style list, surrounded by
     parentheses and separated by spaces for example `dep:(3 4)' to
     graph the third and fourth columns (defaults to graphing all other
     columns aside from the `ind' column).

`type'
     Specify whether the plot will be `2d', `3d', or `grid'.

`with'
     Specify a `with' option to be inserted for every col being plotted
     (e.g. `lines', `points', `boxes', `impulses', etc...).  Defaults
     to `lines'.

`file'
     If you want to plot to a file, specify
     `"PATH/TO/DESIRED/OUTPUT-FILE"'.

`labels'
     List of labels to be used for the `deps' (defaults to the column
     headers if they exist).

`line'
     Specify an entire line to be inserted in the Gnuplot script.

`map'
     When plotting `3d' or `grid' types, set this to `t' to graph a
     flat mapping rather than a `3d' slope.

`timefmt'
     Specify format of Org mode timestamps as they will be parsed by
     Gnuplot.  Defaults to `%Y-%m-%d-%H:%M:%S'.

`script'
     If you want total control, you can specify a script file (place
     the file name between double-quotes) which will be used to plot.
     Before plotting, every instance of `$datafile' in the specified
     script will be replaced with the path to the generated data file.
     Note: even if you set this option, you may still want to specify
     the plot type, as that can impact the content of the data file.


File: org,  Node: Hyperlinks,  Next: TODO Items,  Prev: Tables,  Up: Top

4 Hyperlinks
************

Like HTML, Org provides links inside a file, external links to other
files, Usenet articles, emails, and much more.

* Menu:

* Link format::                 How links in Org are formatted
* Internal links::              Links to other places in the current file
* External links::              URL-like links to the world
* Handling links::              Creating, inserting and following
* Using links outside Org::     Linking from my C source code?
* Link abbreviations::          Shortcuts for writing complex links
* Search options::              Linking to a specific location
* Custom searches::             When the default search is not enough


File: org,  Node: Link format,  Next: Internal links,  Prev: Hyperlinks,  Up: Hyperlinks

4.1 Link format
===============

Org will recognize plain URL-like links and activate them as clickable
links.  The general link format, however, looks like this:

     [[link][description]]       or alternatively           [[link]]

Once a link in the buffer is complete (all brackets present), Org will
change the display so that `description' is displayed instead of
`[[link][description]]' and `link' is displayed instead of `[[link]]'.
Links will be highlighted in the face `org-link', which by default is
an underlined face.  You can directly edit the visible part of a link.
Note that this can be either the `link' part (if there is no
description) or the `description' part.  To edit also the invisible
`link' part, use `C-c C-l' with the cursor on the link.

   If you place the cursor at the beginning or just behind the end of
the displayed text and press <BACKSPACE>, you will remove the
(invisible) bracket at that location.  This makes the link incomplete
and the internals are again displayed as plain text.  Inserting the
missing bracket hides the link internals again.  To show the internal
structure of all links, use the menu entry `Org->Hyperlinks->Literal
links'.


File: org,  Node: Internal links,  Next: External links,  Prev: Link format,  Up: Hyperlinks

4.2 Internal links
==================

If the link does not look like a URL, it is considered to be internal
in the current file.  The most important case is a link like
`[[#my-custom-id]]' which will link to the entry with the `CUSTOM_ID'
property `my-custom-id'.  Such custom IDs are very good for HTML export
(*note HTML export::) where they produce pretty section links.  You are
responsible yourself to make sure these custom IDs are unique in a file.

   Links such as `[[My Target]]' or `[[My Target][Find my target]]'
lead to a text search in the current file.

   The link can be followed with `C-c C-o' when the cursor is on the
link, or with a mouse click (*note Handling links::).  Links to custom
IDs will point to the corresponding headline.  The preferred match for
a text link is a dedicated target: the same string in double angular
brackets.  Targets may be located anywhere; sometimes it is convenient
to put them into a comment line.  For example

     # <<My Target>>

In HTML export (*note HTML export::), such targets will become named
anchors for direct access through `http' links(1).

   If no dedicated target exists, Org will search for a headline that
is exactly the link text but may also include a TODO keyword and
tags(2).  In non-Org files, the search will look for the words in the
link text.  In the above example the search would be for `my target'.

   Following a link pushes a mark onto Org's own mark ring.  You can
return to the previous position with `C-c &'.  Using this command
several times in direct succession goes back to positions recorded
earlier.

* Menu:

* Radio targets::               Make targets trigger links in plain text

   ---------- Footnotes ----------

   (1) Note that text before the first headline is usually not
exported, so the first such target should be after the first headline,
or in the line directly before the first headline.

   (2) To insert a link targeting a headline, in-buffer completion can
be used.  Just type a star followed by a few optional letters into the
buffer and press `M-<TAB>'.  All headlines in the current buffer will
be offered as completions.


File: org,  Node: Radio targets,  Prev: Internal links,  Up: Internal links

4.2.1 Radio targets
-------------------

Org can automatically turn any occurrences of certain target names in
normal text into a link.  So without explicitly creating a link, the
text connects to the target radioing its position.  Radio targets are
enclosed by triple angular brackets.  For example, a target `<<<My
Target>>>' causes each occurrence of `my target' in normal text to
become activated as a link.  The Org file is scanned automatically for
radio targets only when the file is first loaded into Emacs.  To update
the target list during editing, press `C-c C-c' with the cursor on or
at a target.


File: org,  Node: External links,  Next: Handling links,  Prev: Internal links,  Up: Hyperlinks

4.3 External links
==================

Org supports links to files, websites, Usenet and email messages, BBDB
database entries and links to both IRC conversations and their logs.
External links are URL-like locators.  They start with a short
identifying string followed by a colon.  There can be no space after
the colon.  The following list shows examples for each link type.

     http://www.astro.uva.nl/~dominik          on the web
     doi:10.1000/182                           DOI for an electronic resource
     file:/home/dominik/images/jupiter.jpg     file, absolute path
     /home/dominik/images/jupiter.jpg          same as above
     file:papers/last.pdf                      file, relative path
     ./papers/last.pdf                         same as above
     file:/myself@some.where:papers/last.pdf   file, path on remote machine
     /myself@some.where:papers/last.pdf        same as above
     file:sometextfile::NNN                    file, jump to line number
     file:projects.org                         another Org file
     file:projects.org::some words             text search in Org file(1)
     file:projects.org::*task title            heading search in Org file
     file+sys:/path/to/file                    open via OS, like double-click
     file+emacs:/path/to/file                  force opening by Emacs
     docview:papers/last.pdf::NNN              open in doc-view mode at page
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   Link to heading by ID
     news:comp.emacs                           Usenet link
     mailto:adent@galaxy.net                   Mail link
     vm:folder                                 VM folder link
     vm:folder#id                              VM message link
     vm://myself@some.where.org/folder#id      VM on remote machine
     wl:folder                                 WANDERLUST folder link
     wl:folder#id                              WANDERLUST message link
     mhe:folder                                MH-E folder link
     mhe:folder#id                             MH-E message link
     rmail:folder                              RMAIL folder link
     rmail:folder#id                           RMAIL message link
     gnus:group                                Gnus group link
     gnus:group#id                             Gnus article link
     bbdb:R.*Stallman                          BBDB link (with regexp)
     irc:/irc.com/#emacs/bob                   IRC link
     info:org#External links                   Info node link
     shell:ls *.org                            A shell command
     elisp:org-agenda                          Interactive Elisp command
     elisp:(find-file-other-frame "Elisp.org") Elisp form to evaluate

   For customizing Org to add new link types *note Adding hyperlink
types::.

   A link should be enclosed in double brackets and may contain a
descriptive text to be displayed instead of the URL (*note Link
format::), for example:

     [[http://www.gnu.org/software/emacs/][GNU Emacs]]

If the description is a file name or URL that points to an image, HTML
export (*note HTML export::) will inline the image as a clickable
button.  If there is no description at all and the link points to an
image, that image will be inlined into the exported HTML file.

   Org also finds external links in the normal text and activates them
as links.  If spaces must be part of the link (for example in
`bbdb:Richard Stallman'), or if you need to remove ambiguities about
the end of the link, enclose them in square brackets.

   ---------- Footnotes ----------

   (1) The actual behavior of the search will depend on the value of
the variable `org-link-search-must-match-exact-headline'.  If its value
is nil, then a fuzzy text search will be done.  If it is t, then only
the exact headline will be matched.  If the value is `'query-to-create',
then an exact headline will be searched; if it is not found, then the
user will be queried to create it.


File: org,  Node: Handling links,  Next: Using links outside Org,  Prev: External links,  Up: Hyperlinks

4.4 Handling links
==================

Org provides methods to create a link in the correct syntax, to insert
it into an Org file, and to follow the link.

`C-c l     (`org-store-link')'
     Store a link to the current location.  This is a _global_ command
     (you must create the key binding yourself) which can be used in
     any buffer to create a link.  The link will be stored for later
     insertion into an Org buffer (see below).  What kind of link will
     be created depends on the current buffer:

     Org mode buffers
     For Org files, if there is a `<<target>>' at the cursor, the link
     points to the target.  Otherwise it points to the current
     headline, which will also be the description(1).

     If the headline has a `CUSTOM_ID' property, a link to this custom
     ID will be stored.  In addition or alternatively (depending on the
     value of `org-link-to-org-use-id'), a globally unique `ID'
     property will be created and/or used to construct a link.  So
     using this command in Org buffers will potentially create two
     links: a human-readable from the custom ID, and one that is
     globally unique and works even if the entry is moved from file to
     file.  Later, when inserting the link, you need to decide which one
     to use.

     Email/News clients: VM, Rmail, Wanderlust, MH-E, Gnus
     Pretty much all Emacs mail clients are supported.  The link will
     point to the current article, or, in some GNUS buffers, to the
     group.  The description is constructed from the author and the
     subject.

     Web browsers: W3 and W3M
     Here the link will be the current URL, with the page title as
     description.

     Contacts: BBDB
     Links created in a BBDB buffer will point to the current entry.

     Chat: IRC
     For IRC links, if you set the variable `org-irc-link-to-logs' to
     `t', a `file:/' style link to the relevant point in the logs for
     the current conversation is created.  Otherwise an `irc:/' style
     link to the user/channel/server under the point will be stored.

     Other files
     For any other files, the link will point to the file, with a
     search string (*note Search options::) pointing to the contents of
     the current line.  If there is an active region, the selected
     words will form the basis of the search string.  If the
     automatically created link is not working correctly or accurately
     enough, you can write custom functions to select the search string
     and to do the search for particular file types--see *note Custom
     searches::.  The key binding `C-c l' is only a suggestion--see
     *note Installation::.

     Agenda view
     When the cursor is in an agenda view, the created link points to
     the entry referenced by the current line.

`C-c C-l     (`org-insert-link')'
     Insert a link(2).  This prompts for a link to be inserted into the
     buffer.  You can just type a link, using text for an internal
     link, or one of the link type prefixes mentioned in the examples
     above.  The link will be inserted into the buffer(3), along with a
     descriptive text.  If some text was selected when this command is
     called, the selected text becomes the default description.

     Inserting stored links
     All links stored during the current session are part of the
     history for this prompt, so you can access them with <up> and
     <down> (or `M-p/n').

     Completion support
     Completion with <TAB> will help you to insert valid link prefixes
     like `http:' or `ftp:', including the prefixes defined through
     link abbreviations (*note Link abbreviations::).  If you press
     <RET> after inserting only the PREFIX, Org will offer specific
     completion support for some link types(4)  For example, if you
     type `file <RET>', file name completion (alternative access: `C-u
     C-c C-l', see below) will be offered, and after `bbdb <RET>' you
     can complete contact names.  

`C-u C-c C-l'
     When `C-c C-l' is called with a `C-u' prefix argument, a link to a
     file will be inserted and you may use file name completion to
     select the name of the file.  The path to the file is inserted
     relative to the directory of the current Org file, if the linked
     file is in the current directory or in a sub-directory of it, or
     if the path is written relative to the current directory using
     `../'.  Otherwise an absolute path is used, if possible with `~/'
     for your home directory.  You can force an absolute path with two
     `C-u' prefixes.

`C-c C-l  (with cursor on existing link)'
     When the cursor is on an existing link, `C-c C-l' allows you to
     edit the link and description parts of the link.  

`C-c C-o     (`org-open-at-point')'
     Open link at point.  This will launch a web browser for URLs (using
     `browse-url-at-point'), run VM/MH-E/Wanderlust/Rmail/Gnus/BBDB for
     the corresponding links, and execute the command in a shell link.
     When the cursor is on an internal link, this command runs the
     corresponding search.  When the cursor is on a TAG list in a
     headline, it creates the corresponding TAGS view.  If the cursor
     is on a timestamp, it compiles the agenda for that date.
     Furthermore, it will visit text and remote files in `file:' links
     with Emacs and select a suitable application for local non-text
     files.  Classification of files is based on file extension only.
     See option `org-file-apps'.  If you want to override the default
     application and visit the file with Emacs, use a `C-u' prefix.  If
     you want to avoid opening in Emacs, use a `C-u C-u' prefix.
     If the cursor is on a headline, but not on a link, offer all links
     in the headline and entry text.  If you want to setup the frame
     configuration for following links, customize
     `org-link-frame-setup'.

`<RET>'
     When `org-return-follows-link' is set, `<RET>' will also follow
     the link at point.  

`mouse-2'
`mouse-1'
     On links, `mouse-2' will open the link just as `C-c C-o' would.
     Under Emacs 22 and later, `mouse-1' will also follow a link.  

`mouse-3'
     Like `mouse-2', but force file links to be opened with Emacs, and
     internal links to be displayed in another window(5).  

`C-c C-x C-v     (`org-toggle-inline-images')'
     Toggle the inline display of linked images.  Normally this will
     only inline images that have no description part in the link, i.e.
     images that will also be inlined during export.  When called with
     a prefix argument, also display images that do have a link
     description.  You can ask for inline images to be displayed at
     startup by configuring the variable
     `org-startup-with-inline-images'(6).  

`C-c %     (`org-mark-ring-push')'
     Push the current position onto the mark ring, to be able to return
     easily.  Commands following an internal link do this automatically.  

`C-c &     (`org-mark-ring-goto')'
     Jump back to a recorded position.  A position is recorded by the
     commands following internal links, and by `C-c %'.  Using this
     command several times in direct succession moves through a ring of
     previously recorded positions.  

`C-c C-x C-n     (`org-next-link')'
`C-c C-x C-p     (`org-previous-link')'
     Move forward/backward to the next link in the buffer.  At the
     limit of the buffer, the search fails once, and then wraps around.
     The key bindings for this are really too long; you might want to
     bind this also to `C-n' and `C-p'
          (add-hook 'org-load-hook
            (lambda ()
              (define-key org-mode-map "\C-n" 'org-next-link)
              (define-key org-mode-map "\C-p" 'org-previous-link)))

   ---------- Footnotes ----------

   (1) If the headline contains a timestamp, it will be removed from
the link and result in a wrong link - you should avoid putting
timestamp in the headline.

   (2)  Note that you don't have to use this command to insert a link.
Links in Org are plain text, and you can type or paste them straight
into the buffer.  By using this command, the links are automatically
enclosed in double brackets, and you will be asked for the optional
descriptive text.

   (3) After insertion of a stored link, the link will be removed from
the list of stored links.  To keep it in the list later use, use a
triple `C-u' prefix argument to `C-c C-l', or configure the option
`org-keep-stored-link-after-insertion'.

   (4) This works by calling a special function
`org-PREFIX-complete-link'.

   (5) See the variable `org-display-internal-link-with-indirect-buffer'

   (6) with corresponding `#+STARTUP' keywords `inlineimages' and
`inlineimages'


File: org,  Node: Using links outside Org,  Next: Link abbreviations,  Prev: Handling links,  Up: Hyperlinks

4.5 Using links outside Org
===========================

You can insert and follow links that have Org syntax not only in Org,
but in any Emacs buffer.  For this, you should create two global
commands, like this (please select suitable global keys yourself):

     (global-set-key "\C-c L" 'org-insert-link-global)
     (global-set-key "\C-c o" 'org-open-at-point-global)


File: org,  Node: Link abbreviations,  Next: Search options,  Prev: Using links outside Org,  Up: Hyperlinks

4.6 Link abbreviations
======================

Long URLs can be cumbersome to type, and often many similar links are
needed in a document.  For this you can use link abbreviations.  An
abbreviated link looks like this

     [[linkword:tag][description]]

where the tag is optional.  The linkword must be a word, starting with
a letter, followed by letters, numbers, `-', and `_'.  Abbreviations
are resolved according to the information in the variable
`org-link-abbrev-alist' that relates the linkwords to replacement text.
Here is an example:

     (setq org-link-abbrev-alist
       '(("bugzilla" . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("google"   . "http://www.google.com/search?q=")
         ("gmap"     . "http://maps.google.com/maps?q=%s")
         ("omap"     . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"      . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))

   If the replacement text contains the string `%s', it will be
replaced with the tag.  Otherwise the tag will be appended to the string
in order to create the link.  You may also specify a function that will
be called with the tag as the only argument to create the link.

   With the above setting, you could link to a specific bug with
`[[bugzilla:129]]', search the web for `OrgMode' with
`[[google:OrgMode]]', show the map location of the Free Software
Foundation `[[gmap:51 Franklin Street, Boston]]' or of Carsten office
`[[omap:Science Park 904, Amsterdam, The Netherlands]]' and find out
what the Org author is doing besides Emacs hacking with
`[[ads:Dominik,C]]'.

   If you need special abbreviations just for a single Org buffer, you
can define them in the file with

     #+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
     #+LINK: google    http://www.google.com/search?q=%s

In-buffer completion (*note Completion::) can be used after `[' to
complete link abbreviations.  You may also define a function
`org-PREFIX-complete-link' that implements special (e.g. completion)
support for inserting such a link with `C-c C-l'.  Such a function
should not accept any arguments, and return the full link with prefix.


File: org,  Node: Search options,  Next: Custom searches,  Prev: Link abbreviations,  Up: Hyperlinks

4.7 Search options in file links
================================

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double(1) colon.  For example,
when the command `C-c l' creates a link (*note Handling links::) to a
file, it encodes the words in the current line as a search string that
can be used to find this line back later when following the link with
`C-c C-o'.

   Here is the syntax of the different ways to attach a search to a file
link, together with an explanation:

     [[file:~/code/main.c::255]]
     [[file:~/xx.org::My Target]]
     [[file:~/xx.org::*My Target]]
     [[file:~/xx.org::#my-custom-id]]
     [[file:~/xx.org::/regexp/]]

`255'
     Jump to line 255.

`My Target'
     Search for a link target `<<My Target>>', or do a text search for
     `my target', similar to the search in internal links, see *note
     Internal links::.  In HTML export (*note HTML export::), such a
     file link will become an HTML reference to the corresponding named
     anchor in the linked file.

`*My Target'
     In an Org file, restrict search to headlines.

`#my-custom-id'
     Link to a heading with a `CUSTOM_ID' property

`/regexp/'
     Do a regular expression search for `regexp'.  This uses the Emacs
     command `occur' to list all matches in a separate window.  If the
     target file is in Org mode, `org-occur' is used to create a sparse
     tree with the matches.

   As a degenerate case, a file link with an empty file name can be used
to search the current file.  For example, `[[file:::find me]]' does a
search for `find me' in the current file, just as `[[find me]]' would.

   ---------- Footnotes ----------

   (1) For backward compatibility, line numbers can also follow a
single colon.


File: org,  Node: Custom searches,  Prev: Search options,  Up: Hyperlinks

4.8 Custom Searches
===================

The default mechanism for creating search strings and for doing the
actual search related to a file link may not work correctly in all
cases.  For example, BibTeX database files have many entries like
`year="1993"' which would not result in good search strings, because
the only unique identification for a BibTeX entry is the citation key.

   If you come across such a problem, you can write custom functions to
set the right search string for a particular file type, and to do the
search for the string in the file.  Using `add-hook', these functions
need to be added to the hook variables
`org-create-file-search-functions' and
`org-execute-file-search-functions'.  See the docstring for these
variables for more information.  Org actually uses this mechanism for
BibTeX database files, and you can use the corresponding code as an
implementation example.  See the file `org-bibtex.el'.


File: org,  Node: TODO Items,  Next: Tags,  Prev: Hyperlinks,  Up: Top

5 TODO items
************

Org mode does not maintain TODO lists as separate documents(1).
Instead, TODO items are an integral part of the notes file, because
TODO items usually come up while taking notes!  With Org mode, simply
mark any entry in a tree as being a TODO item.  In this way,
information is not duplicated, and the entire context from which the
TODO item emerged is always present.

   Of course, this technique for managing TODO items scatters them
throughout your notes file.  Org mode compensates for this by providing
methods to give you an overview of all the things that you have to do.

* Menu:

* TODO basics::                 Marking and displaying TODO entries
* TODO extensions::             Workflow and assignments
* Progress logging::            Dates and notes for progress
* Priorities::                  Some things are more important than others
* Breaking down tasks::         Splitting a task into manageable pieces
* Checkboxes::                  Tick-off lists

   ---------- Footnotes ----------

   (1) Of course, you can make a document that contains only long lists
of TODO items, but this is not required.


File: org,  Node: TODO basics,  Next: TODO extensions,  Prev: TODO Items,  Up: TODO Items

5.1 Basic TODO functionality
============================

Any headline becomes a TODO item when it starts with the word `TODO',
for example:

     *** TODO Write letter to Sam Fortune

The most important commands to work with TODO entries are:

`C-c C-t     (`org-todo')'
     Rotate the TODO state of the current item among

          ,-> (unmarked) -> TODO -> DONE --.
          '--------------------------------'

     The same rotation can also be done "remotely" from the timeline and
     agenda buffers with the `t' command key (*note Agenda commands::).

`C-u C-c C-t'
     Select a specific keyword using completion or (if it has been set
     up) the fast selection interface.  For the latter, you need to
     assign keys to TODO states, see *note Per-file keywords::, and
     *note Setting tags::, for more information.

`S-<right>  /  S-<left>'
     Select the following/preceding TODO state, similar to cycling.
     Useful mostly if more than two TODO states are possible (*note
     TODO extensions::).  See also *note Conflicts::, for a discussion
     of the interaction with `shift-selection-mode'.  See also the
     variable `org-treat-S-cursor-todo-selection-as-state-change'.  

`C-c / t     (`org-show-todo-key')'
     View TODO items in a _sparse tree_ (*note Sparse trees::).  Folds
     the entire buffer, but shows all TODO items (with not-DONE state)
     and the headings hierarchy above them.  With a prefix argument (or
     by using `C-c / T'), search for a specific TODO.  You will be
     prompted for the keyword, and you can also give a list of keywords
     like `KWD1|KWD2|...' to list entries that match any one of these
     keywords.  With a numeric prefix argument N, show the tree for the
     Nth keyword in the variable `org-todo-keywords'.  With two prefix
     arguments, find all TODO states, both un-done and done.  

`C-c a t     (`org-todo-list')'
     Show the global TODO list.  Collects the TODO items (with not-DONE
     states) from all agenda files (*note Agenda Views::) into a single
     buffer.  The new buffer will be in `agenda-mode', which provides
     commands to examine and manipulate the TODO entries from the new
     buffer (*note Agenda commands::).  *Note Global TODO list::, for
     more information.  

`S-M-<RET>     (`org-insert-todo-heading')'
     Insert a new TODO entry below the current one.

Changing a TODO state can also trigger tag changes.  See the docstring
of the option `org-todo-state-tags-triggers' for details.


File: org,  Node: TODO extensions,  Next: Progress logging,  Prev: TODO basics,  Up: TODO Items

5.2 Extended use of TODO keywords
=================================

By default, marked TODO entries have one of only two states: TODO and
DONE.  Org mode allows you to classify TODO items in more complex ways
with _TODO keywords_ (stored in `org-todo-keywords').  With special
setup, the TODO keyword system can work differently in different files.

   Note that tags are another way to classify headlines in general and
TODO items in particular (*note Tags::).

* Menu:

* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred does the rest
* Multiple sets in one file::   Mixing it all, and still finding your way
* Fast access to TODO states::  Single letter selection of a state
* Per-file keywords::           Different files, different requirements
* Faces for TODO keywords::     Highlighting states
* TODO dependencies::           When one task needs to wait for others


File: org,  Node: Workflow states,  Next: TODO types,  Prev: TODO extensions,  Up: TODO extensions

5.2.1 TODO keywords as workflow states
--------------------------------------

You can use TODO keywords to indicate different _sequential_ states in
the process of working on an item, for example(1):

     (setq org-todo-keywords
       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

   The vertical bar separates the TODO keywords (states that _need
action_) from the DONE states (which need _no further action_).  If you
don't provide the separator bar, the last state is used as the DONE
state.  With this setup, the command `C-c C-t' will cycle an entry from
TODO to FEEDBACK, then to VERIFY, and finally to DONE and DELEGATED.
You may also use a numeric prefix argument to quickly select a specific
state.  For example `C-3 C-c C-t' will change the state immediately to
VERIFY.  Or you can use `S-<left>' to go backward through the sequence.
If you define many keywords, you can use in-buffer completion (*note
Completion::) or even a special one-key selection scheme (*note Fast
access to TODO states::) to insert these words into the buffer.
Changing a TODO state can be logged with a timestamp, see *note
Tracking TODO state changes::, for more information.

   ---------- Footnotes ----------

   (1) Changing this variable only becomes effective after restarting
Org mode in a buffer.


File: org,  Node: TODO types,  Next: Multiple sets in one file,  Prev: Workflow states,  Up: TODO extensions

5.2.2 TODO keywords as types
----------------------------

The second possibility is to use TODO keywords to indicate different
_types_ of action items.  For example, you might want to indicate that
items are for "work" or "home".  Or, when you work with several people
on a single project, you might want to assign action items directly to
persons, by using their names as TODO keywords.  This would be set up
like this:

     (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))

   In this case, different keywords do not indicate a sequence, but
rather different types.  So the normal work flow would be to assign a
task to a person, and later to mark it DONE.  Org mode supports this
style by adapting the workings of the command `C-c C-t'(1).  When used
several times in succession, it will still cycle through all names, in
order to first select the right type for a task.  But when you return
to the item after some time and execute `C-c C-t' again, it will switch
from any name directly to DONE.  Use prefix arguments or completion to
quickly select a specific name.  You can also review the items of a
specific TODO type in a sparse tree by using a numeric prefix to `C-c /
t'.  For example, to see all things Lucy has to do, you would use `C-3
C-c / t'.  To collect Lucy's items from all agenda files into a single
buffer, you would use the numeric prefix argument as well when creating
the global TODO list: `C-3 C-c a t'.

   ---------- Footnotes ----------

   (1) This is also true for the `t' command in the timeline and agenda
buffers.


File: org,  Node: Multiple sets in one file,  Next: Fast access to TODO states,  Prev: TODO types,  Up: TODO extensions

5.2.3 Multiple keyword sets in one file
---------------------------------------

Sometimes you may want to use different sets of TODO keywords in
parallel.  For example, you may want to have the basic `TODO'/`DONE',
but also a workflow for bug fixing, and a separate state indicating
that an item has been canceled (so it is not DONE, but also does not
require action).  Your setup would then look like this:

     (setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

   The keywords should all be different, this helps Org mode to keep
track of which subsequence should be used for a given entry.  In this
setup, `C-c C-t' only operates within a subsequence, so it switches from
`DONE' to (nothing) to `TODO', and from `FIXED' to (nothing) to
`REPORT'.  Therefore you need a mechanism to initially select the
correct sequence.  Besides the obvious ways like typing a keyword or
using completion, you may also apply the following commands:

`C-u C-u C-c C-t'
`C-S-<right>'
`C-S-<left>'
     These keys jump from one TODO subset to the next.  In the above
     example, `C-u C-u C-c C-t' or `C-S-<right>' would jump from `TODO'
     or `DONE' to `REPORT', and any of the words in the second row to
     `CANCELED'.  Note that the `C-S-' key binding conflict with
     `shift-selection-mode' (*note Conflicts::).  

`S-<right>'
`S-<left>'
     `S-<<left>>' and `S-<<right>>' and walk through _all_ keywords
     from all sets, so for example `S-<<right>>' would switch from
     `DONE' to `REPORT' in the example above.  See also *note
     Conflicts::, for a discussion of the interaction with
     `shift-selection-mode'.


File: org,  Node: Fast access to TODO states,  Next: Per-file keywords,  Prev: Multiple sets in one file,  Up: TODO extensions

5.2.4 Fast access to TODO states
--------------------------------

If you would like to quickly change an entry to an arbitrary TODO state
instead of cycling through the states, you can set up keys for
single-letter access to the states.  This is done by adding the section
key after each keyword, in parentheses.  For example:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))

   If you then press `C-c C-t' followed by the selection key, the entry
will be switched to this state.  `SPC' can be used to remove any TODO
keyword from an entry.(1)

   ---------- Footnotes ----------

   (1) Check also the variable `org-fast-tag-selection-include-todo',
it allows you to change the TODO state through the tags interface
(*note Setting tags::), in case you like to mingle the two concepts.
Note that this means you need to come up with unique keys across both
sets of keywords.


File: org,  Node: Per-file keywords,  Next: Faces for TODO keywords,  Prev: Fast access to TODO states,  Up: TODO extensions

5.2.5 Setting up keywords for individual files
----------------------------------------------

It can be very useful to use different aspects of the TODO mechanism in
different files.  For file-local settings, you need to add special lines
to the file which set the keywords and interpretation for that file
only.  For example, to set one of the two examples discussed above, you
need one of the following lines, starting in column zero anywhere in the
file:

     #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
   (you may also write `#+SEQ_TODO' to be explicit about the
interpretation, but it means the same as `#+TODO'), or
     #+TYP_TODO: Fred Sara Lucy Mike | DONE

   A setup for using several sets in parallel would be:

     #+TODO: TODO | DONE
     #+TODO: REPORT BUG KNOWNCAUSE | FIXED
     #+TODO: | CANCELED

To make sure you are using the correct keyword, type `#+' into the
buffer and then use `M-<TAB>' completion.

   Remember that the keywords after the vertical bar (or the last
keyword if no bar is there) must always mean that the item is DONE
(although you may use a different word).  After changing one of these
lines, use `C-c C-c' with the cursor still in the line to make the
changes known to Org mode(1).

   ---------- Footnotes ----------

   (1) Org mode parses these lines only when Org mode is activated
after visiting a file.  `C-c C-c' with the cursor in a line starting
with `#+' is simply restarting Org mode for the current buffer.


File: org,  Node: Faces for TODO keywords,  Next: TODO dependencies,  Prev: Per-file keywords,  Up: TODO extensions

5.2.6 Faces for TODO keywords
-----------------------------

Org mode highlights TODO keywords with special faces: `org-todo' for
keywords indicating that an item still has to be acted upon, and
`org-done' for keywords indicating that an item is finished.  If you
are using more than 2 different states, you might want to use special
faces for some of them.  This can be done using the variable
`org-todo-keyword-faces'.  For example:

     (setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))

   While using a list with face properties as shown for CANCELED
_should_ work, this does not always seem to be the case.  If necessary,
define a special face and use that.  A string is interpreted as a
color.  The variable `org-faces-easy-properties' determines if that
color is interpreted as a foreground or a background color.


File: org,  Node: TODO dependencies,  Prev: Faces for TODO keywords,  Up: TODO extensions

5.2.7 TODO dependencies
-----------------------

The structure of Org files (hierarchy and lists) makes it easy to
define TODO dependencies.  Usually, a parent TODO task should not be
marked DONE until all subtasks (defined as children tasks) are marked
as DONE.  And sometimes there is a logical sequence to a number of
(sub)tasks, so that one task cannot be acted upon before all siblings
above it are done.  If you customize the variable
`org-enforce-todo-dependencies', Org will block entries from changing
state to DONE while they have children that are not DONE.  Furthermore,
if an entry has a property `ORDERED', each of its children will be
blocked until all earlier siblings are marked DONE.  Here is an example:

     * TODO Blocked until (two) is done
     ** DONE one
     ** TODO two

     * Parent
       :PROPERTIES:
       :ORDERED: t
       :END:
     ** TODO a
     ** TODO b, needs to wait for (a)
     ** TODO c, needs to wait for (a) and (b)

`C-c C-x o     (`org-toggle-ordered-property')'
     Toggle the `ORDERED' property of the current entry.  A property is
     used for this behavior because this should be local to the current
     entry, not inherited like a tag.  However, if you would like to
     track the value of this property with a tag for better visibility,
     customize the variable `org-track-ordered-property-with-tag'.  

`C-u C-u C-u C-c C-t'
     Change TODO state, circumventing any state blocking.

   If you set the variable `org-agenda-dim-blocked-tasks', TODO entries
that cannot be closed because of such dependencies will be shown in a
dimmed font or even made invisible in agenda views (*note Agenda
Views::).

   You can also block changes of TODO states by looking at checkboxes
(*note Checkboxes::).  If you set the variable
`org-enforce-todo-checkbox-dependencies', an entry that has unchecked
checkboxes will be blocked from switching to DONE.

   If you need more complex dependency structures, for example
dependencies between entries in different trees or files, check out the
contributed module `org-depend.el'.


File: org,  Node: Progress logging,  Next: Priorities,  Prev: TODO extensions,  Up: TODO Items

5.3 Progress logging
====================

Org mode can automatically record a timestamp and possibly a note when
you mark a TODO item as DONE, or even each time you change the state of
a TODO item.  This system is highly configurable, settings can be on a
per-keyword basis and can be localized to a file or even a subtree.  For
information on how to clock working time for a task, see *note Clocking
work time::.

* Menu:

* Closing items::               When was this entry marked DONE?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::        How consistent have you been?


File: org,  Node: Closing items,  Next: Tracking TODO state changes,  Prev: Progress logging,  Up: Progress logging

5.3.1 Closing items
-------------------

The most basic logging is to keep track of _when_ a certain TODO item
was finished.  This is achieved with(1)

     (setq org-log-done 'time)

Then each time you turn an entry from a TODO (not-done) state into any
of the DONE states, a line `CLOSED: [timestamp]' will be inserted just
after the headline.  If you turn the entry back into a TODO item
through further state cycling, that line will be removed again.  If you
want to record a note along with the timestamp, use(2)

     (setq org-log-done 'note)

You will then be prompted for a note, and that note will be stored below
the entry with a `Closing Note' heading.

   In the timeline (*note Timeline::) and in the agenda (*note
Weekly/daily agenda::), you can then use the `l' key to display the
TODO items with a `CLOSED' timestamp on each day, giving you an
overview of what has been done.

   ---------- Footnotes ----------

   (1) The corresponding in-buffer setting is: `#+STARTUP: logdone'

   (2) The corresponding in-buffer setting is: `#+STARTUP: lognotedone'


File: org,  Node: Tracking TODO state changes,  Next: Tracking your habits,  Prev: Closing items,  Up: Progress logging

5.3.2 Tracking TODO state changes
---------------------------------

When TODO keywords are used as workflow states (*note Workflow
states::), you might want to keep track of when a state change occurred
and maybe take a note about this change.  You can either record just a
timestamp, or a time-stamped note for a change.  These records will be
inserted after the headline as an itemized list, newest first(1).  When
taking a lot of notes, you might want to get the notes out of the way
into a drawer (*note Drawers::).  Customize the variable
`org-log-into-drawer' to get this behavior--the recommended drawer for
this is called `LOGBOOK'.  You can also overrule the setting of this
variable for a subtree by setting a `LOG_INTO_DRAWER' property.

   Since it is normally too much to record a note for every state, Org
mode expects configuration on a per-keyword basis for this.  This is
achieved by adding special markers `!' (for a timestamp) or `@' (for a
note with timestamp) in parentheses after each keyword.  For example,
with the setting

     (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

   To record a timestamp without a note for TODO keywords configured
with `@', just type `C-c C-c' to enter a blank note when prompted.

you not only define global TODO keywords and fast access keys, but also
request that a time is recorded when the entry is set to DONE(2), and
that a note is recorded when switching to WAIT or CANCELED.  The
setting for WAIT is even more special: the `!' after the slash means
that in addition to the note taken when entering the state, a timestamp
should be recorded when leaving the WAIT state, if and only if the
target state does not configure logging for entering it.  So it has no
effect when switching from WAIT to DONE, because DONE is configured to
record a timestamp only.  But when switching from WAIT back to TODO,
the `/!' in the WAIT setting now triggers a timestamp even though TODO
has no logging configured.

   You can use the exact same syntax for setting logging preferences
local to a buffer:
     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

   In order to define logging settings that are local to a subtree or a
single item, define a LOGGING property in this entry.  Any non-empty
LOGGING property resets all logging settings to nil.  You may then turn
on logging for this specific tree using STARTUP keywords like
`lognotedone' or `logrepeat', as well as adding state specific settings
like `TODO(!)'.  For example

     * TODO Log each state with only a time
       :PROPERTIES:
       :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
       :END:
     * TODO Only log when switching to WAIT, and when repeating
       :PROPERTIES:
       :LOGGING: WAIT(@) logrepeat
       :END:
     * TODO No logging at all
       :PROPERTIES:
       :LOGGING: nil
       :END:

   ---------- Footnotes ----------

   (1) See the variable `org-log-states-order-reversed'

   (2) It is possible that Org mode will record two timestamps when you
are using both `org-log-done' and state change logging.  However, it
will never prompt for two notes--if you have configured both, the state
change recording note will take precedence and cancel the `Closing
Note'.


File: org,  Node: Tracking your habits,  Prev: Tracking TODO state changes,  Up: Progress logging

5.3.3 Tracking your habits
--------------------------

Org has the ability to track the consistency of a special category of
TODOs, called "habits".  A habit has the following properties:

  1. You have enabled the `habits' module by customizing the variable
     `org-modules'.

  2. The habit is a TODO item, with a TODO keyword representing an open
     state.

  3. The property `STYLE' is set to the value `habit'.

  4. The TODO has a scheduled date, usually with a `.+' style repeat
     interval.  A `++' style may be appropriate for habits with time
     constraints, e.g., must be done on weekends, or a `+' style for an
     unusual habit that can have a backlog, e.g., weekly reports.

  5. The TODO may also have minimum and maximum ranges specified by
     using the syntax `.+2d/3d', which says that you want to do the
     task at least every three days, but at most every two days.

  6. You must also have state logging for the `DONE' state enabled, in
     order for historical data to be represented in the consistency
     graph.  If it is not enabled it is not an error, but the
     consistency graphs will be largely meaningless.

   To give you an idea of what the above rules look like in action,
here's an actual habit with some history:

     ** TODO Shave
        SCHEDULED: <2009-10-17 Sat .+2d/4d>
        - State "DONE"       from "TODO"       [2009-10-15 Thu]
        - State "DONE"       from "TODO"       [2009-10-12 Mon]
        - State "DONE"       from "TODO"       [2009-10-10 Sat]
        - State "DONE"       from "TODO"       [2009-10-04 Sun]
        - State "DONE"       from "TODO"       [2009-10-02 Fri]
        - State "DONE"       from "TODO"       [2009-09-29 Tue]
        - State "DONE"       from "TODO"       [2009-09-25 Fri]
        - State "DONE"       from "TODO"       [2009-09-19 Sat]
        - State "DONE"       from "TODO"       [2009-09-16 Wed]
        - State "DONE"       from "TODO"       [2009-09-12 Sat]
        :PROPERTIES:
        :STYLE:    habit
        :LAST_REPEAT: [2009-10-19 Mon 00:36]
        :END:

   What this habit says is: I want to shave at most every 2 days (given
by the `SCHEDULED' date and repeat interval) and at least every 4 days.
If today is the 15th, then the habit first appears in the agenda on Oct
17, after the minimum of 2 days has elapsed, and will appear overdue on
Oct 19, after four days have elapsed.

   What's really useful about habits is that they are displayed along
with a consistency graph, to show how consistent you've been at getting
that task done in the past.  This graph shows every day that the task
was done over the past three weeks, with colors for each day.  The
colors used are:

`Blue'
     If the task wasn't to be done yet on that day.

`Green'
     If the task could have been done on that day.

`Yellow'
     If the task was going to be overdue the next day.

`Red'
     If the task was overdue on that day.

   In addition to coloring each day, the day is also marked with an
asterisk if the task was actually done that day, and an exclamation
mark to show where the current day falls in the graph.

   There are several configuration variables that can be used to change
the way habits are displayed in the agenda.

`org-habit-graph-column'
     The buffer column at which the consistency graph should be drawn.
     This will overwrite any text in that column, so it is a good idea
     to keep your habits' titles brief and to the point.

`org-habit-preceding-days'
     The amount of history, in days before today, to appear in
     consistency graphs.

`org-habit-following-days'
     The number of days after today that will appear in consistency
     graphs.

`org-habit-show-habits-only-for-today'
     If non-nil, only show habits in today's agenda view.  This is set
     to true by default.

   Lastly, pressing `K' in the agenda buffer will cause habits to
temporarily be disabled and they won't appear at all.  Press `K' again
to bring them back.  They are also subject to tag filtering, if you
have habits which should only be done in certain contexts, for example.


File: org,  Node: Priorities,  Next: Breaking down tasks,  Prev: Progress logging,  Up: TODO Items

5.4 Priorities
==============

If you use Org mode extensively, you may end up with enough TODO items
that it starts to make sense to prioritize them.  Prioritizing can be
done by placing a _priority cookie_ into the headline of a TODO item,
like this

     *** TODO [#A] Write letter to Sam Fortune

By default, Org mode supports three priorities: `A', `B', and `C'.  `A'
is the highest priority.  An entry without a cookie is treated just
like priority `B'.  Priorities make a difference only for sorting in
the agenda (*note Weekly/daily agenda::); outside the agenda, they have
no inherent meaning to Org mode.  The cookies can be highlighted with
special faces by customizing the variable `org-priority-faces'.

   Priorities can be attached to any outline node; they do not need to
be TODO items.

`C-c ,'
     Set the priority of the current headline (`org-priority').  The
     command prompts for a priority character `A', `B' or `C'.  When
     you press <SPC> instead, the priority cookie is removed from the
     headline.  The priorities can also be changed "remotely" from the
     timeline and agenda buffer with the `,' command (*note Agenda
     commands::).  

`S-<up>     (`org-priority-up')'
`S-<down>     (`org-priority-down')'
     Increase/decrease priority of current headline(1).  Note that
     these keys are also used to modify timestamps (*note Creating
     timestamps::).  See also *note Conflicts::, for a discussion of
     the interaction with `shift-selection-mode'.

   You can change the range of allowed priorities by setting the
variables `org-highest-priority', `org-lowest-priority', and
`org-default-priority'.  For an individual buffer, you may set these
values (highest, lowest, default) like this (please make sure that the
highest priority is earlier in the alphabet than the lowest priority):

     #+PRIORITIES: A C B

   ---------- Footnotes ----------

   (1) See also the option `org-priority-start-cycle-with-default'.


File: org,  Node: Breaking down tasks,  Next: Checkboxes,  Prev: Priorities,  Up: TODO Items

5.5 Breaking tasks down into subtasks
=====================================

It is often advisable to break down large tasks into smaller, manageable
subtasks.  You can do this by creating an outline tree below a TODO
item, with detailed subtasks on the tree(1).  To keep the overview over
the fraction of subtasks that are already completed, insert either
`[/]' or `[%]' anywhere in the headline.  These cookies will be updated
each time the TODO status of a child changes, or when pressing `C-c
C-c' on the cookie.  For example:

     * Organize Party [33%]
     ** TODO Call people [1/2]
     *** TODO Peter
     *** DONE Sarah
     ** TODO Buy food
     ** DONE Talk to neighbor

   If a heading has both checkboxes and TODO children below it, the
meaning of the statistics cookie become ambiguous.  Set the property
`COOKIE_DATA' to either `checkbox' or `todo' to resolve this issue.

   If you would like to have the statistics cookie count any TODO
entries in the subtree (not just direct children), configure the
variable `org-hierarchical-todo-statistics'.  To do this for a single
subtree, include the word `recursive' into the value of the
`COOKIE_DATA' property.

     * Parent capturing statistics [2/20]
       :PROPERTIES:
       :COOKIE_DATA: todo recursive
       :END:

   If you would like a TODO entry to automatically change to DONE when
all children are done, you can use the following setup:

     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

   Another possibility is the use of checkboxes to identify (a
hierarchy of) a large number of subtasks (*note Checkboxes::).

   ---------- Footnotes ----------

   (1) To keep subtasks out of the global TODO list, see the
`org-agenda-todo-list-sublevels'.


File: org,  Node: Checkboxes,  Prev: Breaking down tasks,  Up: TODO Items

5.6 Checkboxes
==============

Every item in a plain list(1) (*note Plain lists::) can be made into a
checkbox by starting it with the string `[ ]'.  This feature is similar
to TODO items (*note TODO Items::), but is more lightweight.
Checkboxes are not included into the global TODO list, so they are
often great to split a task into a number of simple steps.  Or you can
use them in a shopping list.  To toggle a checkbox, use `C-c C-c', or
use the mouse (thanks to Piotr Zielinski's `org-mouse.el').

   Here is an example of a checkbox list.

     * TODO Organize party [2/4]
       - [-] call people [1/3]
         - [ ] Peter
         - [X] Sarah
         - [ ] Sam
       - [X] order food
       - [ ] think about what music to play
       - [X] talk to the neighbors

   Checkboxes work hierarchically, so if a checkbox item has children
that are checkboxes, toggling one of the children checkboxes will make
the parent checkbox reflect if none, some, or all of the children are
checked.

   The `[2/4]' and `[1/3]' in the first and second line are cookies
indicating how many checkboxes present in this entry have been checked
off, and the total number of checkboxes present.  This can give you an
idea on how many checkboxes remain, even without opening a folded
entry.  The cookies can be placed into a headline or into (the first
line of) a plain list item.  Each cookie covers checkboxes of direct
children structurally below the headline/item on which the cookie
appears(2).  You have to insert the cookie yourself by typing either
`[/]' or `[%]'.  With `[/]' you get an `n out of m' result, as in the
examples above.  With `[%]' you get information about the percentage of
checkboxes checked (in the above example, this would be `[50%]' and
`[33%]', respectively).  In a headline, a cookie can count either
checkboxes below the heading or TODO states of children, and it will
display whatever was changed last.  Set the property `COOKIE_DATA' to
either `checkbox' or `todo' to resolve this issue.

   If the current outline node has an `ORDERED' property, checkboxes
must be checked off in sequence, and an error will be thrown if you try
to check off a box while there are unchecked boxes above it.

The following commands work with checkboxes:

`C-c C-c     (`org-toggle-checkbox')'
     Toggle checkbox status or (with prefix arg) checkbox presence at
     point.  With a single prefix argument, add an empty checkbox or
     remove the current one(3).  With a double prefix argument, set it
     to `[-]', which is considered to be an intermediate state.  

`C-c C-x C-b     (`org-toggle-checkbox')'
     Toggle checkbox status or (with prefix arg) checkbox presence at
     point.  With double prefix argument, set it to `[-]', which is
     considered to be an intermediate state.
        - If there is an active region, toggle the first checkbox in
          the region and set all remaining boxes to the same status as
          the first.  With a prefix arg, add or remove the checkbox for
          all items in the region.

        - If the cursor is in a headline, toggle checkboxes in the
          region between this headline and the next (so _not_ the
          entire subtree).

        - If there is no active region, just toggle the checkbox at
          point.
     
`M-S-<RET>     (`org-insert-todo-heading')'
     Insert a new item with a checkbox.  This works only if the cursor
     is already in a plain list item (*note Plain lists::).  

`C-c C-x o     (`org-toggle-ordered-property')'
     Toggle the `ORDERED' property of the entry, to toggle if
     checkboxes must be checked off in sequence.  A property is used
     for this behavior because this should be local to the current
     entry, not inherited like a tag.  However, if you would like to
     track the value of this property with a tag for better visibility,
     customize the variable `org-track-ordered-property-with-tag'.  

`C-c #     (`org-update-statistics-cookies')'
     Update the statistics cookie in the current outline entry.  When
     called with a `C-u' prefix, update the entire file.  Checkbox
     statistic cookies are updated automatically if you toggle
     checkboxes with `C-c C-c' and make new ones with `M-S-<RET>'.
     TODO statistics cookies update when changing TODO states.  If you
     delete boxes/entries or add/change them by hand, use this command
     to get things back into sync.

   ---------- Footnotes ----------

   (1) With the exception of description lists.  But you can allow it
by modifying `org-list-automatic-rules' accordingly.

   (2) Set the variable `org-hierarchical-checkbox-statistics' if you
want such cookies to count all checkboxes below the cookie, not just
those belonging to direct children.

   (3) `C-u C-c C-c' on the _first_ item of a list with no checkbox
will add checkboxes to the rest of the list.


File: org,  Node: Tags,  Next: Properties and Columns,  Prev: TODO Items,  Up: Top

6 Tags
******

An excellent way to implement labels and contexts for cross-correlating
information is to assign tags to headlines.  Org mode has extensive
support for tags.

   Every headline can contain a list of tags; they occur at the end of
the headline.  Tags are normal words containing letters, numbers, `_',
and `@'.  Tags must be preceded and followed by a single colon, e.g.,
`:work:'.  Several tags can be specified, as in `:work:urgent:'.  Tags
will by default be in bold face with the same color as the headline.
You may specify special faces for specific tags using the variable
`org-tag-faces', in much the same way as you can for TODO keywords
(*note Faces for TODO keywords::).

* Menu:

* Tag inheritance::             Tags use the tree structure of the outline
* Setting tags::                How to assign tags to a headline
* Tag searches::                Searching for combinations of tags


File: org,  Node: Tag inheritance,  Next: Setting tags,  Prev: Tags,  Up: Tags

6.1 Tag inheritance
===================

Tags make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings will inherit the tag as
well.  For example, in the list

     * Meeting with the French group      :work:
     ** Summary by Frank                  :boss:notes:
     *** TODO Prepare slides for him      :action:

the final heading will have the tags `:work:', `:boss:', `:notes:', and
`:action:' even though the final heading is not explicitly marked with
those tags.  You can also set tags that all entries in a file should
inherit just as if these tags were defined in a hypothetical level zero
that surrounds the entire file.  Use a line like this(1):

     #+FILETAGS: :Peter:Boss:Secret:

To limit tag inheritance to specific tags, or to turn it off entirely,
use the variables `org-use-tag-inheritance' and
`org-tags-exclude-from-inheritance'.

   When a headline matches during a tags search while tag inheritance
is turned on, all the sublevels in the same tree will (for a simple
match form) match as well(2).  The list of matches may then become very
long.  If you only want to see the first tags match in a subtree,
configure the variable `org-tags-match-list-sublevels' (not
recommended).

   ---------- Footnotes ----------

   (1) As with all these in-buffer settings, pressing `C-c C-c'
activates any changes in the line.

   (2) This is only true if the search does not involve more complex
tests including properties (*note Property searches::).


File: org,  Node: Setting tags,  Next: Tag searches,  Prev: Tag inheritance,  Up: Tags

6.2 Setting tags
================

Tags can simply be typed into the buffer at the end of a headline.
After a colon, `M-<TAB>' offers completion on tags.  There is also a
special command for inserting tags:

`C-c C-q     (`org-set-tags-command')'
     Enter new tags for the current headline.  Org mode will either
     offer completion or a special single-key interface for setting
     tags, see below.  After pressing <RET>, the tags will be inserted
     and aligned to `org-tags-column'.  When called with a `C-u'
     prefix, all tags in the current buffer will be aligned to that
     column, just to make things look nice.  TAGS are automatically
     realigned after promotion, demotion, and TODO state changes (*note
     TODO basics::).  

`C-c C-c     (`org-set-tags-command')'
     When the cursor is in a headline, this does the same as `C-c C-q'.

   Org supports tag insertion based on a _list of tags_.  By default
this list is constructed dynamically, containing all tags currently
used in the buffer.  You may also globally specify a hard list of tags
with the variable `org-tag-alist'.  Finally you can set the default
tags for a given file with lines like

     #+TAGS: @work @home @tennisclub
     #+TAGS: laptop car pc sailboat

   If you have globally defined your preferred set of tags using the
variable `org-tag-alist', but would like to use a dynamic tag list in a
specific file, add an empty TAGS option line to that file:

     #+TAGS:

   If you have a preferred set of tags that you would like to use in
every file, in addition to those defined on a per-file basis by TAGS
option lines, then you may specify a list of tags with the variable
`org-tag-persistent-alist'.  You may turn this off on a per-file basis
by adding a STARTUP option line to that file:

     #+STARTUP: noptag

   By default Org mode uses the standard minibuffer completion
facilities for entering tags.  However, it also implements another,
quicker, tag selection method called _fast tag selection_.  This allows
you to select and deselect tags with just a single key press.  For this
to work well you should assign unique letters to most of your commonly
used tags.  You can do this globally by configuring the variable
`org-tag-alist' in your `.emacs' file.  For example, you may find the
need to tag many items in different files with `:@home:'.  In this case
you can set something like:

     (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

If the tag is only relevant to the file you are working on, then you
can instead set the TAGS option line as:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)

The tags interface will show the available tags in a splash window.  If
you want to start a new line after a specific tag, insert `\n' into the
tag list

     #+TAGS: @work(w)  @home(h)  @tennisclub(t) \n laptop(l)  pc(p)

or write them in two lines:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)
     #+TAGS: laptop(l)  pc(p)

You can also group together tags that are mutually exclusive by using
braces, as in:

     #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)

you indicate that at most one of `@work', `@home', and `@tennisclub'
should be selected.  Multiple such groups are allowed.

Don't forget to press `C-c C-c' with the cursor in one of these lines
to activate any changes.

To set these mutually exclusive groups in the variable `org-tags-alist',
you must use the dummy tags `:startgroup' and `:endgroup' instead of
the braces.  Similarly, you can use `:newline' to indicate a line
break.  The previous example would be set globally by the following
configuration:

     (setq org-tag-alist '((:startgroup . nil)
                           ("@work" . ?w) ("@home" . ?h)
                           ("@tennisclub" . ?t)
                           (:endgroup . nil)
                           ("laptop" . ?l) ("pc" . ?p)))

   If at least one tag has a selection key then pressing `C-c C-c' will
automatically present you with a special interface, listing inherited
tags, the tags of the current headline, and a list of all valid tags
with corresponding keys(1).  In this interface, you can use the
following keys:

`a-z...'
     Pressing keys assigned to tags will add or remove them from the
     list of tags in the current line.  Selecting a tag in a group of
     mutually exclusive tags will turn off any other tags from that
     group.  

`<TAB>'
     Enter a tag in the minibuffer, even if the tag is not in the
     predefined list.  You will be able to complete on all tags present
     in the buffer.  You can also add several tags: just separate them
     with a comma.

`<SPC>'
     Clear all tags for this line.  

`<RET>'
     Accept the modified set.

`C-g'
     Abort without installing changes.

`q'
     If `q' is not assigned to a tag, it aborts like `C-g'.

`!'
     Turn off groups of mutually exclusive tags.  Use this to (as an
     exception) assign several tags from such a group.

`C-c'
     Toggle auto-exit after the next change (see below).  If you are
     using expert mode, the first `C-c' will display the selection
     window.

This method lets you assign tags to a headline with very few keys.  With
the above setup, you could clear the current tags and set `@home',
`laptop' and `pc' tags with just the following keys: `C-c C-c <SPC> h l
p <RET>'.  Switching from `@home' to `@work' would be done with `C-c
C-c w <RET>' or alternatively with `C-c C-c C-c w'.  Adding the
non-predefined tag `Sarah' could be done with `C-c C-c <TAB> S a r a h
<RET> <RET>'.

   If you find that most of the time you need only a single key press to
modify your list of tags, set the variable
`org-fast-tag-selection-single-key'.  Then you no longer have to press
<RET> to exit fast tag selection--it will immediately exit after the
first change.  If you then occasionally need more keys, press `C-c' to
turn off auto-exit for the current tag selection process (in effect:
start selection with `C-c C-c C-c' instead of `C-c C-c').  If you set
the variable to the value `expert', the special window is not even
shown for single-key tag selection, it comes up only when you press an
extra `C-c'.

   ---------- Footnotes ----------

   (1) Keys will automatically be assigned to tags which have no
configured keys.


File: org,  Node: Tag searches,  Prev: Setting tags,  Up: Tags

6.3 Tag searches
================

Once a system of tags has been set up, it can be used to collect related
information into special lists.

`C-c / m  or  C-c \     (`org-match-sparse-tree')'
     Create a sparse tree with all headlines matching a tags search.
     With a `C-u' prefix argument, ignore headlines that are not a TODO
     line.  

`C-c a m     (`org-tags-view')'
     Create a global list of tag matches from all agenda files.  *Note
     Matching tags and properties::.  

`C-c a M     (`org-tags-view')'
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking subitems (see variable
     `org-tags-match-list-sublevels').

   These commands all prompt for a match string which allows basic
Boolean logic like `+boss+urgent-project1', to find entries with tags
`boss' and `urgent', but not `project1', or `Kathy|Sally' to find
entries which are tagged, like `Kathy' or `Sally'.  The full syntax of
the search string is rich and allows also matching against TODO
keywords, entry levels and properties.  For a complete description with
many examples, see *note Matching tags and properties::.


File: org,  Node: Properties and Columns,  Next: Dates and Times,  Prev: Tags,  Up: Top

7 Properties and columns
************************

A property is a key-value pair associated with an entry.  Properties
can be set so they are associated with a single entry, with every entry
in a tree, or with every entry in an Org mode file.

   There are two main applications for properties in Org mode.  First,
properties are like tags, but with a value.  Imagine maintaining a file
where you document bugs and plan releases for a piece of software.
Instead of using tags like `:release_1:', `:release_2:', you can use a
property, say `:Release:', that in different subtrees has different
values, such as `1.0' or `2.0'.  Second, you can use properties to
implement (very basic) database capabilities in an Org buffer.  Imagine
keeping track of your music CDs, where properties could be things such
as the album, artist, date of release, number of tracks, and so on.

   Properties can be conveniently edited and viewed in column view
(*note Column view::).

* Menu:

* Property syntax::             How properties are spelled out
* Special properties::          Access to other Org mode features
* Property searches::           Matching property values
* Property inheritance::        Passing values down the tree
* Column view::                 Tabular viewing and editing
* Property API::                Properties for Lisp programmers


File: org,  Node: Property syntax,  Next: Special properties,  Prev: Properties and Columns,  Up: Properties and Columns

7.1 Property syntax
===================

Properties are key-value pairs.  When they are associated with a single
entry or with a tree they need to be inserted into a special drawer
(*note Drawers::) with the name `PROPERTIES'.  Each property is
specified on a single line, with the key (surrounded by colons) first,
and the value after it.  Here is an example:

     * CD collection
     ** Classic
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glen Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :END:

   Depending on the value of `org-use-property-inheritance', a property
set this way will either be associated with a single entry, or the
sub-tree defined by the entry, see *note Property inheritance::.

   You may define the allowed values for a particular property `:Xyz:'
by setting a property `:Xyz_ALL:'.  This special property is
_inherited_, so if you set it in a level 1 entry, it will apply to the
entire tree.  When allowed values are defined, setting the
corresponding property becomes easier and is less prone to typing
errors.  For the example with the CD collection, we can predefine
publishers and the number of disks in a box like this:

     * CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:

   If you want to set properties that can be inherited by any entry in a
file, use a line like 
     #+PROPERTY: NDisks_ALL 1 2 3 4

   If you want to add to the value of an existing property, append a
`+' to the property name.  The following results in the property `var'
having the value "foo=1 bar=2".  
     #+PROPERTY: var  foo=1
     #+PROPERTY: var+ bar=2

   It is also possible to add to the values of inherited properties.
The following results in the `genres' property having the value "Classic
Baroque" under the `Goldberg Variations' subtree.  
     * CD collection
     ** Classic
         :PROPERTIES:
         :GENRES: Classic
         :END:
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glen Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :GENRES+:   Baroque
         :END:
   Note that a property can only have one entry per Drawer.

   Property values set with the global variable `org-global-properties'
can be inherited by all entries in all Org files.

The following commands help to work with properties:

`M-<TAB>     (`pcomplete')'
     After an initial colon in a line, complete property keys.  All
     keys used in the current file will be offered as possible
     completions.  

`C-c C-x p     (`org-set-property')'
     Set a property.  This prompts for a property name and a value.  If
     necessary, the property drawer is created as well.

`M-x org-insert-property-drawer'
     Insert a property drawer into the current entry.  The drawer will
     be inserted early in the entry, but after the lines with planning
     information like deadlines.  

`C-c C-c     (`org-property-action')'
     With the cursor in a property drawer, this executes property
     commands.  

`C-c C-c s     (`org-set-property')'
     Set a property in the current entry.  Both the property and the
     value can be inserted using completion.  

`S-<right>     (`org-property-next-allowed-value')'
`S-<left>     (`org-property-previous-allowed-value')'
     Switch property at point to the next/previous allowed value.  

`C-c C-c d     (`org-delete-property')'
     Remove a property from the current entry.  

`C-c C-c D     (`org-delete-property-globally')'
     Globally remove a property, from all entries in the current file.  

`C-c C-c c     (`org-compute-property-at-point')'
     Compute the property at point, using the operator and scope from
     the nearest column format definition.


File: org,  Node: Special properties,  Next: Property searches,  Prev: Property syntax,  Up: Properties and Columns

7.2 Special properties
======================

Special properties provide an alternative access method to Org mode
features, like the TODO state or the priority of an entry, discussed in
the previous chapters.  This interface exists so that you can include
these states in a column view (*note Column view::), or to use them in
queries.  The following property names are special and (except for
`:CATEGORY:') should not be used as keys in the properties drawer:

     TODO         The TODO keyword of the entry.
     TAGS         The tags defined directly in the headline.
     ALLTAGS      All tags, including inherited ones.
     CATEGORY     The category of an entry.
     PRIORITY     The priority of the entry, a string with a single letter.
     DEADLINE     The deadline time string, without the angular brackets.
     SCHEDULED    The scheduling timestamp, without the angular brackets.
     CLOSED       When was this entry closed?
     TIMESTAMP    The first keyword-less timestamp in the entry.
     TIMESTAMP_IA The first inactive timestamp in the entry.
     CLOCKSUM     The sum of CLOCK intervals in the subtree.  `org-clock-sum'
                  must be run first to compute the values in the current buffer.
     BLOCKED      "t" if task is currently blocked by children or siblings
     ITEM         The content of the entry.
     FILE         The filename the entry is located in.


File: org,  Node: Property searches,  Next: Property inheritance,  Prev: Special properties,  Up: Properties and Columns

7.3 Property searches
=====================

To create sparse trees and special lists with selection based on
properties, the same commands are used as for tag searches (*note Tag
searches::).
`C-c / m  or  C-c ,org-match-sparse-tree     (`')'
     Create a sparse tree with all matching entries.  With a `C-u'
     prefix argument, ignore headlines that are not a TODO line.  

`C-c a m     (`org-tags-view')'
     Create a global list of tag/property  matches from all agenda
     files.  *Note Matching tags and properties::.  

`C-c a M     (`org-tags-view')'
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking of subitems (see variable
     `org-tags-match-list-sublevels').

   The syntax for the search string is described in *note Matching tags
and properties::.

   There is also a special command for creating sparse trees based on a
single property:

`C-c / p'
     Create a sparse tree based on the value of a property.  This first
     prompts for the name of a property, and then for a value.  A
     sparse tree is created with all entries that define this property
     with the given value.  If you enclose the value in curly braces,
     it is interpreted as a regular expression and matched against the
     property values.


File: org,  Node: Property inheritance,  Next: Column view,  Prev: Property searches,  Up: Properties and Columns

7.4 Property Inheritance
========================

The outline structure of Org mode documents lends itself to an
inheritance model of properties: if the parent in a tree has a certain
property, the children can inherit this property.  Org mode does not
turn this on by default, because it can slow down property searches
significantly and is often not needed.  However, if you find inheritance
useful, you can turn it on by setting the variable
`org-use-property-inheritance'.  It may be set to `t' to make all
properties inherited from the parent, to a list of properties that
should be inherited, or to a regular expression that matches inherited
properties.  If a property has the value `nil', this is interpreted as
an explicit undefine of the property, so that inheritance search will
stop at this value and return `nil'.

   Org mode has a few properties for which inheritance is hard-coded, at
least for the special applications for which they are used:

`COLUMNS'
     The `:COLUMNS:' property defines the format of column view (*note
     Column view::).  It is inherited in the sense that the level where
     a `:COLUMNS:' property is defined is used as the starting point
     for a column view table, independently of the location in the
     subtree from where columns view is turned on.

`CATEGORY'
     For agenda view, a category set through a `:CATEGORY:' property
     applies to the entire subtree.

`ARCHIVE'
     For archiving, the `:ARCHIVE:' property may define the archive
     location for the entire subtree (*note Moving subtrees::).

`LOGGING'
     The LOGGING property may define logging settings for an entry or a
     subtree (*note Tracking TODO state changes::).


File: org,  Node: Column view,  Next: Property API,  Prev: Property inheritance,  Up: Properties and Columns

7.5 Column view
===============

A great way to view and edit properties in an outline tree is _column
view_.  In column view, each outline node is turned into a table row.
Columns in this table provide access to properties of the entries.  Org
mode implements columns by overlaying a tabular structure over the
headline of each item.  While the headlines have been turned into a
table row, you can still change the visibility of the outline tree.
For example, you get a compact table by switching to CONTENTS view
(`S-<TAB> S-<TAB>', or simply `c' while column view is active), but you
can still open, read, and edit the entry below each headline.  Or, you
can switch to column view after executing a sparse tree command and in
this way get a table only for the selected items.  Column view also
works in agenda buffers (*note Agenda Views::) where queries have
collected selected items, possibly from a number of files.

* Menu:

* Defining columns::            The COLUMNS format property
* Using column view::           How to create and use column view
* Capturing column view::       A dynamic block for column view


File: org,  Node: Defining columns,  Next: Using column view,  Prev: Column view,  Up: Column view

7.5.1 Defining columns
----------------------

Setting up a column view first requires defining the columns.  This is
done by defining a column format line.

* Menu:

* Scope of column definitions::  Where defined, where valid?
* Column attributes::           Appearance and content of a column


File: org,  Node: Scope of column definitions,  Next: Column attributes,  Prev: Defining columns,  Up: Defining columns

7.5.1.1 Scope of column definitions
...................................

To define a column format for an entire file, use a line like

     #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO

   To specify a format that only applies to a specific tree, add a
`:COLUMNS:' property to the top node of that tree, for example:

     ** Top node for columns view
        :PROPERTIES:
        :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
        :END:

   If a `:COLUMNS:' property is present in an entry, it defines columns
for the entry itself, and for the entire subtree below it.  Since the
column definition is part of the hierarchical structure of the document,
you can define columns on level 1 that are general enough for all
sublevels, and more specific columns further down, when you edit a
deeper part of the tree.


File: org,  Node: Column attributes,  Prev: Scope of column definitions,  Up: Defining columns

7.5.1.2 Column attributes
.........................

A column definition sets the attributes of a column.  The general
definition looks like this:

      %[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]

Except for the percent sign and the property name, all items are
optional.  The individual parts have the following meaning:

     WIDTH           An integer specifying the width of the column in characters.
                     If omitted, the width will be determined automatically.
     PROPERTY        The property that should be edited in this column.
                     Special properties representing meta data are allowed here
                     as well (*note Special properties::)
     TITLE           The header text for the column.  If omitted, the property
                     name is used.
     {SUMMARY-TYPE}  The summary type.  If specified, the column values for
                     parent nodes are computed from the children.
                     Supported summary types are:
                     {+}       Sum numbers in this column.
                     {+;%.1f}  Like `+', but format result with `%.1f'.
                     {$}       Currency, short for `+;%.2f'.
                     {:}       Sum times, HH:MM, plain numbers are hours.
                     {X}       Checkbox status, `[X]' if all children are `[X]'.
                     {X/}      Checkbox status, `[n/m]'.
                     {X%}      Checkbox status, `[n%]'.
                     {min}     Smallest number in column.
                     {max}     Largest number.
                     {mean}    Arithmetic mean of numbers.
                     {:min}    Smallest time value in column.
                     {:max}    Largest time value.
                     {:mean}   Arithmetic mean of time values.
                     {@min}    Minimum age (in days/hours/mins/seconds).
                     {@max}    Maximum age (in days/hours/mins/seconds).
                     {@mean}   Arithmetic mean of ages (in days/hours/mins/seconds).
                     {est+}    Add low-high estimates.

Be aware that you can only have one summary type for any property you
include.  Subsequent columns referencing the same property will all
display the same summary information.

   The `est+' summary type requires further explanation.  It is used for
combining estimates, expressed as low-high ranges.  For example, instead
of estimating a particular task will take 5 days, you might estimate it
as 5-6 days if you're fairly confident you know how much work is
required, or 1-10 days if you don't really know what needs to be done.
Both ranges average at 5.5 days, but the first represents a more
predictable delivery.

   When combining a set of such estimates, simply adding the lows and
highs produces an unrealistically wide result.  Instead, `est+' adds the
statistical mean and variance of the sub-tasks, generating a final
estimate from the sum.  For example, suppose you had ten tasks, each of
which was estimated at 0.5 to 2 days of work.  Straight addition
produces an estimate of 5 to 20 days, representing what to expect if
everything goes either extremely well or extremely poorly.  In
contrast, `est+' estimates the full job more realistically, at 10-15
days.

   Here is an example for a complete columns definition, along with
allowed values.

     :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \(1)
                        %10Time_Estimate{:} %CLOCKSUM
     :Owner_ALL:    Tammy Mark Karl Lisa Don
     :Status_ALL:   "In progress" "Not started yet" "Finished" ""
     :Approved_ALL: "[ ]" "[X]"

The first column, `%25ITEM', means the first 25 characters of the item
itself, i.e. of the headline.  You probably always should start the
column definition with the `ITEM' specifier.  The other specifiers
create columns `Owner' with a list of names as allowed values, for
`Status' with four different possible values, and for a checkbox field
`Approved'.  When no width is given after the `%' character, the column
will be exactly as wide as it needs to be in order to fully display all
values.  The `Approved' column does have a modified title (`Approved?',
with a question mark).  Summaries will be created for the
`Time_Estimate' column by adding time duration expressions like HH:MM,
and for the `Approved' column, by providing an `[X]' status if all
children have been checked.  The `CLOCKSUM' column is special, it lists
the sum of CLOCK intervals in the subtree.

   ---------- Footnotes ----------

   (1) Please note that the COLUMNS definition must be on a single
line--it is wrapped here only because of formatting constraints.


File: org,  Node: Using column view,  Next: Capturing column view,  Prev: Defining columns,  Up: Column view

7.5.2 Using column view
-----------------------

Turning column view on and off
..............................

`C-c C-x C-c     (`org-columns')'
     Turn on column view.  If the cursor is before the first headline
     in the file, column view is turned on for the entire file, using
     the `#+COLUMNS' definition.  If the cursor is somewhere inside the
     outline, this command searches the hierarchy, up from point, for a
     `:COLUMNS:' property that defines a format.  When one is found,
     the column view table is established for the tree starting at the
     entry that contains the `:COLUMNS:' property.  If no such property
     is found, the format is taken from the `#+COLUMNS' line or from
     the variable `org-columns-default-format', and column view is
     established for the current entry and its subtree.  

`r     (`org-columns-redo')'
     Recreate the column view, to include recent changes made in the
     buffer.  

`g     (`org-columns-redo')'
     Same as `r'.  

`q     (`org-columns-quit')'
     Exit column view.

Editing values
..............

`<left> <right> <up> <down>'
     Move through the column view from field to field.  

`S-<left>/<right>'
     Switch to the next/previous allowed value of the field.  For this,
     you have to have specified allowed values for a property.

`1..9,0'
     Directly select the Nth allowed value, `0' selects the 10th value.  

`n     (`org-columns-next-allowed-value')'
`p     (`org-columns-previous-allowed-value')'
     Same as `S-<left>/<right>' 

`e     (`org-columns-edit-value')'
     Edit the property at point.  For the special properties, this will
     invoke the same interface that you normally use to change that
     property.  For example, when editing a TAGS property, the tag
     completion or fast selection interface will pop up.  

`C-c C-c     (`org-columns-set-tags-or-toggle')'
     When there is a checkbox at point, toggle it.  

`v     (`org-columns-show-value')'
     View the full value of this property.  This is useful if the width
     of the column is smaller than that of the value.  

`a     (`org-columns-edit-allowed')'
     Edit the list of allowed values for this property.  If the list is
     found in the hierarchy, the modified values is stored there.  If
     no list is found, the new value is stored in the first entry that
     is part of the current column view.

Modifying the table structure
.............................

`<     (`org-columns-narrow')'
`>     (`org-columns-widen')'
     Make the column narrower/wider by one character.  

`S-M-<right>     (`org-columns-new')'
     Insert a new column, to the left of the current column.  

`S-M-<left>     (`org-columns-delete')'
     Delete the current column.


File: org,  Node: Capturing column view,  Prev: Using column view,  Up: Column view

7.5.3 Capturing column view
---------------------------

Since column view is just an overlay over a buffer, it cannot be
exported or printed directly.  If you want to capture a column view, use
a `columnview' dynamic block (*note Dynamic blocks::).  The frame of
this block looks like this:

     * The column view
     #+BEGIN: columnview :hlines 1 :id "label"

     #+END:

This dynamic block has the following parameters:

`:id'
     This is the most important parameter.  Column view is a feature
     that is often localized to a certain (sub)tree, and the capture
     block might be at a different location in the file.  To identify
     the tree whose view to capture, you can use 4 values: 
          local     use the tree in which the capture block is located
          global    make a global view, including all headings in the file
          "file:PATH-TO-FILE"
                    run column view at the top of this file
          "ID"      call column view in the tree that has an `:ID:'
                    property with the value label.  You can use
                    `M-x org-id-copy' to create a globally unique ID for
                    the current entry and copy it to the kill-ring.

`:hlines'
     When `t', insert an hline after every line.  When a number N,
     insert an hline before each headline with level `<= N'.

`:vlines'
     When set to `t', force column groups to get vertical lines.

`:maxlevel'
     When set to a number, don't capture entries below this level.

`:skip-empty-rows'
     When set to `t', skip rows where the only non-empty specifier of
     the column view is `ITEM'.


The following commands insert or update the dynamic block:

`C-c C-x i     (`org-insert-columns-dblock')'
     Insert a dynamic block capturing a column view.  You will be
     prompted for the scope or ID of the view.  

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     Update dynamic block at point.  The cursor needs to be in the
     `#+BEGIN' line of the dynamic block.  

`C-u C-c C-x C-u     (`org-update-all-dblocks')'
     Update all dynamic blocks (*note Dynamic blocks::).  This is
     useful if you have several clock table blocks, column-capturing
     blocks or other dynamic blocks in a buffer.

   You can add formulas to the column view table and you may add
plotting instructions in front of the table--these will survive an
update of the block.  If there is a `#+TBLFM:' after the table, the
table will actually be recalculated automatically after an update.

   An alternative way to capture and process property values into a
table is provided by Eric Schulte's `org-collector.el' which is a
contributed package(1).  It provides a general API to collect
properties from entries in a certain scope, and arbitrary Lisp
expressions to process these values before inserting them into a table
or a dynamic block.

   ---------- Footnotes ----------

   (1) Contributed packages are not part of Emacs, but are distributed
with the main distribution of Org (visit `http://orgmode.org').


File: org,  Node: Property API,  Prev: Column view,  Up: Properties and Columns

7.6 The Property API
====================

There is a full API for accessing and changing properties.  This API can
be used by Emacs Lisp programs to work with properties and to implement
features based on them.  For more information see *note Using the
property API::.


File: org,  Node: Dates and Times,  Next: Capture - Refile - Archive,  Prev: Properties and Columns,  Up: Top

8 Dates and times
*****************

To assist project planning, TODO items can be labeled with a date and/or
a time.  The specially formatted string carrying the date and time
information is called a _timestamp_ in Org mode.  This may be a little
confusing because timestamp is often used as indicating when something
was created or last changed.  However, in Org mode this term is used in
a much wider sense.

* Menu:

* Timestamps::                  Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps
* Deadlines and scheduling::    Planning your work
* Clocking work time::          Tracking how long you spend on a task
* Effort estimates::            Planning work effort in advance
* Relative timer::              Notes with a running timer
* Countdown timer::             Starting a countdown timer for a task


File: org,  Node: Timestamps,  Next: Creating timestamps,  Prev: Dates and Times,  Up: Dates and Times

8.1 Timestamps, deadlines, and scheduling
=========================================

A timestamp is a specification of a date (possibly with a time or a
range of times) in a special format, either `<2003-09-16 Tue>'(1) or
`<2003-09-16 Tue 09:39>' or `<2003-09-16 Tue 12:00-12:30>'(2).  A
timestamp can appear anywhere in the headline or body of an Org tree
entry.  Its presence causes entries to be shown on specific dates in the
agenda (*note Weekly/daily agenda::).  We distinguish:

PLAIN TIMESTAMP; EVENT; APPOINTMENT
     A simple timestamp just assigns a date/time to an item.  This is
     just like writing down an appointment or event in a paper agenda.
     In the timeline and agenda displays, the headline of an entry
     associated with a plain timestamp will be shown exactly on that
     date.

          * Meet Peter at the movies <2006-11-01 Wed 19:15>
          * Discussion on climate change <2006-11-02 Thu 20:00-22:00>

TIMESTAMP WITH REPEATER INTERVAL
     A timestamp may contain a _repeater interval_, indicating that it
     applies not only on the given date, but again and again after a
     certain interval of N days (d), weeks (w), months (m), or years
     (y).  The following will show up in the agenda every Wednesday:

          * Pick up Sam at school <2007-05-16 Wed 12:30 +1w>

DIARY-STYLE SEXP ENTRIES
     For more complex date specifications, Org mode supports using the
     special sexp diary entries implemented in the Emacs calendar/diary
     package(3).  For example with optional time

          * 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
            <%%(org-float t 4 2)>

TIME/DATE RANGE
     Two timestamps connected by `--' denote a range.  The headline
     will be shown on the first and last day of the range, and on any
     dates that are displayed and fall in the range.  Here is an
     example:

          ** Meeting in Amsterdam
             <2004-08-23 Mon>--<2004-08-26 Thu>

INACTIVE TIMESTAMP
     Just like a plain timestamp, but with square brackets instead of
     angular ones.  These timestamps are inactive in the sense that
     they do _not_ trigger an entry to show up in the agenda.

          * Gillian comes late for the fifth time [2006-11-01 Wed]


   ---------- Footnotes ----------

   (1) In this simplest form, the day name is optional when you type
the date yourself.  However, any dates inserted or modified by Org will
add that day name, for reading convenience.

   (2) This is inspired by the standard ISO 8601 date/time format.  To
use an alternative format, see *note Custom time format::.

   (3) When working with the standard diary sexp functions, you need to
be very careful with the order of the arguments.  That order depend
evilly on the variable `calendar-date-style' (or, for older Emacs
versions, `european-calendar-style').  For example, to specify a date
December 12, 2005, the call might look like `(diary-date 12 1 2005)' or
`(diary-date 1 12 2005)' or `(diary-date 2005 12 1)', depending on the
settings.  This has been the source of much confusion.  Org mode users
can resort to special versions of these functions like `org-date' or
`org-anniversary'.  These work just like the corresponding `diary-'
functions, but with stable ISO order of arguments (year, month, day)
wherever applicable, independent of the value of `calendar-date-style'.


File: org,  Node: Creating timestamps,  Next: Deadlines and scheduling,  Prev: Timestamps,  Up: Dates and Times

8.2 Creating timestamps
=======================

For Org mode to recognize timestamps, they need to be in the specific
format.  All commands listed below produce timestamps in the correct
format.

`C-c .     (`org-time-stamp')'
     Prompt for a date and insert a corresponding timestamp.  When the
     cursor is at an existing timestamp in the buffer, the command is
     used to modify this timestamp instead of inserting a new one.
     When this command is used twice in succession, a time range is
     inserted.  

`C-c !     (`org-time-stamp-inactive')'
     Like `C-c .', but insert an inactive timestamp that will not cause
     an agenda entry.  

`C-u C-c .'
`C-u C-c !'
     Like `C-c .' and `C-c !', but use the alternative format which
     contains date and time.  The default time can be rounded to
     multiples of 5 minutes, see the option
     `org-time-stamp-rounding-minutes'.  

`C-c C-c'
     Normalize timestamp, insert/fix day name if missing or wrong.  

`C-c <     (`org-date-from-calendar')'
     Insert a timestamp corresponding to the cursor date in the
     Calendar.  

`C-c >     (`org-goto-calendar')'
     Access the Emacs calendar for the current date.  If there is a
     timestamp in the current line, go to the corresponding date
     instead.  

`C-c C-o     (`org-open-at-point')'
     Access the agenda for the date given by the timestamp or -range at
     point (*note Weekly/daily agenda::).  

`S-<left>     (`org-timestamp-down-day')'
`S-<right>     (`org-timestamp-up-day')'
     Change date at cursor by one day.  These key bindings conflict with
     shift-selection and related modes (*note Conflicts::).  

`S-<up>     (`org-timestamp-up')'
`S-<down>     (`org-timestamp-down-down')'
     Change the item under the cursor in a timestamp.  The cursor can
     be on a year, month, day, hour or minute.  When the timestamp
     contains a time range like `15:30-16:30', modifying the first time
     will also shift the second, shifting the time block with constant
     length.  To change the length, modify the second time.  Note that
     if the cursor is in a headline and not at a timestamp, these same
     keys modify the priority of an item.  (*note Priorities::).  The
     key bindings also conflict with shift-selection and related modes
     (*note Conflicts::).  

`C-c C-y     (`org-evaluate-time-range')'
     Evaluate a time range by computing the difference between start
     and end.  With a prefix argument, insert result after the time
     range (in a table: into the following column).

* Menu:

* The date/time prompt::        How Org mode helps you entering date and time
* Custom time format::          Making dates look different


File: org,  Node: The date/time prompt,  Next: Custom time format,  Prev: Creating timestamps,  Up: Creating timestamps

8.2.1 The date/time prompt
--------------------------

When Org mode prompts for a date/time, the default is shown in default
date/time format, and the prompt therefore seems to ask for a specific
format.  But it will in fact accept any string containing some date
and/or time information, and it is really smart about interpreting your
input.  You can, for example, use `C-y' to paste a (possibly
multi-line) string copied from an email message.  Org mode will find
whatever information is in there and derive anything you have not
specified from the _default date and time_.  The default is usually the
current date and time, but when modifying an existing timestamp, or
when entering the second stamp of a range, it is taken from the stamp
in the buffer.  When filling in information, Org mode assumes that most
of the time you will want to enter a date in the future: if you omit
the month/year and the given day/month is before today, it will assume
that you mean a future date(1).  If the date has been automatically
shifted into the future, the time prompt will show this with `(=>F).'

   For example, let's assume that today is June 13, 2006.  Here is how
various inputs will be interpreted, the items filled in by Org mode are
in bold.

     3-2-5         => 2003-02-05
     2/5/3         => 2003-02-05
     14            => 2006-06-14
     12            => 2006-07-12
     2/5           => 2007-02-05
     Fri           => nearest Friday (default date or later)
     sep 15        => 2006-09-15
     feb 15        => 2007-02-15
     sep 12 9      => 2009-09-12
     12:45         => 2006-06-13 12:45
     22 sept 0:34  => 2006-09-22 0:34
     w4            => ISO week for of the current year 2006
     2012 w4 fri   => Friday of ISO week 4 in 2012
     2012-w04-5    => Same as above

   Furthermore you can specify a relative date by giving, as the
_first_ thing in the input: a plus/minus sign, a number and a letter
([dwmy]) to indicate change in days, weeks, months, or years.  With a
single plus or minus, the date is always relative to today.  With a
double plus or minus, it is relative to the default date.  If instead of
a single letter, you use the abbreviation of day name, the date will be
the Nth such day, e.g.

     +0            => today
     .             => today
     +4d           => four days from today
     +4            => same as above
     +2w           => two weeks from today
     ++5           => five days from default date
     +2tue         => second Tuesday from now.

   The function understands English month and weekday abbreviations.  If
you want to use unabbreviated names and/or other languages, configure
the variables `parse-time-months' and `parse-time-weekdays'.

   Not all dates can be represented in a given Emacs implementation.
By default Org mode forces dates into the compatibility range 1970-2037
which works on all Emacs implementations.  If you want to use dates
outside of this range, read the docstring of the variable
`org-read-date-force-compatible-dates'.

   You can specify a time range by giving start and end times or by
giving a start time and a duration (in HH:MM format).  Use one or two
dash(es) as the separator in the former case and use '+' as the
separator in the latter case, e.g.

     11am-1:15pm    => 11:00-13:15
     11am--1:15pm   => same as above
     11am+2:15      => same as above

   Parallel to the minibuffer prompt, a calendar is popped up(2).  When
you exit the date prompt, either by clicking on a date in the calendar,
or by pressing <RET>, the date selected in the calendar will be
combined with the information entered at the prompt.  You can control
the calendar fully from the minibuffer:

     <RET>           Choose date at cursor in calendar.
     mouse-1        Select date by clicking on it.
     S-<right>/<left>     One day forward/backward.
     S-<down>/<up>     One week forward/backward.
     M-S-<right>/<left>   One month forward/backward.
     > / <          Scroll calendar forward/backward by one month.
     M-v / C-v      Scroll calendar forward/backward by 3 months.

   The actions of the date/time prompt may seem complex, but I assure
you they will grow on you, and you will start getting annoyed by pretty
much any other way of entering a date/time out there.  To help you
understand what is going on, the current interpretation of your input
will be displayed live in the minibuffer(3).

   ---------- Footnotes ----------

   (1) See the variable `org-read-date-prefer-future'.  You may set
that variable to the symbol `time' to even make a time before now shift
the date to tomorrow.

   (2) If you don't need/want the calendar, configure the variable
`org-popup-calendar-for-date-prompt'.

   (3) If you find this distracting, turn the display of with
`org-read-date-display-live'.


File: org,  Node: Custom time format,  Prev: The date/time prompt,  Up: Creating timestamps

8.2.2 Custom time format
------------------------

Org mode uses the standard ISO notation for dates and times as it is
defined in ISO 8601.  If you cannot get used to this and require another
representation of date and time to keep you happy, you can get it by
customizing the variables `org-display-custom-times' and
`org-time-stamp-custom-formats'.

`C-c C-x C-t     (`org-toggle-time-stamp-overlays')'
     Toggle the display of custom formats for dates and times.

Org mode needs the default format for scanning, so the custom date/time
format does not _replace_ the default format--instead it is put _over_
the default format using text properties.  This has the following
consequences:
   * You cannot place the cursor onto a timestamp anymore, only before
     or after.

   * The `S-<up>/<down>' keys can no longer be used to adjust each
     component of a timestamp.  If the cursor is at the beginning of
     the stamp, `S-<up>/<down>' will change the stamp by one day, just
     like `S-<left>/<right>'.  At the end of the stamp, the time will
     be changed by one minute.

   * If the timestamp contains a range of clock times or a repeater,
     these will not be overlaid, but remain in the buffer as they were.

   * When you delete a timestamp character-by-character, it will only
     disappear from the buffer after _all_ (invisible) characters
     belonging to the ISO timestamp have been removed.

   * If the custom timestamp format is longer than the default and you
     are using dates in tables, table alignment will be messed up.  If
     the custom format is shorter, things do work as expected.


File: org,  Node: Deadlines and scheduling,  Next: Clocking work time,  Prev: Creating timestamps,  Up: Dates and Times

8.3 Deadlines and scheduling
============================

A timestamp may be preceded by special keywords to facilitate planning:

DEADLINE
     Meaning: the task (most likely a TODO item, though not
     necessarily) is supposed to be finished on that date.

     On the deadline date, the task will be listed in the agenda.  In
     addition, the agenda for _today_ will carry a warning about the
     approaching or missed deadline, starting
     `org-deadline-warning-days' before the due date, and continuing
     until the entry is marked DONE.  An example:

          *** TODO write article about the Earth for the Guide
              DEADLINE: <2004-02-29 Sun>
              The editor in charge is [[bbdb:Ford Prefect]]

     You can specify a different lead time for warnings for a specific
     deadlines using the following syntax.  Here is an example with a
     warning period of 5 days `DEADLINE: <2004-02-29 Sun -5d>'.

SCHEDULED
     Meaning: you are planning to start working on that task on the
     given date.

     The headline will be listed under the given date(1).  In addition,
     a reminder that the scheduled date has passed will be present in
     the compilation for _today_, until the entry is marked DONE, i.e.
     the task will automatically be forwarded until completed.

          *** TODO Call Trillian for a date on New Years Eve.
              SCHEDULED: <2004-12-25 Sat>

     Important: Scheduling an item in Org mode should not be understood
     in the same way that we understand scheduling a meeting.  Setting
     a date for a meeting is just a simple appointment, you should mark
     this entry with a simple plain timestamp, to get this item shown
     on the date where it applies.  This is a frequent misunderstanding
     by Org users.  In Org mode, scheduling means setting a date when
     you want to start working on an action item.

   You may use timestamps with repeaters in scheduling and deadline
entries.  Org mode will issue early and late warnings based on the
assumption that the timestamp represents the nearest instance of the
repeater.  However, the use of diary sexp entries like `<%%(org-float t
42)>' in scheduling and deadline timestamps is limited.  Org mode does
not know enough about the internals of each sexp function to issue
early and late warnings.  However, it will show the item on each day
where the sexp entry matches.

* Menu:

* Inserting deadline/schedule::  Planning items
* Repeated tasks::              Items that show up again and again

   ---------- Footnotes ----------

   (1) It will still be listed on that date after it has been marked
DONE.  If you don't like this, set the variable
`org-agenda-skip-scheduled-if-done'.


File: org,  Node: Inserting deadline/schedule,  Next: Repeated tasks,  Prev: Deadlines and scheduling,  Up: Deadlines and scheduling

8.3.1 Inserting deadlines or schedules
--------------------------------------

The following commands allow you to quickly insert(1) a deadline or to
schedule an item:

`C-c C-d     (`org-deadline')'
     Insert `DEADLINE' keyword along with a stamp.  The insertion will
     happen in the line directly following the headline.  Any CLOSED
     timestamp will be removed.  When called with a prefix arg, an
     existing deadline will be removed from the entry.  Depending on
     the variable `org-log-redeadline'(2), a note will be taken when
     changing an existing deadline.

`C-c C-s     (`org-schedule')'
     Insert `SCHEDULED' keyword along with a stamp.  The insertion will
     happen in the line directly following the headline.  Any CLOSED
     timestamp will be removed.  When called with a prefix argument,
     remove the scheduling date from the entry.  Depending on the
     variable `org-log-reschedule'(3), a note will be taken when
     changing an existing scheduling time.  

`C-c C-x C-k     (`org-mark-entry-for-agenda-action')'
     Mark the current entry for agenda action.  After you have marked
     the entry like this, you can open the agenda or the calendar to
     find an appropriate date.  With the cursor on the selected date,
     press `k s' or `k d' to schedule the marked item.  

`C-c / d     (`org-check-deadlines')'
     Create a sparse tree with all deadlines that are either past-due,
     or which will become due within `org-deadline-warning-days'.  With
     `C-u' prefix, show all deadlines in the file.  With a numeric
     prefix, check that many days.  For example, `C-1 C-c / d' shows
     all deadlines due tomorrow.  

`C-c / b     (`org-check-before-date')'
     Sparse tree for deadlines and scheduled items before a given date.  

`C-c / a     (`org-check-after-date')'
     Sparse tree for deadlines and scheduled items after a given date.

   Note that `org-schedule' and `org-deadline' supports setting the
date by indicating a relative time: e.g. +1d will set the date to the
next day after today, and -1w will set the date to the previous week
before any current timestamp.

   ---------- Footnotes ----------

   (1) The `SCHEDULED' and `DEADLINE' dates are inserted on the line
right below the headline.  Don't put any text between this line and the
headline.

   (2) with corresponding `#+STARTUP' keywords `logredeadline',
`lognoteredeadline', and `nologredeadline'

   (3) with corresponding `#+STARTUP' keywords `logreschedule',
`lognotereschedule', and `nologreschedule'


File: org,  Node: Repeated tasks,  Prev: Inserting deadline/schedule,  Up: Deadlines and scheduling

8.3.2 Repeated tasks
--------------------

Some tasks need to be repeated again and again.  Org mode helps to
organize such tasks using a so-called repeater in a DEADLINE, SCHEDULED,
or plain timestamp.  In the following example
     ** TODO Pay the rent
        DEADLINE: <2005-10-01 Sat +1m>
   the `+1m' is a repeater; the intended interpretation is that the task
has a deadline on <2005-10-01> and repeats itself every (one) month
starting from that time.  If you need both a repeater and a special
warning period in a deadline entry, the repeater should come first and
the warning period last: `DEADLINE: <2005-10-01 Sat +1m -3d>'.

   Deadlines and scheduled items produce entries in the agenda when
they are over-due, so it is important to be able to mark such an entry
as completed once you have done so.  When you mark a DEADLINE or a
SCHEDULE with the TODO keyword DONE, it will no longer produce entries
in the agenda.  The problem with this is, however, that then also the
_next_ instance of the repeated entry will not be active.  Org mode
deals with this in the following way: When you try to mark such an
entry DONE (using `C-c C-t'), it will shift the base date of the
repeating timestamp by the repeater interval, and immediately set the
entry state back to TODO(1).  In the example above, setting the state
to DONE would actually switch the date like this:

     ** TODO Pay the rent
        DEADLINE: <2005-11-01 Tue +1m>

   A timestamp(2) will be added under the deadline, to keep a record
that you actually acted on the previous instance of this deadline.

   As a consequence of shifting the base date, this entry will no
longer be visible in the agenda when checking past dates, but all
future instances will be visible.

   With the `+1m' cookie, the date shift will always be exactly one
month.  So if you have not paid the rent for three months, marking this
entry DONE will still keep it as an overdue deadline.  Depending on the
task, this may not be the best way to handle it.  For example, if you
forgot to call your father for 3 weeks, it does not make sense to call
him 3 times in a single day to make up for it.  Finally, there are tasks
like changing batteries which should always repeat a certain time after
the last time you did it.  For these tasks, Org mode has special
repeaters  `++' and `.+'.  For example:

     ** TODO Call Father
        DEADLINE: <2008-02-10 Sun ++1w>
        Marking this DONE will shift the date by at least one week,
        but also by as many weeks as it takes to get this date into
        the future.  However, it stays on a Sunday, even if you called
        and marked it done on Saturday.
     ** TODO Check the batteries in the smoke detectors
        DEADLINE: <2005-11-01 Tue .+1m>
        Marking this DONE will shift the date to one month after
        today.

   You may have both scheduling and deadline information for a specific
task--just make sure that the repeater intervals on both are the same.

   An alternative to using a repeater is to create a number of copies
of a task subtree, with dates shifted in each copy.  The command `C-c
C-x c' was created for this purpose, it is described in *note Structure
editing::.

   ---------- Footnotes ----------

   (1) In fact, the target state is taken from, in this sequence, the
`REPEAT_TO_STATE' property or the variable `org-todo-repeat-to-state'.
If neither of these is specified, the target state defaults to the
first state of the TODO state sequence.

   (2) You can change this using the option `org-log-repeat', or the
`#+STARTUP' options `logrepeat', `lognoterepeat', and `nologrepeat'.
With `lognoterepeat', you will also be prompted for a note.


File: org,  Node: Clocking work time,  Next: Effort estimates,  Prev: Deadlines and scheduling,  Up: Dates and Times

8.4 Clocking work time
======================

Org mode allows you to clock the time you spend on specific tasks in a
project.  When you start working on an item, you can start the clock.
When you stop working on that task, or when you mark the task done, the
clock is stopped and the corresponding time interval is recorded.  It
also computes the total time spent on each subtree of a project.  And it
remembers a history or tasks recently clocked, to that you can jump
quickly between a number of tasks absorbing your time.

   To save the clock history across Emacs sessions, use
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
   When you clock into a new task after resuming Emacs, the incomplete
clock(1) will be found (*note Resolving idle time::) and you will be
prompted about what to do with it.

* Menu:

* Clocking commands::           Starting and stopping a clock
* The clock table::             Detailed reports
* Resolving idle time::         Resolving time when you've been idle

   ---------- Footnotes ----------

   (1) To resume the clock under the assumption that you have worked on
this task while outside Emacs, use `(setq org-clock-persist t)'.


File: org,  Node: Clocking commands,  Next: The clock table,  Prev: Clocking work time,  Up: Clocking work time

8.4.1 Clocking commands
-----------------------

`C-c C-x C-i     (`org-clock-in')'
     Start the clock on the current item (clock-in).  This inserts the
     CLOCK keyword together with a timestamp.  If this is not the first
     clocking of this item, the multiple CLOCK lines will be wrapped
     into a `:LOGBOOK:' drawer (see also the variable
     `org-clock-into-drawer').  You can also overrule the setting of
     this variable for a subtree by setting a `CLOCK_INTO_DRAWER' or
     `LOG_INTO_DRAWER' property.  When called with a `C-u' prefix
     argument, select the task from a list of recently clocked tasks.
     With two `C-u C-u' prefixes, clock into the task at point and mark
     it as the default task.  The default task will always be available
     when selecting a clocking task, with letter `d'.
     While the clock is running, the current clocking time is shown in
     the mode line, along with the title of the task.  The clock time
     shown will be all time ever clocked for this task and its
     children.  If the task has an effort estimate (*note Effort
     estimates::), the mode line displays the current clocking time
     against it(1)  If the task is a repeating one (*note Repeated
     tasks::), only the time since the last reset of the task (2) will
     be shown.  More control over what time is shown can be exercised
     with the `CLOCK_MODELINE_TOTAL' property.  It may have the values
     `current' to show only the current clocking instance, `today' to
     show all time clocked on this tasks today (see also the variable
     `org-extend-today-until'), `all' to include all time, or `auto'
     which is the default(3).
     Clicking with `mouse-1' onto the mode line entry will pop up a
     menu with clocking options.  

`C-c C-x C-o     (`org-clock-out')'
     Stop the clock (clock-out).  This inserts another timestamp at the
     same location where the clock was last started.  It also directly
     computes the resulting time in inserts it after the time range as
     `=> HH:MM'.  See the variable `org-log-note-clock-out' for the
     possibility to record an additional note together with the
     clock-out timestamp(4).  

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     Update the effort estimate for the current clock task.  

`C-c C-c  or  C-c C-y     (`org-evaluate-time-range')'
     Recompute the time interval after changing one of the timestamps.
     This is only necessary if you edit the timestamps directly.  If
     you change them with `S-<cursor>' keys, the update is automatic.  

`C-S-<up/down>     (`org-clock-timestamps-up/down')'
     On `CLOCK' log lines, increase/decrease both timestamps at the same
     time so that duration keeps the same.  

`C-c C-t     (`org-todo')'
     Changing the TODO state of an item to DONE automatically stops the
     clock if it is running in this same item.  

`C-c C-x C-x     (`org-clock-cancel')'
     Cancel the current clock.  This is useful if a clock was started by
     mistake, or if you ended up working on something else.  

`C-c C-x C-j     (`org-clock-goto')'
     Jump to the headline of the currently clocked in task.  With a
     `C-u' prefix arg, select the target task from a list of recently
     clocked tasks.  

`C-c C-x C-d     (`org-clock-display')'
     Display time summaries for each subtree in the current buffer.
     This puts overlays at the end of each headline, showing the total
     time recorded under that heading, including the time of any
     subheadings.  You can use visibility cycling to study the tree,
     but the overlays disappear when you change the buffer (see
     variable `org-remove-highlights-with-change') or press `C-c C-c'.

   The `l' key may be used in the timeline (*note Timeline::) and in
the agenda (*note Weekly/daily agenda::) to show which tasks have been
worked on or closed during a day.

   ---------- Footnotes ----------

   (1) To add an effort estimate "on the fly", hook a function doing
this to `org-clock-in-prepare-hook'.

   (2) as recorded by the `LAST_REPEAT' property

   (3) See also the variable `org-clock-modeline-total'.

   (4) The corresponding in-buffer setting is: `#+STARTUP:
lognoteclock-out'


File: org,  Node: The clock table,  Next: Resolving idle time,  Prev: Clocking commands,  Up: Clocking work time

8.4.2 The clock table
---------------------

Org mode can produce quite complex reports based on the time clocking
information.  Such a report is called a _clock table_, because it is
formatted as one or several Org tables.

`C-c C-x C-r     (`org-clock-report')'
     Insert a dynamic block (*note Dynamic blocks::) containing a clock
     report as an Org mode table into the current file.  When the
     cursor is at an existing clock table, just update it.  When called
     with a prefix argument, jump to the first clock report in the
     current document and update it.  The clock table always includes
     also trees with `:ARCHIVE:' tag.  

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     Update dynamic block at point.  The cursor needs to be in the
     `#+BEGIN' line of the dynamic block.  

`C-u C-c C-x C-u'
     Update all dynamic blocks (*note Dynamic blocks::).  This is
     useful if you have several clock table blocks in a buffer.  

`S-<left>'
`S-<right>     (`org-clocktable-try-shift')'
     Shift the current `:block' interval and update the table.  The
     cursor needs to be in the `#+BEGIN: clocktable' line for this
     command.  If `:block' is `today', it will be shifted to `today-1'
     etc.

   Here is an example of the frame for a clock table as it is inserted
into the buffer with the `C-c C-x C-r' command:

     #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
     #+END: clocktable
   The `BEGIN' line and specify a number of options to define the scope,
structure, and formatting of the report.  Defaults for all these
options can be configured in the variable `org-clocktable-defaults'.

First there are options that determine which clock entries are to be
selected:
     :maxlevel    Maximum level depth to which times are listed in the table.
                  Clocks at deeper levels will be summed into the upper level.
     :scope       The scope to consider.  This can be any of the following:
                  nil        the current buffer or narrowed region
                  file       the full current buffer
                  subtree    the subtree where the clocktable is located
                  treeN      the surrounding level N tree, for example `tree3'
                  tree       the surrounding level 1 tree
                  agenda     all agenda files
                  ("file"..) scan these files
                  file-with-archives    current file and its archives
                  agenda-with-archives  all agenda files, including archives
     :block       The time block to consider.  This block is specified either
                  absolute, or relative to the current time and may be any of
                  these formats:
                  2007-12-31    New year eve 2007
                  2007-12       December 2007
                  2007-W50      ISO-week 50 in 2007
                  2007-Q2       2nd quarter in 2007
                  2007          the year 2007
                  today, yesterday, today-N          a relative day
                  thisweek, lastweek, thisweek-N     a relative week
                  thismonth, lastmonth, thismonth-N  a relative month
                  thisyear, lastyear, thisyear-N     a relative year
                  Use `S-<left>/<right>' keys to shift the time interval.
     :tstart      A time string specifying when to start considering times.
     :tend        A time string specifying when to stop considering times.
     :step        `week' or `day', to split the table into chunks.
                  To use this, `:block' or `:tstart', `:tend' are needed.
     :stepskip0   Do not show steps that have zero time.
     :fileskip0   Do not show table sections from files which did not contribute.
     :tags        A tags match to select entries that should contribute.  See
                  *note Matching tags and properties:: for the match syntax.

   Then there are options which determine the formatting of the table.
There options are interpreted by the function
`org-clocktable-write-default', but you can specify your own function
using the `:formatter' parameter.
     :emphasize   When `t', emphasize level one and level two items.
     :lang        Language(1) to use for descriptive cells like "Task".
     :link        Link the item headlines in the table to their origins.
     :narrow      An integer to limit the width of the headline column in
                  the org table.  If you write it like `50!', then the
                  headline will also be shortened in export.
     :indent      Indent each headline field according to its level.
     :tcolumns    Number of columns to be used for times.  If this is smaller
                  than `:maxlevel', lower levels will be lumped into one column.
     :level       Should a level number column be included?
     :compact     Abbreviation for `:level nil :indent t :narrow 40! :tcolumns 1'
                  All are overwritten except if there is an explicit `:narrow'
     :timestamp   A timestamp for the entry, when available.  Look for SCHEDULED,
                  DEADLINE, TIMESTAMP and TIMESTAMP_IA, in this order.
     :properties  List of properties that should be shown in the table.  Each
                  property will get its own column.
     :inherit-props When this flag is `t', the values for `:properties' will be inherited.
     :formula     Content of a `#+TBLFM' line to be added and evaluated.
                  As a special case, `:formula %' adds a column with % time.
                  If you do not specify a formula here, any existing formula
                  below the clock table will survive updates and be evaluated.
     :formatter   A function to format clock data and insert it into the buffer.
   To get a clock summary of the current level 1 tree, for the current
day, you could write
     #+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
     #+END: clocktable
   and to use a specific time range you could write(2)
     #+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                         :tend "<2006-08-10 Thu 12:00>"
     #+END: clocktable
   A summary of the current subtree with % times would be
     #+BEGIN: clocktable :scope subtree :link t :formula %
     #+END: clocktable
   A horizontally compact representation of everything clocked during
last week would be
     #+BEGIN: clocktable :scope agenda :block lastweek :compact t
     #+END: clocktable

   ---------- Footnotes ----------

   (1) Language terms can be set through the variable
`org-clock-clocktable-language-setup'.

   (2) Note that all parameters must be specified in a single line--the
line is broken here only to fit it into the manual.


File: org,  Node: Resolving idle time,  Prev: The clock table,  Up: Clocking work time

8.4.3 Resolving idle time
-------------------------

If you clock in on a work item, and then walk away from your
computer--perhaps to take a phone call--you often need to "resolve" the
time you were away by either subtracting it from the current clock, or
applying it to another one.

   By customizing the variable `org-clock-idle-time' to some integer,
such as 10 or 15, Emacs can alert you when you get back to your
computer after being idle for that many minutes(1), and ask what you
want to do with the idle time.  There will be a question waiting for
you when you get back, indicating how much idle time has passed
(constantly updated with the current amount), as well as a set of
choices to correct the discrepancy:

`k'
     To keep some or all of the minutes and stay clocked in, press `k'.
     Org will ask how many of the minutes to keep.  Press <RET> to keep
     them all, effectively changing nothing, or enter a number to keep
     that many minutes.

`K'
     If you use the shift key and press `K', it will keep however many
     minutes you request and then immediately clock out of that task.
     If you keep all of the minutes, this is the same as just clocking
     out of the current task.

`s'
     To keep none of the minutes, use `s' to subtract all the away time
     from the clock, and then check back in from the moment you
     returned.

`S'
     To keep none of the minutes and just clock out at the start of the
     away time, use the shift key and press `S'.  Remember that using
     shift will always leave you clocked out, no matter which option
     you choose.

`C'
     To cancel the clock altogether, use `C'.  Note that if instead of
     canceling you subtract the away time, and the resulting clock
     amount is less than a minute, the clock will still be canceled
     rather than clutter up the log with an empty entry.

   What if you subtracted those away minutes from the current clock,
and now want to apply them to a new clock?  Simply clock in to any task
immediately after the subtraction.  Org will notice that you have
subtracted time "on the books", so to speak, and will ask if you want
to apply those minutes to the next task you clock in on.

   There is one other instance when this clock resolution magic occurs.
Say you were clocked in and hacking away, and suddenly your cat chased
a mouse who scared a hamster that crashed into your UPS's power button!
You suddenly lose all your buffers, but thanks to auto-save you still
have your recent Org mode changes, including your last clock in.

   If you restart Emacs and clock into any task, Org will notice that
you have a dangling clock which was never clocked out from your last
session.  Using that clock's starting time as the beginning of the
unaccounted-for period, Org will ask how you want to resolve that time.
The logic and behavior is identical to dealing with away time due to
idleness; it is just happening due to a recovery event rather than a
set amount of idle time.

   You can also check all the files visited by your Org agenda for
dangling clocks at any time using `M-x org-resolve-clocks'.

   ---------- Footnotes ----------

   (1) On computers using Mac OS X, idleness is based on actual user
idleness, not just Emacs' idle time.  For X11, you can install a
utility program `x11idle.c', available in the UTILITIES directory of
the Org git distribution, to get the same general treatment of
idleness.  On other systems, idle time refers to Emacs idle time only.


File: org,  Node: Effort estimates,  Next: Relative timer,  Prev: Clocking work time,  Up: Dates and Times

8.5 Effort estimates
====================

If you want to plan your work in a very detailed way, or if you need to
produce offers with quotations of the estimated work effort, you may
want to assign effort estimates to entries.  If you are also clocking
your work, you may later want to compare the planned effort with the
actual working time, a great way to improve planning estimates.  Effort
estimates are stored in a special property `Effort'(1).  You can set
the effort for an entry with the following commands:

`C-c C-x e     (`org-set-effort')'
     Set the effort estimate for the current entry.  With a numeric
     prefix argument, set it to the Nth allowed value (see below).
     This command is also accessible from the agenda with the `e' key.  

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     Modify the effort estimate of the item currently being clocked.

   Clearly the best way to work with effort estimates is through column
view (*note Column view::).  You should start by setting up discrete
values for effort estimates, and a `COLUMNS' format that displays these
values together with clock sums (if you want to clock your time).  For
a specific buffer you can use

     #+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
     #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

or, even better, you can set up these values globally by customizing the
variables `org-global-properties' and `org-columns-default-format'.  In
particular if you want to use this setup also in the agenda, a global
setup may be advised.

   The way to assign estimates to individual items is then to switch to
column mode, and to use `S-<right>' and `S-<left>' to change the value.
The values you enter will immediately be summed up in the hierarchy.
In the column next to it, any clocked time will be displayed.

   If you switch to column view in the daily/weekly agenda, the effort
column will summarize the estimated work effort for each day(2), and
you can use this to find space in your schedule.  To get an overview of
the entire part of the day that is committed, you can set the option
`org-agenda-columns-add-appointments-to-effort-sum'.  The appointments
on a day that take place over a specified time interval will then also
be added to the load estimate of the day.

   Effort estimates can be used in secondary agenda filtering that is
triggered with the `/' key in the agenda (*note Agenda commands::).  If
you have these estimates defined consistently, two or three key presses
will narrow down the list to stuff that fits into an available time
slot.

   ---------- Footnotes ----------

   (1) You may change the property being used with the variable
`org-effort-property'.

   (2) Please note the pitfalls of summing hierarchical data in a flat
list (*note Agenda column view::).


File: org,  Node: Relative timer,  Next: Countdown timer,  Prev: Effort estimates,  Up: Dates and Times

8.6 Taking notes with a relative timer
======================================

When taking notes during, for example, a meeting or a video viewing, it
can be useful to have access to times relative to a starting time.  Org
provides such a relative timer and make it easy to create timed notes.

`C-c C-x .     (`org-timer')'
     Insert a relative time into the buffer.  The first time you use
     this, the timer will be started.  When called with a prefix
     argument, the timer is restarted.  

`C-c C-x -     (`org-timer-item')'
     Insert a description list item with the current relative time.
     With a prefix argument, first reset the timer to 0.  

`M-<RET>     (`org-insert-heading')'
     Once the timer list is started, you can also use `M-<RET>' to
     insert new timer items.  

`C-c C-x ,'
     Pause the timer, or continue it if it is already paused
     (`org-timer-pause-or-continue').  

`C-u C-c C-x ,'
     Stop the timer.  After this, you can only start a new timer, not
     continue the old one.  This command also removes the timer from
     the mode line.  

`C-c C-x 0     (`org-timer-start')'
     Reset the timer without inserting anything into the buffer.  By
     default, the timer is reset to 0.  When called with a `C-u'
     prefix, reset the timer to specific starting offset.  The user is
     prompted for the offset, with a default taken from a timer string
     at point, if any, So this can be used to restart taking notes
     after a break in the process.  When called with a double prefix
     argument `C-u C-u', change all timer strings in the active region
     by a certain amount.  This can be used to fix timer strings if the
     timer was not started at exactly the right moment.


File: org,  Node: Countdown timer,  Prev: Relative timer,  Up: Dates and Times

8.7 Countdown timer
===================

Calling `org-timer-set-timer' from an Org mode buffer runs a countdown
timer.  Use `;' from agenda buffers, <C-c C-x ;> everywhere else.

   `org-timer-set-timer' prompts the user for a duration and displays a
countdown timer in the modeline.  `org-timer-default-timer' sets the
default countdown value.  Giving a prefix numeric argument overrides
this default value.


File: org,  Node: Capture - Refile - Archive,  Next: Agenda Views,  Prev: Dates and Times,  Up: Top

9 Capture - Refile - Archive
****************************

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with
them.  Org does this using a process called capture.  It also can store
files related to a task (attachments) in a special directory.  Once in
the system, tasks and projects need to be moved around.  Moving
completed project trees to an archive file keeps the system compact and
fast.

* Menu:

* Capture::                     Capturing new stuff
* Attachments::                 Add files to tasks
* RSS Feeds::                   Getting input from RSS feeds
* Protocols::                   External (e.g. Browser) access to Emacs and Org
* Refiling notes::              Moving a tree from one place to another
* Archiving::                   What to do with finished projects


File: org,  Node: Capture,  Next: Attachments,  Prev: Capture - Refile - Archive,  Up: Capture - Refile - Archive

9.1 Capture
===========

Org's method for capturing new items is heavily inspired by John Wiegley
excellent remember package.  Up to version 6.36 Org used a special setup
for `remember.el'.  `org-remember.el' is still part of Org mode for
backward compatibility with existing setups.  You can find the
documentation for org-remember at `http://orgmode.org/org-remember.pdf'.

   The new capturing setup described here is preferred and should be
used by new users.  To convert your `org-remember-templates', run the
command
     M-x org-capture-import-remember-templates <RET>
   and then customize the new variable with `M-x customize-variable
org-capture-templates', check the result, and save the customization.
You can then use both remember and capture until you are familiar with
the new mechanism.

   Capture lets you quickly store notes with little interruption of
your work flow.  The basic process of capturing is very similar to
remember, but Org does enhance it with templates and more.

* Menu:

* Setting up capture::          Where notes will be stored
* Using capture::               Commands to invoke and terminate capture
* Capture templates::           Define the outline of different note types


File: org,  Node: Setting up capture,  Next: Using capture,  Prev: Capture,  Up: Capture

9.1.1 Setting up capture
------------------------

The following customization sets a default target file for notes, and
defines a global key(1)  for capturing new material.

     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)

   ---------- Footnotes ----------

   (1) Please select your own key, `C-c c' is only a suggestion.


File: org,  Node: Using capture,  Next: Capture templates,  Prev: Setting up capture,  Up: Capture

9.1.2 Using capture
-------------------

`C-c c     (`org-capture')'
     Call the command `org-capture'.  Note that this keybinding is
     global and not active by default - you need to install it.  If you
     have templates defined *note Capture templates::, it will offer
     these templates for selection or use a new Org outline node as the
     default template.  It will insert the template into the target
     file and switch to an indirect buffer narrowed to this new node.
     You may then insert the information you want.

`C-c C-c     (`org-capture-finalize')'
     Once you have finished entering information into the capture
     buffer, `C-c C-c' will return you to the window configuration
     before the capture process, so that you can resume your work
     without further distraction.  When called with a prefix arg,
     finalize and then jump to the captured item.

`C-c C-w     (`org-capture-refile')'
     Finalize the capture process by refiling (*note Refiling notes::)
     the note to a different place.  Please realize that this is a
     normal refiling command that will be executed--so the cursor
     position at the moment you run this command is important.  If you
     have inserted a tree with a parent and children, first move the
     cursor back to the parent.  Any prefix argument given to this
     command will be passed on to the `org-refile' command.

`C-c C-k     (`org-capture-kill')'
     Abort the capture process and return to the previous state.


   You can also call `org-capture' in a special way from the agenda,
using the `k c' key combination.  With this access, any timestamps
inserted by the selected capture template will default to the cursor
date in the agenda, rather than to the current date.

   To find the locations of the last stored capture, use `org-capture'
with prefix commands:

`C-u C-c c'
     Visit the target location of a capture template.  You get to
     select the template in the usual way.  

`C-u C-u C-c c'
     Visit the last stored capture item in its buffer.


File: org,  Node: Capture templates,  Prev: Using capture,  Up: Capture

9.1.3 Capture templates
-----------------------

You can use templates for different types of capture items, and for
different target locations.  The easiest way to create such templates is
through the customize interface.

`C-c c C'
     Customize the variable `org-capture-templates'.

   Before we give the formal description of template definitions, let's
look at an example.  Say you would like to use one template to create
general TODO entries, and you want to put these entries under the
heading `Tasks' in your file `~/org/gtd.org'.  Also, a date tree in the
file `journal.org' should capture journal entries.  A possible
configuration would look like:

     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")))

If you then press `C-c c t', Org will prepare the template for you like
this:
     * TODO
       [[file:LINK TO WHERE YOU INITIATED CAPTURE]]

During expansion of the template, `%a' has been replaced by a link to
the location from where you called the capture command.  This can be
extremely useful for deriving tasks from emails, for example.  You fill
in the task definition, press `C-c C-c' and Org returns you to the same
place where you started the capture process.

   To define special keys to capture to a particular template without
going through the interactive template selection, you can create your
key binding like this:

     (define-key global-map "\C-cx"
        (lambda () (interactive) (org-capture nil "x")))

* Menu:

* Template elements::           What is needed for a complete template entry
* Template expansion::          Filling in information about time and context


File: org,  Node: Template elements,  Next: Template expansion,  Prev: Capture templates,  Up: Capture templates

9.1.3.1 Template elements
.........................

Now lets look at the elements of a template definition.  Each entry in
`org-capture-templates' is a list with the following items:

KEYS
     The keys that will select the template, as a string, characters
     only, for example `"a"' for a template to be selected with a
     single key, or `"bt"' for selection with two keys.  When using
     several keys, keys using the same prefix key must be sequential in
     the list and preceded by a 2-element entry explaining the prefix
     key, for example
                   ("b" "Templates for marking stuff to buy")
     If you do not define a template for the `C' key, this key will be
     used to open the customize buffer for this complex variable.

DESCRIPTION
     A short string describing the template, which will be shown during
     selection.

TYPE
     The type of entry, a symbol.  Valid values are:
    `entry'
          An Org mode node, with a headline.  Will be filed as the
          child of the target entry or as a top-level entry.  The
          target file should be an Org mode file.

    `item'
          A plain list item, placed in the first plain  list at the
          target location.  Again the target file should be an Org file.

    `checkitem'
          A checkbox item.  This only differs from the plain list item
          by the default template.

    `table-line'
          a new line in the first table at the target location.  Where
          exactly the line will be inserted depends on the properties
          `:prepend' and `:table-line-pos' (see below).

    `plain'
          Text to be inserted as it is.

TARGET
     Specification of where the captured item should be placed.  In Org
     mode files, targets usually define a node.  Entries will become
     children of this node.  Other types will be added to the table or
     list in the body of this node.  Most target specifications contain
     a file name.  If that file name is the empty string, it defaults
     to `org-default-notes-file'.  A file can also be given as a
     variable, function, or Emacs Lisp form.

     Valid values are:
    `(file "path/to/file")'
          Text will be placed at the beginning or end of that file.

    `(id "id of existing org entry")'
          Filing as child of this entry, or in the body of the entry.

    `(file+headline "path/to/file" "node headline")'
          Fast configuration if the target heading is unique in the
          file.

    `(file+olp "path/to/file" "Level 1 heading" "Level 2" ...)'
          For non-unique headings, the full path is safer.

    `(file+regexp  "path/to/file" "regexp to find location")'
          Use a regular expression to position the cursor.

    `(file+datetree "path/to/file")'
          Will create a heading in a date tree for today's date.

    `(file+datetree+prompt "path/to/file")'
          Will create a heading in a date tree, but will prompt for the
          date.

    `(file+function "path/to/file" function-finding-location)'
          A function to find the right location in the file.

    `(clock)'
          File to the entry that is currently being clocked.

    `(function function-finding-location)'
          Most general way, write your own function to find both file
          and location.

TEMPLATE
     The template for creating the capture item.  If you leave this
     empty, an appropriate default template will be used.  Otherwise
     this is a string with escape codes, which will be replaced
     depending on time and context of the capture call.  The string
     with escapes may be loaded from a template file, using the special
     syntax `(file "path/to/template")'.  See below for more details.

PROPERTIES
     The rest of the entry is a property list of additional options.
     Recognized properties are:
    `:prepend'
          Normally new captured information will be appended at the
          target location (last child, last table line, last list
          item...).  Setting this property will change that.

    `:immediate-finish'
          When set, do not offer to edit the information, just file it
          away immediately.  This makes sense if the template only needs
          information that can be added automatically.

    `:empty-lines'
          Set this to the number of lines to insert before and after
          the new item.  Default 0, only common other value is 1.

    `:clock-in'
          Start the clock in this item.

    `:clock-keep'
          Keep the clock running when filing the captured entry.

    `:clock-resume'
          If starting the capture interrupted a clock, restart that
          clock when finished with the capture.  Note that
          `:clock-keep' has precedence over `:clock-resume'.  When
          setting both to `t', the current clock will run and the
          previous one will not be resumed.

    `:unnarrowed'
          Do not narrow the target buffer, simply show the full buffer.
          Default is to narrow it so that you only see the new material.

    `:table-line-pos'
          Specification of the location in the table where the new line
          should be inserted.  It should be a string like `"II-3"'
          meaning that the new line should become the third line before
          the second horizontal separator line.

    `:kill-buffer'
          If the target file was not yet visited when capture was
          invoked, kill the buffer again after capture is completed.


File: org,  Node: Template expansion,  Prev: Template elements,  Up: Capture templates

9.1.3.2 Template expansion
..........................

In the template itself, special `%'-escapes(1)  allow dynamic insertion
of content.  The templates are expanded in the order given here:

     %[FILE]     insert the contents of the file given by FILE.
     %(SEXP)     evaluate Elisp SEXP and replace with the result.
     %<...>      the result of format-time-string on the ... format specification.
     %t          timestamp, date only.
     %T          timestamp with date and time.
     %u, %U      like the above, but inactive timestamps.
     %a          annotation, normally the link created with `org-store-link'.
     %i          initial content, the region when capture is called while the
                 region is active.
                 The entire text will be indented like `%i' itself.
     %A          like `%a', but prompt for the description part.
     %c          Current kill ring head.
     %x          Content of the X clipboard.
     %k          title of the currently clocked task.
     %K          link to the currently clocked task.
     %n          user name (taken from `user-full-name').
     %f          file visited by current buffer when org-capture was called.
     %F          full path of the file or directory visited by current buffer.
     %:keyword   specific information for certain link types, see below.
     %^g         prompt for tags, with completion on tags in target file.
     %^G         prompt for tags, with completion all tags in all agenda files.
     %^t         like `%t', but prompt for date.  Similarly `%^T', `%^u', `%^U'.
                 You may define a prompt like `%^{Birthday}t'.
     %^C         Interactive selection of which kill or clip to use.
     %^L         Like `%^C', but insert as link.
     %^{PROP}p   Prompt the user for a value for property PROP.
     %^{PROMPT}  prompt the user for a string and replace this sequence with it.
                 You may specify a default value and a completion table with
                 %^{prompt|default|completion2|completion3...}.
                 The arrow keys access a prompt-specific history.

For specific link types, the following keywords will be defined(2):

     Link type               |  Available keywords
     ------------------------+----------------------------------------------
     bbdb                    |  %:name %:company
     irc                     |  %:server %:port %:nick
     vm, wl, mh, mew, rmail  |  %:type %:subject %:message-id
                             |  %:from %:fromname %:fromaddress
                             |  %:to   %:toname   %:toaddress
                             |  %:date (message date header field)
                             |  %:date-timestamp (date as active timestamp)
                             |  %:date-timestamp-inactive (date as inactive timestamp)
                             |  %:fromto (either "to NAME" or "from NAME")(3)
     gnus                    |  %:group, for messages also all email fields
     w3, w3m                 |  %:url
     info                    |  %:file %:node
     calendar                |  %:date

To place the cursor after template expansion use:

     %?          After completing the template, position cursor here.

   ---------- Footnotes ----------

   (1) If you need one of these sequences literally, escape the `%'
with a backslash.

   (2) If you define your own link types (*note Adding hyperlink
types::), any property you store with `org-store-link-props' can be
accessed in capture templates in a similar way.

   (3) This will always be the other, not the user.  See the variable
`org-from-is-user-regexp'.


File: org,  Node: Attachments,  Next: RSS Feeds,  Prev: Capture,  Up: Capture - Refile - Archive

9.2 Attachments
===============

It is often useful to associate reference material with an outline
node/task.  Small chunks of plain text can simply be stored in the
subtree of a project.  Hyperlinks (*note Hyperlinks::) can establish
associations with files that live elsewhere on your computer or in the
cloud, like emails or source code files belonging to a project.
Another method is attachments, which are files located in a directory
belonging to an outline node.  Org uses directories named by the unique
ID of each entry.  These directories are located in the `data'
directory which lives in the same directory where your Org file
lives(1).  If you initialize this directory with `git init', Org will
automatically commit changes when it sees them.  The attachment system
has been contributed to Org by John Wiegley.

   In cases where it seems better to do so, you can also attach a
directory of your choice to an entry.  You can also make children
inherit the attachment directory from a parent, so that an entire
subtree uses the same attached directory.

The following commands deal with attachments:

`C-c C-a     (`org-attach')'
     The dispatcher for commands related to the attachment system.
     After these keys, a list of commands is displayed and you must
     press an additional key to select a command:

    `a     (`org-attach-attach')'
          Select a file and move it into the task's attachment
          directory.  The file will be copied, moved, or linked,
          depending on `org-attach-method'.  Note that hard links are
          not supported on all systems.

    `c/m/l'
          Attach a file using the copy/move/link method.  Note that
          hard links are not supported on all systems.

    `n     (`org-attach-new')'
          Create a new attachment as an Emacs buffer.

    `z     (`org-attach-sync')'
          Synchronize the current task with its attachment directory,
          in case you added attachments yourself.

    `o     (`org-attach-open')'
          Open current task's attachment.  If there is more than one,
          prompt for a file name first.  Opening will follow the rules
          set by `org-file-apps'.  For more details, see the
          information on following hyperlinks (*note Handling links::).

    `O     (`org-attach-open-in-emacs')'
          Also open the attachment, but force opening the file in Emacs.

    `f     (`org-attach-reveal')'
          Open the current task's attachment directory.

    `F     (`org-attach-reveal-in-emacs')'
          Also open the directory, but force using `dired' in Emacs.

    `d     (`org-attach-delete-one')'
          Select and delete a single attachment.

    `D     (`org-attach-delete-all')'
          Delete all of a task's attachments.  A safer way is to open
          the directory in `dired' and delete from there.

    `s     (`org-attach-set-directory')'
          Set a specific directory as the entry's attachment directory.
          This works by putting the directory path into the
          `ATTACH_DIR' property.

    `i     (`org-attach-set-inherit')'
          Set the `ATTACH_DIR_INHERIT' property, so that children will
          use the same directory for attachments as the parent does.

   ---------- Footnotes ----------

   (1) If you move entries or Org files from one directory to another,
you may want to configure `org-attach-directory' to contain an absolute
path.


File: org,  Node: RSS Feeds,  Next: Protocols,  Prev: Attachments,  Up: Capture - Refile - Archive

9.3 RSS feeds
=============

Org can add and change entries based on information found in RSS feeds
and Atom feeds.  You could use this to make a task out of each new
podcast in a podcast feed.  Or you could use a phone-based
note-creating service on the web to import tasks into Org.  To access
feeds, configure the variable `org-feed-alist'.  The docstring of this
variable has detailed information.  Here is just an example:

     (setq org-feed-alist
          '(("Slashdot"
              "http://rss.slashdot.org/Slashdot/slashdot"
              "~/txt/org/feeds.org" "Slashdot Entries")))

will configure that new items from the feed provided by
`rss.slashdot.org' will result in new entries in the file
`~/org/feeds.org' under the heading `Slashdot Entries', whenever the
following command is used:

`C-c C-x g     (`org-feed-update-all')'

`C-c C-x g'
     Collect items from the feeds configured in `org-feed-alist' and
     act upon them.  

`C-c C-x G     (`org-feed-goto-inbox')'
     Prompt for a feed name and go to the inbox configured for this
     feed.

   Under the same headline, Org will create a drawer `FEEDSTATUS' in
which it will store information about the status of items in the feed,
to avoid adding the same item several times.  You should add
`FEEDSTATUS' to the list of drawers in that file:

     #+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS

   For more information, including how to read atom feeds, see
`org-feed.el' and the docstring of `org-feed-alist'.


File: org,  Node: Protocols,  Next: Refiling notes,  Prev: RSS Feeds,  Up: Capture - Refile - Archive

9.4 Protocols for external access
=================================

You can set up Org for handling protocol calls from outside
applications that are passed to Emacs through the `emacsserver'.  For
example, you can configure bookmarks in your web browser to send a link
to the current page to Org and create a note from it using capture
(*note Capture::).  Or you could create a bookmark that will tell Emacs
to open the local source file of a remote website you are looking at
with the browser.  See
`http://orgmode.org/worg/org-contrib/org-protocol.php' for detailed
documentation and setup instructions.


File: org,  Node: Refiling notes,  Next: Archiving,  Prev: Protocols,  Up: Capture - Refile - Archive

9.5 Refiling notes
==================

When reviewing the captured data, you may want to refile some of the
entries into a different list, for example into a project.  Cutting,
finding the right location, and then pasting the note is cumbersome.
To simplify this process, you can use the following special command:

`C-c C-w     (`org-refile')'
     Refile the entry or region at point.  This command offers possible
     locations for refiling the entry and lets you select one with
     completion.  The item (or all items in the region) is filed below
     the target heading as a subitem.  Depending on
     `org-reverse-note-order', it will be either the first or last
     subitem.
     By default, all level 1 headlines in the current buffer are
     considered to be targets, but you can have more complex
     definitions across a number of files.  See the variable
     `org-refile-targets' for details.  If you would like to select a
     location via a file-path-like completion along the outline path,
     see the variables `org-refile-use-outline-path' and
     `org-outline-path-complete-in-steps'.  If you would like to be
     able to create new nodes as new parents for refiling on the fly,
     check the variable `org-refile-allow-creating-parent-nodes'.  When
     the variable `org-log-refile'(1) is set, a timestamp or a note
     will be recorded when an entry has been refiled.  

`C-u C-c C-w'
     Use the refile interface to jump to a heading.  

`C-u C-u C-c C-w     (`org-refile-goto-last-stored')'
     Jump to the location where `org-refile' last moved a tree to.

`C-2 C-c C-w'
     Refile as the child of the item currently being clocked.  

`C-0 C-c C-w  or  C-u C-u C-u C-c C-w     (`org-refile-cache-clear')'
     Clear the target cache.  Caching of refile targets can be turned
     on by setting `org-refile-use-cache'.  To make the command see new
     possible targets, you have to clear the cache with this command.

   ---------- Footnotes ----------

   (1) with corresponding `#+STARTUP' keywords `logrefile',
`lognoterefile', and `nologrefile'


File: org,  Node: Archiving,  Prev: Refiling notes,  Up: Capture - Refile - Archive

9.6 Archiving
=============

When a project represented by a (sub)tree is finished, you may want to
move the tree out of the way and to stop it from contributing to the
agenda.  Archiving is important to keep your working files compact and
global searches like the construction of agenda views fast.

`C-c C-x C-a     (`org-archive-subtree-default')'
     Archive the current entry using the command specified in the
     variable `org-archive-default-command'.

* Menu:

* Moving subtrees::             Moving a tree to an archive file
* Internal archiving::          Switch off a tree but keep it in the file


File: org,  Node: Moving subtrees,  Next: Internal archiving,  Prev: Archiving,  Up: Archiving

9.6.1 Moving a tree to the archive file
---------------------------------------

The most common archiving action is to move a project tree to another
file, the archive file.

`C-c C-x C-s  or short  C-c $     (`org-archive-subtree')'
     Archive the subtree starting at the cursor position to the location
     given by `org-archive-location'.  

`C-u C-c C-x C-s'
     Check if any direct children of the current headline could be
     moved to the archive.  To do this, each subtree is checked for
     open TODO entries.  If none are found, the command offers to move
     it to the archive location.  If the cursor is _not_ on a headline
     when this command is invoked, the level 1 trees will be checked.

   The default archive location is a file in the same directory as the
current file, with the name derived by appending `_archive' to the
current file name.  For information and examples on how to change this,
see the documentation string of the variable `org-archive-location'.
There is also an in-buffer option for setting this variable, for
example(1):

     #+ARCHIVE: %s_done::

If you would like to have a special ARCHIVE location for a single entry
or a (sub)tree, give the entry an `:ARCHIVE:' property with the
location as the value (*note Properties and Columns::).

   When a subtree is moved, it receives a number of special properties
that record context information like the file from where the entry
came, its outline path the archiving time etc.  Configure the variable
`org-archive-save-context-info' to adjust the amount of information
added.

   ---------- Footnotes ----------

   (1) For backward compatibility, the following also works: If there
are several such lines in a file, each specifies the archive location
for the text below it.  The first such line also applies to any text
before its definition.  However, using this method is _strongly_
deprecated as it is incompatible with the outline structure of the
document.  The correct method for setting multiple archive locations in
a buffer is using properties.


File: org,  Node: Internal archiving,  Prev: Moving subtrees,  Up: Archiving

9.6.2 Internal archiving
------------------------

If you want to just switch off (for agenda views) certain subtrees
without moving them to a different file, you can use the `ARCHIVE tag'.

   A headline that is marked with the ARCHIVE tag (*note Tags::) stays
at its location in the outline tree, but behaves in the following way:
   - It does not open when you attempt to do so with a visibility
     cycling command (*note Visibility cycling::).  You can force
     cycling archived subtrees with `C-<TAB>', or by setting the option
     `org-cycle-open-archived-trees'.  Also normal outline commands like
     `show-all' will open archived subtrees.

   - During sparse tree construction (*note Sparse trees::), matches in
     archived subtrees are not exposed, unless you configure the option
     `org-sparse-tree-open-archived-trees'.

   - During agenda view construction (*note Agenda Views::), the
     content of archived trees is ignored unless you configure the
     option `org-agenda-skip-archived-trees', in which case these trees
     will always be included.  In the agenda you can press `v a' to get
     archives temporarily included.

   - Archived trees are not exported (*note Exporting::), only the
     headline is.  Configure the details using the variable
     `org-export-with-archived-trees'.

   - Archived trees are excluded from column view unless the variable
     `org-columns-skip-archived-trees' is configured to `nil'.

   The following commands help manage the ARCHIVE tag:

`C-c C-x a     (`org-toggle-archive-tag')'
     Toggle the ARCHIVE tag for the current headline.  When the tag is
     set, the headline changes to a shadowed face, and the subtree
     below it is hidden.  

`C-u C-c C-x a'
     Check if any direct children of the current headline should be
     archived.  To do this, each subtree is checked for open TODO
     entries.  If none are found, the command offers to set the ARCHIVE
     tag for the child.  If the cursor is _not_ on a headline when this
     command is invoked, the level 1 trees will be checked.  

`C-TAB     (`org-force-cycle-archived')'
     Cycle a tree even if it is tagged with ARCHIVE.  

`C-c C-x A     (`org-archive-to-archive-sibling')'
     Move the current entry to the _Archive Sibling_.  This is a
     sibling of the entry with the heading `Archive' and the tag
     `ARCHIVE'.  The entry becomes a child of that sibling and in this
     way retains a lot of its original context, including inherited
     tags and approximate position in the outline.


File: org,  Node: Agenda Views,  Next: Markup,  Prev: Capture - Refile - Archive,  Up: Top

10 Agenda views
***************

Due to the way Org works, TODO items, time-stamped items, and tagged
headlines can be scattered throughout a file or even a number of files.
To get an overview of open action items, or of events that are
important for a particular date, this information must be collected,
sorted and displayed in an organized way.

   Org can select items based on various criteria and display them in a
separate buffer.  Seven different view types are provided:

   * an _agenda_ that is like a calendar and shows information for
     specific dates,

   * a _TODO list_ that covers all unfinished action items,

   * a _match view_, showings headlines based on the tags, properties,
     and TODO state associated with them,

   * a _timeline view_ that shows all events in a single Org file, in
     time-sorted view,

   * a _text search view_ that shows all entries from multiple files
     that contain specified keywords,

   * a _stuck projects view_ showing projects that currently don't move
     along, and

   * _custom views_ that are special searches and combinations of
     different views.

The extracted information is displayed in a special _agenda buffer_.
This buffer is read-only, but provides commands to visit the
corresponding locations in the original Org files, and even to edit
these files remotely.

   Two variables control how the agenda buffer is displayed and whether
the window configuration is restored when the agenda exits:
`org-agenda-window-setup' and `org-agenda-restore-windows-after-quit'.

* Menu:

* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Built-in agenda views::       What is available out of the box?
* Presentation and sorting::    How agenda items are prepared for display
* Agenda commands::             Remote editing of Org trees
* Custom agenda views::         Defining special searches and views
* Exporting Agenda Views::      Writing a view to a file
* Agenda column view::          Using column view for collected entries


File: org,  Node: Agenda files,  Next: Agenda dispatcher,  Prev: Agenda Views,  Up: Agenda Views

10.1 Agenda files
=================

The information to be shown is normally collected from all _agenda
files_, the files listed in the variable `org-agenda-files'(1).  If a
directory is part of this list, all files with the extension `.org' in
this directory will be part of the list.

   Thus, even if you only work with a single Org file, that file should
be put into the list(2).  You can customize `org-agenda-files', but the
easiest way to maintain it is through the following commands

`C-c [     (`org-agenda-file-to-front')'
     Add current file to the list of agenda files.  The file is added to
     the front of the list.  If it was already in the list, it is moved
     to the front.  With a prefix argument, file is added/moved to the
     end.  

`C-c ]     (`org-remove-file')'
     Remove current file from the list of agenda files.  

`C-'     (`org-cycle-agenda-files')'
`C-,'
     Cycle through agenda file list, visiting one file after the other.  

`M-x org-iswitchb'
     Command to use an `iswitchb'-like interface to switch to and
     between Org buffers.

The Org menu contains the current list of files and can be used to
visit any of them.

   If you would like to focus the agenda temporarily on a file not in
this list, or on just one file in the list, or even on only a subtree
in a file, then this can be done in different ways.  For a single
agenda command, you may press `<' once or several times in the
dispatcher (*note Agenda dispatcher::).  To restrict the agenda scope
for an extended period, use the following commands:

`C-c C-x <     (`org-agenda-set-restriction-lock')'
     Permanently restrict the agenda to the current subtree.  When with
     a prefix argument, or with the cursor before the first headline in
     a file, the agenda scope is set to the entire file.  This
     restriction remains in effect until removed with `C-c C-x >', or
     by typing either `<' or `>' in the agenda dispatcher.  If there is
     a window displaying an agenda view, the new restriction takes
     effect immediately.  

`C-c C-x >     (`org-agenda-remove-restriction-lock')'
     Remove the permanent restriction created by `C-c C-x <'.

When working with `speedbar.el', you can use the following commands in
the Speedbar frame:
`< in the speedbar frame     (`org-speedbar-set-agenda-restriction')'
     Permanently restrict the agenda to the item--either an Org file or
     a subtree in such a file--at the cursor in the Speedbar frame.  If
     there is a window displaying an agenda view, the new restriction
     takes effect immediately.  

`> in the speedbar frame     (`org-agenda-remove-restriction-lock')'
     Lift the restriction.

   ---------- Footnotes ----------

   (1) If the value of that variable is not a list, but a single file
name, then the list of agenda files will be maintained in that external
file.

   (2) When using the dispatcher, pressing `<' before selecting a
command will actually limit the command to the current file, and ignore
`org-agenda-files' until the next dispatcher command.


File: org,  Node: Agenda dispatcher,  Next: Built-in agenda views,  Prev: Agenda files,  Up: Agenda Views

10.2 The agenda dispatcher
==========================

The views are created through a dispatcher, which should be bound to a
global key--for example `C-c a' (*note Activation::).  In the following
we will assume that `C-c a' is indeed how the dispatcher is accessed
and list keyboard access to commands accordingly.  After pressing `C-c
a', an additional letter is required to execute a command.  The
dispatcher offers the following default commands:
`a'
     Create the calendar-like agenda (*note Weekly/daily agenda::).

`t / T'
     Create a list of all TODO items (*note Global TODO list::).

`m / M'
     Create a list of headlines matching a TAGS expression (*note
     Matching tags and properties::).

`L'
     Create the timeline view for the current buffer (*note Timeline::).

`s'
     Create a list of entries selected by a boolean expression of
     keywords and/or regular expressions that must or must not occur in
     the entry.

`/'
     Search for a regular expression in all agenda files and
     additionally in the files listed in
     `org-agenda-text-search-extra-files'.  This uses the Emacs command
     `multi-occur'.  A prefix argument can be used to specify the
     number of context lines for each match, default is 1.

`# / !'
     Create a list of stuck projects (*note Stuck projects::).

`<'
     Restrict an agenda command to the current buffer(1).  After
     pressing `<', you still need to press the character selecting the
     command.

`< <'
     If there is an active region, restrict the following agenda
     command to the region.  Otherwise, restrict it to the current
     subtree(2).  After pressing `< <', you still need to press the
     character selecting the command.

   You can also define custom commands that will be accessible through
the dispatcher, just like the default commands.  This includes the
possibility to create extended agenda buffers that contain several
blocks together, for example the weekly agenda, the global TODO list and
a number of special tags matches.  *Note Custom agenda views::.

   ---------- Footnotes ----------

   (1) For backward compatibility, you can also press `1' to restrict
to the current buffer.

   (2) For backward compatibility, you can also press `0' to restrict
to the current region/subtree.


File: org,  Node: Built-in agenda views,  Next: Presentation and sorting,  Prev: Agenda dispatcher,  Up: Agenda Views

10.3 The built-in agenda views
==============================

In this section we describe the built-in views.

* Menu:

* Weekly/daily agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Timeline::                    Time-sorted view for single file
* Search view::                 Find entries by searching for text
* Stuck projects::              Find projects you need to review


File: org,  Node: Weekly/daily agenda,  Next: Global TODO list,  Prev: Built-in agenda views,  Up: Built-in agenda views

10.3.1 The weekly/daily agenda
------------------------------

The purpose of the weekly/daily _agenda_ is to act like a page of a
paper agenda, showing all the tasks for the current week or day.

`C-c a a     (`org-agenda-list')'
     Compile an agenda for the current week from a list of Org files.
     The agenda shows the entries for each day.  With a numeric
     prefix(1)  (like `C-u 2 1 C-c a a') you may set the number of days
     to be displayed.

   The default number of days displayed in the agenda is set by the
variable `org-agenda-span' (or the obsolete `org-agenda-ndays').  This
variable can be set to any number of days you want to see by default in
the agenda, or to a span name, such a `day', `week', `month' or `year'.

   Remote editing from the agenda buffer means, for example, that you
can change the dates of deadlines and appointments from the agenda
buffer.  The commands available in the Agenda buffer are listed in
*note Agenda commands::.

Calendar/Diary integration
..........................

Emacs contains the calendar and diary by Edward M. Reingold.  The
calendar displays a three-month calendar with holidays from different
countries and cultures.  The diary allows you to keep track of
anniversaries, lunar phases, sunrise/set, recurrent appointments
(weekly, monthly) and more.  In this way, it is quite complementary to
Org.  It can be very useful to combine output from Org with the diary.

   In order to include entries from the Emacs diary into Org mode's
agenda, you only need to customize the variable

     (setq org-agenda-include-diary t)

After that, everything will happen automatically.  All diary entries
including holidays, anniversaries, etc., will be included in the agenda
buffer created by Org mode.  <SPC>, <TAB>, and <RET> can be used from
the agenda buffer to jump to the diary file in order to edit existing
diary entries.  The `i' command to insert new entries for the current
date works in the agenda buffer, as well as the commands `S', `M', and
`C' to display Sunrise/Sunset times, show lunar phases and to convert
to other calendars, respectively.  `c' can be used to switch back and
forth between calendar and agenda.

   If you are using the diary only for sexp entries and holidays, it is
faster to not use the above setting, but instead to copy or even move
the entries into an Org file.  Org mode evaluates diary-style sexp
entries, and does it faster because there is no overhead for first
creating the diary display.  Note that the sexp entries must start at
the left margin, no whitespace is allowed before them.  For example,
the following segment of an Org file will be processed and entries will
be made in the agenda:

     * Birthdays and similar stuff
     #+CATEGORY: Holiday
     %%(org-calendar-holiday)   ; special function for holiday names
     #+CATEGORY: Ann
     %%(org-anniversary 1956  5 14)(2) Arthur Dent is %d years old
     %%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old

Anniversaries from BBDB
.......................

If you are using the Big Brothers Database to store your contacts, you
will very likely prefer to store anniversaries in BBDB rather than in a
separate Org or diary file.  Org supports this and will show BBDB
anniversaries as part of the agenda.  All you need to do is to add the
following to one of your agenda files:

     * Anniversaries
       :PROPERTIES:
       :CATEGORY: Anniv
       :END:
     %%(org-bbdb-anniversaries)

   You can then go ahead and define anniversaries for a BBDB record.
Basically, you need to press `C-o anniversary <RET>' with the cursor in
a BBDB record and then add the date in the format `YYYY-MM-DD' or
`MM-DD', followed by a space and the class of the anniversary
(`birthday' or `wedding', or a format string).  If you omit the class,
it will default to `birthday'.  Here are a few examples, the header for
the file `org-bbdb.el' contains more detailed information.

     1973-06-22
     06-22
     1955-08-02 wedding
     2008-04-14 %s released version 6.01 of org mode, %d years ago

   After a change to BBDB, or for the first agenda display during an
Emacs session, the agenda display will suffer a short delay as Org
updates its hash with anniversaries.  However, from then on things will
be very fast--much faster in fact than a long list of
`%%(diary-anniversary)' entries in an Org or Diary file.

Appointment reminders
.....................

Org can interact with Emacs appointments notification facility.  To add
all the appointments of your agenda files, use the command
`org-agenda-to-appt'.  This command also lets you filter through the
list of your appointments and add only those belonging to a specific
category or matching a regular expression.  See the docstring for
details.

   ---------- Footnotes ----------

   (1) For backward compatibility, the universal prefix `C-u' causes
all TODO entries to be listed before the agenda.  This feature is
deprecated, use the dedicated TODO list, or a block agenda instead
(*note Block agenda::).

   (2) `org-anniversary' is just like `diary-anniversary', but the
argument order is always according to ISO and therefore independent of
the value of `calendar-date-style'.


File: org,  Node: Global TODO list,  Next: Matching tags and properties,  Prev: Weekly/daily agenda,  Up: Built-in agenda views

10.3.2 The global TODO list
---------------------------

The global TODO list contains all unfinished TODO items formatted and
collected into a single place.

`C-c a t     (`org-todo-list')'
     Show the global TODO list.  This collects the TODO items from all
     agenda files (*note Agenda Views::) into a single buffer.  By
     default, this lists items with a state the is not a DONE state.
     The buffer is in `agenda-mode', so there are commands to examine
     and manipulate the TODO entries directly from that buffer (*note
     Agenda commands::).  

`C-c a T     (`org-todo-list')'
     Like the above, but allows selection of a specific TODO keyword.
     You can also do this by specifying a prefix argument to `C-c a t'.
     You are prompted for a keyword, and you may also specify several
     keywords by separating them with `|' as the boolean OR operator.
     With a numeric prefix, the Nth keyword in `org-todo-keywords' is
     selected.  The `r' key in the agenda buffer regenerates it, and
     you can give a prefix argument to this command to change the
     selected TODO keyword, for example `3 r'.  If you often need a
     search for a specific keyword, define a custom command for it
     (*note Agenda dispatcher::).
     Matching specific TODO keywords can also be done as part of a tags
     search (*note Tag searches::).

   Remote editing of TODO items means that you can change the state of a
TODO entry with a single key press.  The commands available in the TODO
list are described in *note Agenda commands::.

   Normally the global TODO list simply shows all headlines with TODO
keywords.  This list can become very long.  There are two ways to keep
it more compact:
   - Some people view a TODO item that has been _scheduled_ for
     execution or have a _deadline_ (*note Timestamps::) as no longer
     _open_.  Configure the variables
     `org-agenda-todo-ignore-scheduled',
     `org-agenda-todo-ignore-deadlines',
     `org-agenda-todo-ignore-timestamp' and/or
     `org-agenda-todo-ignore-with-date' to exclude such items from the
     global TODO list.

   - TODO items may have sublevels to break up the task into subtasks.
     In such cases it may be enough to list only the highest level TODO
     headline and omit the sublevels from the global list.  Configure
     the variable `org-agenda-todo-list-sublevels' to get this behavior.

