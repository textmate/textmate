This is ../../info/vip, produced by makeinfo version 4.13 from vip.texi.

Copyright (C) 1987, 2001-2012 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual", and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License".

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* VIP: (vip).                   An older VI-emulation for Emacs.
END-INFO-DIR-ENTRY


File: vip,  Node: Top,  Next: Survey,  Up: (DIR)

VIP
***

VIP is a Vi emulating package written in Emacs Lisp.  VIP implements
most Vi commands including Ex commands.  It is therefore hoped that
this package will enable you to do Vi style editing under the powerful
GNU Emacs environment.  This info file describes the usage of VIP
assuming that you are fairly accustomed to Vi but not so much with
Emacs.  Also we will concentrate mainly on differences from Vi,
especially features unique to VIP.

   It is recommended that you read nodes on survey and on customization
before you start using VIP.  Other nodes may be visited as needed.

   Comments and bug reports are welcome.  Please send messages to
`ms@Sail.Stanford.Edu' if you are outside of Japan and to
`masahiko@sato.riec.tohoku.junet' if you are in Japan.

   Copyright (C) 1987, 2001-2012 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual", and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License".

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom."

* Menu:

* Survey::              A survey of VIP.
* Vi Commands::         Details of Vi commands.
* Ex Commands::         Details of Ex commands.
* Customization::       How to customize VIP.
* GNU Free Documentation License:: The license for this documentation.


File: vip,  Node: Survey,  Next: Basic Concepts,  Prev: Top,  Up: Top

1 A Survey of VIP
*****************

In this chapter we describe basics of VIP with emphasis on the features
not found in Vi and on how to use VIP under GNU Emacs.

* Menu:

* Basic Concepts::      Basic concepts in Emacs.
* Loading VIP::         How to load VIP automatically.
* Modes in VIP::        VIP has three modes, which are orthogonal to modes
                          in Emacs.
* Differences from Vi:: Differences of VIP from Vi is explained.


File: vip,  Node: Basic Concepts,  Next: Loading VIP,  Prev: Survey,  Up: Survey

1.1 Basic Concepts
==================

We begin by explaining some basic concepts of Emacs.  These concepts are
explained in more detail in the GNU Emacs Manual.

   Conceptually, a "buffer" is just a string of ASCII characters and two
special characters <PNT> ("point") and <MRK> ("mark") such that the
character <PNT> occurs exactly once and <MRK> occurs at most once.  The
"text" of a buffer is obtained by deleting the occurrences of <PNT> and
<MRK>.  If, in a buffer, there is a character following <PNT> then we
say that point is "looking at" the character; otherwise we say that
point is "at the end of buffer".  <PNT> and <MRK> are used to indicate
positions in a buffer and they are not part of the text of the buffer.
If a buffer contains a <MRK> then the text between <MRK> and <PNT> is
called the "region" of the buffer.

   Emacs provides (multiple) "windows" on the screen, and you can see
the content of a buffer through the window associated with the buffer.
The cursor of the screen is always positioned on the character after
<PNT>.

   A "keymap" is a table that records the bindings between characters
and command functions.  There is the "global keymap" common to all the
buffers.  Each buffer has its "local keymap" that determines the "mode"
of the buffer.  Local keymap overrides global keymap, so that if a
function is bound to some key in the local keymap then that function
will be executed when you type the key.  If no function is bound to a
key in the local map, however, the function bound to the key in the
global map becomes in effect.


File: vip,  Node: Loading VIP,  Next: Modes in VIP,  Prev: Basic Concepts,  Up: Survey

1.2 Loading VIP
===============

The recommended way to load VIP automatically is to include the line:
     (load "vip")
   in your `.emacs' file.  The `.emacs' file is placed in your home
directory and it will be executed every time you invoke Emacs.  If you
wish to be in vi mode whenever Emacs starts up, you can include the
following line in your `.emacs' file instead of the above line:
     (setq term-setup-hook 'vip-mode)
   (*Note Vi Mode::, for the explanation of vi mode.)

   Even if your `.emacs' file does not contain any of the above lines,
you can load VIP and enter vi mode by typing the following from within
Emacs.
     M-x vip-mode


File: vip,  Node: Modes in VIP,  Next: Emacs Mode,  Prev: Loading VIP,  Up: Survey

1.3 Modes in VIP
================

Loading VIP has the effect of globally binding `C-z' (`Control-z') to
the function `vip-change-mode-to-vi'. The default binding of `C-z' in
GNU Emacs is `suspend-emacs', but, you can also call `suspend-emacs' by
typing `C-x C-z'.  Other than this, all the key bindings of Emacs
remain the same after loading VIP.

   Now, if you hit `C-z', the function `vip-change-mode-to-vi' will be
called and you will be in "vi mode".  (Some major modes may locally bind
`C-z' to some special functions.  In such cases, you can call
`vip-change-mode-to-vi' by `execute-extended-command' which is invoked
by `M-x'.  Here `M-x' means `Meta-x', and if your terminal does not
have a <META> key you can enter it by typing `<ESC> x'.  The same
effect can also be achieve by typing `M-x vip-mode'.)

   You can observe the change of mode by looking at the "mode line".
For instance, if the mode line is:
     -----Emacs: *scratch*              (Lisp Interaction)----All------------
   then it will change to:
     -----Vi:    *scratch*              (Lisp Interaction)----All------------
   Thus the word `Emacs' in the mode line will change to `Vi'.

   You can go back to the original "emacs mode" by typing `C-z' in vi
mode.  Thus `C-z' toggles between these two modes.

   Note that modes in VIP exist orthogonally to modes in Emacs.  This
means that you can be in vi mode and at the same time, say, shell mode.

   Vi mode corresponds to Vi's command mode.  From vi mode you can enter
"insert mode" (which corresponds to Vi's insert mode) by usual Vi
command keys like `i', `a', `o' ... etc.

   In insert mode, the mode line will look like this:
     -----Insert *scratch*              (Lisp Interaction)----All------------
   You can exit from insert mode by hitting <ESC> key as you do in Vi.

   That VIP has three modes may seem very complicated, but in fact it
is not so.  VIP is implemented so that you can do most editing
remaining only in the two modes for Vi (that is vi mode and insert
mode).

   The figure below shows the transition of three modes in VIP.


                === C-z ==>          == i,o ... ==>
     emacs mode             vi mode                 insert mode
                <== X-z ===          <=== ESC ====

* Menu:

* Emacs Mode::          This is the mode you should know better.
* Vi Mode::             Vi commands are executed in this mode.
* Insert Mode::         You can enter text, and also can do editing if you
                          know enough Emacs commands.


File: vip,  Node: Emacs Mode,  Next: Vi Mode,  Prev: Modes in VIP,  Up: Modes in VIP

1.3.1 Emacs Mode
----------------

You will be in this mode just after you loaded VIP.  You can do all
normal Emacs editing in this mode.  Note that the key `C-z' is globally
bound to `vip-change-mode-to-vi'.  So, if you type `C-z' in this mode
then you will be in vi mode.


File: vip,  Node: Vi Mode,  Next: Insert Mode,  Prev: Emacs Mode,  Up: Modes in VIP

1.3.2 Vi Mode
-------------

This mode corresponds to Vi's command mode.  Most Vi commands work as
they do in Vi.  You can go back to emacs mode by typing `C-z'.  You can
enter insert mode, just as in Vi, by typing `i', `a' etc.


File: vip,  Node: Insert Mode,  Next: Differences from Vi,  Prev: Vi Mode,  Up: Modes in VIP

1.3.3 Insert Mode
-----------------

The key bindings in this mode is the same as in the emacs mode except
for the following 4 keys.  So, you can move around in the buffer and
change its content while you are in insert mode.

`<ESC>'
     This key will take you back to vi mode.

`C-h'
     Delete previous character.

`C-w'
     Delete previous word.

`C-z'
     Typing this key has the same effect as typing <ESC> in emacs mode.
     Thus typing `C-z x' in insert mode will have the same effect as
     typing `ESC x' in emacs mode.


File: vip,  Node: Differences from Vi,  Next: Undoing,  Prev: Insert Mode,  Up: Survey

1.4 Differences from Vi
=======================

The major differences from Vi are explained below.

* Menu:

* Undoing::             You can undo more in VIP.
* Changing::            Commands for changing the text.
* Searching::           Search commands.
* z Command::           You can now use zH, zM and zL as well as z- etc.
* Counts::              Some Vi commands which do not accept a count now
                        accept one.
* Marking::             You can now mark the current point, beginning of
                        the buffer etc.
* Region Commands::     You can now give a region as an argument for delete
                        commands etc.
* New Commands::        Some new commands not available in Vi are added.
* New Bindings::        Bindings of some keys are changed for the
                        convenience of editing under Emacs.
* Window Commands::     Commands for moving among windows etc.
* Buffer Commands::     Commands for selecting buffers etc.
* File Commands::       Commands for visiting files etc.
* Misc Commands::       Other useful commands.


File: vip,  Node: Undoing,  Next: Changing,  Prev: Differences from Vi,  Up: Differences from Vi

1.4.1 Undoing
-------------

You can repeat undoing by the `.' key.  So, `u' will undo a single
change, while `u . . .', for instance, will undo 4 previous changes.
Undo is undoable as in Vi.  So the content of the buffer will be the
same before and after `u u'.


File: vip,  Node: Changing,  Next: Searching,  Prev: Undoing,  Up: Differences from Vi

1.4.2 Changing
--------------

Some commands which change a small number of characters are executed
slightly differently.  Thus, if point is at the beginning of a word
`foo' and you wished to change it to `bar' by typing `c w', then VIP
will prompt you for a new word in the minibuffer by the prompt `foo =>
'.  You can then enter `bar' followed by <RET> or <ESC> to complete the
command.  Before you enter <RET> or <ESC> you can abort the command by
typing `C-g'.  In general, you can abort a partially formed command by
typing `C-g'.


File: vip,  Node: Searching,  Next: z Command,  Prev: Changing,  Up: Differences from Vi

1.4.3 Searching
---------------

As in Vi, searching is done by `/' and `?'.  The string will be
searched literally by default.  To invoke a regular expression search,
first execute the search command `/' (or `?') with empty search string.
(I.e, type `/' followed by <RET>.)  A search for empty string will
toggle the search mode between vanilla search and regular expression
search.  You cannot give an offset to the search string.  (It is a
limitation.)  By default, search will wrap around the buffer as in Vi.
You can change this by rebinding the variable `vip-search-wrap-around'.
*Note Customization::, for how to do this.


File: vip,  Node: z Command,  Next: Counts,  Prev: Searching,  Up: Differences from Vi

1.4.4 z Command
---------------

For those of you who cannot remember which of `z' followed by <RET>,
`.' and `-' do what.  You can also use `z' followed by `H', `M' and `L'
to place the current line in the Home (Middle, and Last) line of the
window.


File: vip,  Node: Counts,  Next: Marking,  Prev: z Command,  Up: Differences from Vi

1.4.5 Counts
------------

Some Vi commands which do not accept a count now accept one

`p'
`P'
     Given counts, text will be yanked (in Vi's sense) that many times.
     Thus `3 p' is the same as `p p p'.

`o'
`O'
     Given counts, that many copies of text will be inserted. Thus `o a
     b c <ESC>' will insert 3 lines of `abc' below the current line.

`/'
`?'
     Given a count N, N-th occurrence will be searched.


File: vip,  Node: Marking,  Next: Region Commands,  Prev: Counts,  Up: Differences from Vi

1.4.6 Marking
-------------

Typing an `m' followed by a lower-case character CH marks the point to
the register named CH as in Vi.  In addition to these, we have
following key bindings for marking.

`m <'
     Set mark at the beginning of buffer.

`m >'
     Set mark at the end of buffer.

`m .'
     Set mark at point (and push old mark on mark ring).

`m ,'
     Jump to mark (and pop mark off the mark ring).


File: vip,  Node: Region Commands,  Next: New Commands,  Prev: Marking,  Up: Differences from Vi

1.4.7 Region Commands
---------------------

Vi operators like `d', `c' etc. are usually used in combination with
motion commands.  It is now possible to use current region as the
argument to these operators.  (A "region" is a part of buffer delimited
by point and mark.)  The key `r' is used for this purpose.  Thus `d r'
will delete the current region.  If `R' is used instead of `r' the
region will first be enlarged so that it will become the smallest
region containing the original region and consisting of whole lines.
Thus `m . d R' will have the same effect as `d d'.


File: vip,  Node: New Commands,  Next: New Bindings,  Prev: Region Commands,  Up: Differences from Vi

1.4.8 Some New Commands
-----------------------

Note that the keys below (except for `R') are not used in Vi.

`C-a'
     Move point to the beginning of line.

`C-n'
     If you have two or more windows in the screen, this key will move
     point to the next window.

`C-o'
     Insert a newline and leave point before it, and then enter insert
     mode.

`C-r'
     Backward incremental search.

`C-s'
     Forward incremental search.

`C-c'
`C-x'
`<ESC>'
     These keys will exit from vi mode and return to emacs mode
     temporarily.  If you hit one of these keys, Emacs will be in emacs
     mode and will believe that you hit that key in emacs mode. For
     example, if you hit `C-x' followed by `2', then the current window
     will be split into 2 and you will be in vi mode again.

`\'
     Escape to emacs mode.  Hitting `\' will take you to emacs mode,
     and you can execute a single Emacs command.  After executing the
     Emacs command you will be in vi mode again.  You can give a count
     before typing `\'.  Thus `5 \ *', as well as `\ C-u 5 *', will
     insert `*****' before point.  Similarly `1 0 \ C-p' will move the
     point 10 lines above the current line.

`K'
     Kill current buffer if it is not modified.  Useful when you
     selected a buffer which you did not want.

`Q'
`R'
     `Q' is for query replace and `R' is for replace.  By default,
     string to be replaced are treated literally.  If you wish to do a
     regular expression replace, first do replace with empty string as
     the string to be replaced.  In this way, you can toggle between
     vanilla and regular expression replacement.

`v'
`V'
     These keys are used to Visit files.  `v' will switch to a buffer
     visiting file whose name can be entered in the minibuffer. `V' is
     similar, but will use window different from the current window.

`#'
     If followed by a certain character CH, it becomes an operator whose
     argument is the region determined by the motion command that
     follows.  Currently, CH can be one of `c', `C', `g', `q' and `s'.

`# c'
     Change upper-case characters in the region to lower case
     (`downcase-region').

`# C'
     Change lower-case characters in the region to upper case. For
     instance, `# C 3 w' will capitalize 3 words from the current point
     (`upcase-region').

`# g'
     Execute last keyboard macro for each line in the region
     (`vip-global-execute').

`# q'
     Insert specified string at the beginning of each line in the region
     (`vip-quote-region').

`# s'
     Check spelling of words in the region (`spell-region').

`*'
     Call last keyboard macro.


File: vip,  Node: New Bindings,  Next: Window Commands,  Prev: New Commands,  Up: Differences from Vi

1.4.9 New Key Bindings
----------------------

In VIP the meanings of some keys are entirely different from Vi.  These
key bindings are done deliberately in the hope that editing under Emacs
will become easier.  It is however possible to rebind these keys to
functions which behave similarly as in Vi.  *Note Customizing Key
Bindings::, for details.

`C-g'
`g'
     In Vi, `C-g' is used to get information about the file associated
     to the current buffer.  Here, `g' will do that, and `C-g' is used
     to abort a command (this is for compatibility with emacs mode.)

`SPC'
`<RET>'
     Now these keys will scroll up and down the text of current window.
     Convenient for viewing the text.

`s'
`S'
     They are used to switch to a specified buffer.  Useful for
     switching to already existing buffer since buffer name completion
     is provided.  Also a default buffer will be given as part of the
     prompt, to which you can switch by just typing <RET> key.  `s' is
     used to select buffer in the current window, while `S' selects
     buffer in another window.

`C'
`X'
     These keys will exit from vi mode and return to emacs mode
     temporarily.  If you type `C' (`X'), Emacs will be in emacs mode
     and will believe that you have typed `C-c' (`C-x', resp.) in emacs
     mode. Moreover, if the following character you type is an
     upper-case letter, then Emacs will believe that you have typed the
     corresponding control character.  You will be in vi mode again
     after the command is executed.  For example, typing `X S' in vi
     mode is the same as typing `C-x C-s' in emacs mode.  You get the
     same effect by typing `C-x C-s' in vi mode, but the idea here is
     that you can execute useful Emacs commands without typing control
     characters. For example, if you hit `X' (or `C-x') followed by
     `2', then the current window will be split into 2 and you will be
     in vi mode again.

   In addition to these, `ctl-x-map' is slightly modified:

`X 3'
`C-x 3'
     This is equivalent to `C-x 1 C-x 2' (1 + 2 = 3).


File: vip,  Node: Window Commands,  Next: Buffer Commands,  Prev: New Bindings,  Up: Differences from Vi

1.4.10 Window Commands
----------------------

In this and following subsections, we give a summary of key bindings for
basic functions related to windows, buffers and files.

`C-n'
     Switch to next window.

`X 1'
`C-x 1'
     Delete other windows.

`X 2'
`C-x 2'
     Split current window into two windows.

`X 3'
`C-x 3'
     Show current buffer in two windows.


File: vip,  Node: Buffer Commands,  Next: File Commands,  Prev: Window Commands,  Up: Differences from Vi

1.4.11 Buffer Commands
----------------------

`s'
     Switch to the specified buffer in the current window
     (`vip-switch-to-buffer').

`S'
     Switch to the specified buffer in another window
     (`vip-switch-to-buffer-other-window').

`K'
     Kill the current buffer if it is not modified.

`X S'
`C-x C-s'
     Save the current buffer in the file associated to the buffer.


File: vip,  Node: File Commands,  Next: Misc Commands,  Prev: Buffer Commands,  Up: Differences from Vi

1.4.12 File Commands
--------------------

`v'
     Visit specified file in the current window.

`V'
     Visit specified file in another window.

`X W'
`C-x C-w'
     Write current buffer into the specified file.

`X I'
`C-x C-i'
     Insert specified file at point.


File: vip,  Node: Misc Commands,  Next: Vi Commands,  Prev: File Commands,  Up: Differences from Vi

1.4.13 Miscellaneous Commands
-----------------------------

`X ('
`C-x ('
     Start remembering keyboard macro.

`X )'
`C-x )'
     Finish remembering keyboard macro.

`*'
     Call last remembered keyboard macro.

`X Z'
`C-x C-z'
     Suspend Emacs.

`Z Z'
     Exit Emacs.

`Q'
     Query replace.

`R'
     Replace.


File: vip,  Node: Vi Commands,  Next: Numeric Arguments,  Prev: Misc Commands,  Up: Top

2 Vi Commands
*************

This chapter describes Vi commands other than Ex commands implemented in
VIP.  Except for the last section which discusses insert mode, all the
commands described in this chapter are to be used in vi mode.

* Menu:

* Numeric Arguments::        Many commands accept numeric arguments
* Important Keys::           Some very important keys.
* Buffers and Windows::      Commands for handling buffers and windows.
* Files::                    Commands for handling files.
* Viewing the Buffer::       How you can view the current buffer.
* Mark Commands::            Marking positions in a buffer.
* Motion Commands::          Commands for moving point.
* Searching and Replacing::  Commands for searching and replacing.
* Modifying Commands::       Commands for modifying the buffer.
* Other Vi Commands::        Miscellaneous Commands.
* Commands in Insert Mode::  Commands for entering insert mode.


File: vip,  Node: Numeric Arguments,  Next: Important Keys,  Prev: Vi Commands,  Up: Vi Commands

2.1 Numeric Arguments
=====================

Most Vi commands accept a "numeric argument" which can be supplied as a
prefix to the commands.  A numeric argument is also called a "count".
In many cases, if a count is given, the command is executed that many
times.  For instance, `5 d d' deletes 5 lines while simple `d d'
deletes a line.  In this manual the metavariable N will denote a count.


File: vip,  Node: Important Keys,  Next: Buffers and Windows,  Prev: Numeric Arguments,  Up: Vi Commands

2.2 Important Keys
==================

The keys `C-g' and `C-l' are unique in that their associated functions
are the same in any of emacs, vi and insert mode.

`C-g'
     Quit.  Cancel running or partially typed command (`keyboard-quit').

`C-l'
     Clear the screen and reprint everything (`recenter').

   In Emacs many commands are bound to the key strokes that start with
`C-x', `C-c' and <ESC>.  These commands can be accessed from vi mode as
easily as from emacs mode.

`C-x'
`C-c'
`<ESC>'
     Typing one of these keys have the same effect as typing it in
     emacs mode.  Appropriate command will be executed according as the
     keys you type after it.  You will be in vi mode again after the
     execution of the command.  For instance, if you type `<ESC> <' (in
     vi mode) then the cursor will move to the beginning of the buffer
     and you will still be in vi mode.

`C'
`X'
     Typing one of these keys have the effect of typing the
     corresponding control character in emacs mode.  Moreover, if you
     type an upper-case character following it, that character will
     also be translated to the corresponding control character.  Thus
     typing `X W' in vi mode is the same as typing `C-x C-w' in emacs
     mode.  You will be in vi mode again after the execution of a
     command.

`\'
     Escape to emacs mode.  Hitting the `\' key will take you to emacs
     mode, and you can execute a single Emacs command.  After executing
     the Emacs command you will be in vi mode again.  You can give a
     count before typing `\'.  Thus `5 \ +', as well as `\ C-u 5 +',
     will insert `+++++' before point.


File: vip,  Node: Buffers and Windows,  Next: Files,  Prev: Important Keys,  Up: Vi Commands

2.3 Buffers and Windows
=======================

In Emacs the text you edit is stored in a "buffer".  See GNU Emacs
Manual, for details.  There is always one "current" buffer, also called
the "selected buffer".

   You can see the contents of buffers through "windows" created by
Emacs.  When you have multiple windows on the screen only one of them
is selected.  Each buffer has a unique name, and each window has a mode
line which shows the name of the buffer associated with the window and
other information about the status of the buffer.  You can change the
format of the mode line, but normally if you see `**' at the beginning
of a mode line it means that the buffer is "modified".  If you write
out the content of the buffer to a file, then the buffer will become
not modified.  Also if you see `%%' at the beginning of the mode line,
it means that the file associated with the buffer is write protected.

   We have the following commands related to windows and buffers.

`C-n'
     Move cursor to the next-window (`vip-next-window').

`X 1'
     Delete other windows and make the selected window fill the screen
     (`delete-other-windows').

`X 2'
     Split current window into two windows (`split-window-vertically').

`X 3'
     Show current buffer in two windows.

`s BUFFER <RET>'
     Select or create a buffer named BUFFER (`vip-switch-to-buffer').

`S BUFFER <RET>'
     Similar but select a buffer named BUFFER in another window
     (`vip-switch-to-buffer-other-window').

`K'
     Kill the current buffer if it is not modified or if it is not
     associated with a file
     (`vip-kill-buffer').

`X B'
     List the existing buffers (`list-buffers').

   As "buffer name completion" is provided, you have only to type in
initial substring of the buffer name which is sufficient to identify it
among names of existing buffers.  After that, if you hit <TAB> the rest
of the buffer name will be supplied by the system, and you can confirm
it by <RET>.  The default buffer name to switch to will also be
prompted, and you can select it by giving a simple <RET>.  See GNU
Emacs Manual for details of completion.


File: vip,  Node: Files,  Next: Viewing the Buffer,  Prev: Buffers and Windows,  Up: Vi Commands

2.4 Files
=========

We have the following commands related to files.  They are used to
visit, save and insert files.

`v FILE <RET>'
     Visit specified file in the current window (`vip-find-file').

`V FILE <RET>'
     Visit specified file in another window
     (`vip-find-file-other-window').

`X S'
     Save current buffer to the file associated with the buffer.  If no
     file is associated with the buffer, the name of the file to write
     out the content of the buffer will be asked in the minibuffer.

`X W FILE <RET>'
     Write current buffer into a specified file.

`X I FILE <RET>'
     Insert a specified file at point.

`g'
     Give information on the file associated with the current buffer.
     Tell you the name of the file associated with the buffer, the line
     number of the current point and total line numbers in the buffer.
     If no file is associated with the buffer, this fact will be
     indicated by the null file name `""'.

   In Emacs, you can edit a file by "visiting" it.  If you wish to
visit a file in the current window, you can just type `v'.  Emacs
maintains the "default directory" which is specific to each buffer.
Suppose, for instance, that the default directory of the current buffer
is `/usr/masahiko/lisp/'.  Then you will get the following prompt in the
minibuffer.
     visit file: /usr/masahiko/lisp/
   If you wish to visit, say, `vip.el' in this directory, then you can
just type `vip.el' followed by <RET>.  If the file `vip.el' already
exists in the directory, Emacs will visit that file, and if not, the
file will be created.  Emacs will use the file name (`vip.el', in this
case) as the name of the buffer visiting the file.  In order to make
the buffer name unique, Emacs may append `<2>', `<3>' etc., to the
buffer name.  As the "file name completion" is provided here, you can
sometime save typing.  For instance, suppose there is only one file in
the default directory whose name starts with `v', that is `vip.el'.
Then if you just type `v <TAB>' then it will be completed to `vip.el'.
Thus, in this case, you just have to type `v v <TAB> <RET>' to visit
`/usr/masahiko/lisp/vip.el'.  Continuing the example, let us now
suppose that you wished to visit the file
`/usr/masahiko/man/vip.texinfo'.  Then to the same prompt which you get
after you typed `v', you can enter `/usr/masahiko/man/vip.texinfo' or
`../man/vip.texinfo' followed by <RET>.

   Use `V' instead of `v', if you wish to visit a file in another
window.

   You can verify which file you are editing by typing `g'.  (You can
also type `X B' to get information on other buffers too.)  If you type
`g' you will get an information like below in the echo area:
     "/usr/masahiko/man/vip.texinfo" line 921 of 1949

   After you edited the buffer (`vip.texinfo', in our example) for a
while, you may wish to save it in a file.  If you wish to save it in
the file associated with the buffer (`/usr/masahiko/man/vip.texinfo',
in this case), you can just say `X S'.  If you wish to save it in
another file, you can type `X W'.  You will then get a similar prompt
as you get for `v', to which you can enter the file name.


File: vip,  Node: Viewing the Buffer,  Next: Mark Commands,  Prev: Files,  Up: Vi Commands

2.5 Viewing the Buffer
======================

In this and next section we discuss commands for moving around in the
buffer.  These command do not change the content of the buffer.  The
following commands are useful for viewing the content of the current
buffer.

`<SPC>'
`C-f'
     Scroll text of current window upward almost full screen.  You can
     go forward in the buffer by this command (`vip-scroll').

`<RET>'
`C-b'
     Scroll text of current window downward almost full screen.  You
     can go backward in the buffer by this command (`vip-scroll-back').

`C-d'
     Scroll text of current window upward half screen.  You can go down
     in the buffer by this command (`vip-scroll-down').

`C-u'
     Scroll text of current window downward half screen.  You can go up
     in the buffer by this command (`vip-scroll-up').

`C-y'
     Scroll text of current window upward by one line
     (`vip-scroll-down-one').

`C-e'
     Scroll text of current window downward by one line
     (`vip-scroll-up-one').
   You can repeat these commands by giving a count.  Thus, `2 <SPC>'
has the same effect as `<SPC> <SPC>'.

   The following commands reposition point in the window.

`z H'
`z <RET>'
     Put point on the top (home) line in the window.  So the current
     line becomes the top line in the window.  Given a count N, point
     will be placed in the N-th line from top (`vip-line-to-top').

`z M'
`z .'
     Put point on the middle line in the window.  Given a count N,
     point will be placed in the N-th line from the middle line
     (`vip-line-to-middle').

`z L'
`z -'
     Put point on the bottom line in the window.  Given a count N,
     point will be placed in the N-th line from bottom
     (`vip-line-to-bottom').

`C-l'
     Center point in window and redisplay screen (`recenter').


File: vip,  Node: Mark Commands,  Next: Motion Commands,  Prev: Viewing the Buffer,  Up: Vi Commands

2.6 Mark Commands
=================

The following commands are used to mark positions in the buffer.

`m CH'
     Store current point in the register CH.  CH must be a lower-case
     ASCII letter.

`m <'
     Set mark at the beginning of current buffer.

`m >'
     Set mark at the end of current buffer.

`m .'
     Set mark at point.

`m ,'
     Jump to mark (and pop mark off the mark ring).

   Emacs uses the "mark ring" to store marked positions.  The commands
`m <', `m >' and `m .' not only set mark but also add it as the latest
element of the mark ring (replacing the oldest one).  By repeating the
command ``m ,'' you can visit older and older marked positions.  You
will eventually be in a loop as the mark ring is a ring.


File: vip,  Node: Motion Commands,  Next: Searching and Replacing,  Prev: Mark Commands,  Up: Vi Commands

2.7 Motion Commands
===================

Commands for moving around in the current buffer are collected here.
These commands are used as an `argument' for the delete, change and
yank commands to be described in the next section.

`h'
     Move point backward by one character.  Signal error if point is at
     the beginning of buffer, but (unlike Vi) do not complain otherwise
     (`vip-backward-char').

`l'
     Move point backward by one character.  Signal error if point is at
     the end of buffer, but (unlike Vi) do not complain otherwise
     (`vip-forward-char').

`j'
     Move point to the next line keeping the current column.  If point
     is on the last line of the buffer, a new line will be created and
     point will move to that line (`vip-next-line').

`k'
     Move point to the previous line keeping the current column
     (`vip-next-line').

`+'
     Move point to the next line at the first non-white character.  If
     point is on the last line of the buffer, a new line will be
     created and point will move to the beginning of that line
     (`vip-next-line-at-bol').

`-'
     Move point to the previous line at the first non-white character
     (`vip-previous-line-at-bol').
   If a count is given to these commands, the commands will be repeated
that many times.

`0'
     Move point to the beginning of line (`vip-beginning-of-line').

`^'
     Move point to the first non-white character on the line
     (`vip-bol-and-skip-white').

`$'
     Move point to the end of line (`vip-goto-eol').

`N |'
     Move point to the N-th column on the line (`vip-goto-col').
   Except for the `|' command, these commands neglect a count.

`w'
     Move point forward to the beginning of the next word
     (`vip-forward-word').

`W'
     Move point forward to the beginning of the next word, where a
     "word" is considered as a sequence of non-white characters
     (`vip-forward-Word').

`b'
     Move point backward to the beginning of a word
     (`vip-backward-word').

`B'
     Move point backward to the beginning of a word, where a word is
     considered as a sequence of non-white characters
     (`vip-forward-Word').

`e'
     Move point forward to the end of a word (`vip-end-of-word').

`E'
     Move point forward to the end of a word, where a word is
     considered as a sequence of non-white characters
     (`vip-end-of-Word').
   Here the meaning of the word `word' for the `w', `b' and `e'
commands is determined by the "syntax table" effective in the current
buffer.  Each major mode has its syntax mode, and therefore the meaning
of a word also changes as the major mode changes.  See GNU Emacs Manual
for details of syntax table.

`H'
     Move point to the beginning of the home (top) line of the window.
     Given a count N, go to the N-th line from top (`vip-window-top').

`M'
     Move point to the beginning of the middle line of the window.
     Given a count N, go to the N-th line from the middle line
     (`vip-window-middle').

`L'
     Move point to the beginning of the lowest (bottom) line of the
     window.  Given count, go to the N-th line from bottom
     (`vip-window-bottom').
   These commands can be used to go to the desired line visible on the
screen.

`('
     Move point backward to the beginning of the sentence
     (`vip-backward-sentence').

`)'
     Move point forward to the end of the sentence
     (`vip-forward-sentence').

`{'
     Move point backward to the beginning of the paragraph
     (`vip-backward-paragraph').

`}'
     Move point forward to the end of the paragraph
     (`vip-forward-paragraph').
   A count repeats the effect for these commands.

`G'
     Given a count N, move point to the N-th line in the buffer on the
     first non-white character.  Without a count, go to the end of the
     buffer (`vip-goto-line').

`` `'
     Exchange point and mark (`vip-goto-mark').

`` CH'
     Move point to the position stored in the register CH.  CH must be
     a lower-case letter.

`' ''
     Exchange point and mark, and then move point to the first non-white
     character on the line (`vip-goto-mark-and-skip-white').

`' CH'
     Move point to the position stored in the register CH and skip to
     the first non-white character on the line.  CH must be a
     lower-case letter.

`%'
     Move point to the matching parenthesis if point is looking at `(',
     `)', `{', `}', `[' or `]'
     (`vip-paren-match').
   The command `G' mark point before move, so that you can return to the
original point by `` `'.  The original point will also be stored in the
mark ring.

   The following commands are useful for moving points on the line.  A
count will repeat the effect.

`f CH'
     Move point forward to the character CH on the line.  Signal error
     if CH could not be found (`vip-find-char-forward').

`F CH'
     Move point backward to the character CH on the line.  Signal error
     if CH could not be found (`vip-find-char-backward').

`t CH'
     Move point forward upto the character CH on the line.  Signal
     error if CH could not be found (`vip-goto-char-forward').

`T CH'
     Move point backward upto the character CH on the line.  Signal
     error if CH could not be found (`vip-goto-char-backward').

`;'
     Repeat previous `f', `t', `F' or `T' command (`vip-repeat-find').

`,'
     Repeat previous `f', `t', `F' or `T' command, in the opposite
     direction (`vip-repeat-find-opposite').


File: vip,  Node: Searching and Replacing,  Next: Modifying Commands,  Prev: Motion Commands,  Up: Vi Commands

2.8 Searching and Replacing
===========================

Following commands are available for searching and replacing.

`/ STRING <RET>'
     Search the first occurrence of the string STRING forward starting
     from point.  Given a count N, the N-th occurrence of STRING will
     be searched.  If the variable `vip-re-search' has value `t' then
     "regular expression" search is done and the string matching the
     regular expression STRING is found.  If you give an empty string
     as STRING then the search mode will change from vanilla search to
     regular expression search and vice versa (`vip-search-forward').

`? STRING <RET>'
     Same as `/', except that search is done backward
     (`vip-search-backward').

`n'
     Search the previous search pattern in the same direction as before
     (`vip-search-next').

`N'
     Search the previous search pattern in the opposite direction
     (`vip-search-Next').

`C-s'
     Search forward incrementally.  See GNU Emacs Manual for details
     (`isearch-forward').

`C-r'
     Search backward incrementally (`isearch-backward').  

`R STRING RET NEWSTRING'
     There are two modes of replacement, "vanilla" and "regular
     expression".  If the mode is vanilla you will get a prompt
     `Replace string:', and if the mode is regular expression you will
     ge a prompt `Replace regexp:'.  The mode is initially vanilla, but
     you can toggle these modes by giving a null string as STRING.  If
     the mode is vanilla, this command replaces every occurrence of
     STRING with NEWSTRING.  If the mode is regular expression, STRING
     is treated as a regular expression and every string matching the
     regular expression is replaced with NEWSTRING
     (`vip-replace-string').

`Q STRING RET NEWSTRING'
     Same as `R' except that you will be asked form confirmation before
     each replacement
     (`vip-query-replace').

`r CH'
     Replace the character point is looking at by the character CH.
     Give count, replace that many characters by CH
     (`vip-replace-char').
   The commands `/' and `?' mark point before move, so that you can
return to the original point by `` `'.


File: vip,  Node: Modifying Commands,  Next: Delete Commands,  Prev: Searching and Replacing,  Up: Vi Commands

2.9 Modifying Commands
======================

In this section, commands for modifying the content of a buffer are
described.  These commands affect the region determined by a motion
command which is given to the commands as their argument.

   We classify motion commands into "point commands" and "line
commands".  The point commands are as follows:
     h, l, 0, ^, $, w, W, b, B, e, E, (, ), /, ?, `, f, F, t, T, %, ;, ,
   The line commands are as follows:
     j, k, +, -, H, M, L, {, }, G, '
   If a point command is given as an argument to a modifying command,
the region determined by the point command will be affected by the
modifying command. On the other hand, if a line command is given as an
argument to a modifying command, the region determined by the line
command will be enlarged so that it will become the smallest region
properly containing the region and consisting of whole lines (we call
this process "expanding the region"), and then the enlarged region will
be affected by the modifying command.

* Menu:

* Delete Commands::     Commands for deleting text.
* Yank Commands::       Commands for yanking text in Vi's sense.
* Put Back Commands::   Commands for putting back deleted/yanked text.
* Change Commands::     Commands for changing text.
* Repeating and Undoing Modifications::


File: vip,  Node: Delete Commands,  Next: Yank Commands,  Prev: Modifying Commands,  Up: Modifying Commands

2.9.1 Delete Commands
---------------------

`d MOTION-COMMAND'
     Delete the region determined by the motion command MOTION-COMMAND.
For example, `d $' will delete the region between point and end of
current line since `$' is a point command that moves point to end of
line.  `d G' will delete the region between the beginning of current
line and end of the buffer, since `G' is a line command.  A count given
to the command above will become the count for the associated motion
command.  Thus, `3 d w' will delete three words.

   It is also possible to save the deleted text into a register you
specify.  For example, you can say `" t 3 d w' to delete three words
and save it to register `t'.  The name of a register is a lower-case
letter between `a' and `z'.  If you give an upper-case letter as an
argument to a delete command, then the deleted text will be appended to
the content of the register having the corresponding lower-case letter
as its name.  So, `" T d w' will delete a word and append it to
register `t'.  Other modifying commands also accept a register name as
their argument, and we will not repeat similar explanations.

   We have more delete commands as below.

`d d'
     Delete a line.  Given a count N, delete N lines.

`d r'
     Delete current region.

`d R'
     Expand current region and delete it.

`D'
     Delete to the end of a line (`vip-kill-line').

`x'
     Delete a character after point.  Given N, delete N characters
     (`vip-delete-char').

`<DEL>'
     Delete a character before point.  Given N, delete N characters
     (`vip-delete-backward-char').


File: vip,  Node: Yank Commands,  Next: Put Back Commands,  Prev: Delete Commands,  Up: Modifying Commands

2.9.2 Yank Commands
-------------------

Yank commands "yank" a text of buffer into a (usually anonymous)
register.  Here the word `yank' is used in Vi's sense.  Thus yank
commands do not alter the content of the buffer, and useful only in
combination with commands that put back the yanked text into the buffer.

`y MOTION-COMMAND'
     Yank the region determined by the motion command MOTION-COMMAND.
   For example, `y $' will yank the text between point and the end of
line into an anonymous register, while `"c y $' will yank the same text
into register `c'.

   Use the following command to yank consecutive lines of text.

`y y'
`Y'
     Yank a line.  Given N, yank N lines (`vip-yank-line').

`y r'
     Yank current region.

`y R'
     Expand current region and yank it.


File: vip,  Node: Put Back Commands,  Next: Change Commands,  Prev: Yank Commands,  Up: Modifying Commands

2.9.3 Put Back Commands
-----------------------

Deleted or yanked texts can be put back into the buffer by the command
below.

`p'
     Insert, after the character point is looking at, most recently
     deleted/yanked text from anonymous register. Given a register name
     argument, the content of the named register will be put back.
     Given a count, the command will be repeated that many times. This
     command also checks if the text to put back ends with a new line
     character, and if so the text will be put below the current line
     (`vip-put-back').

`P'
     Insert at point most recently deleted/yanked text from anonymous
     register.  Given a register name argument, the content of the
     named register will be put back.  Given a count, the command will
     be repeated that many times.  This command also checks if the text
     to put back ends with a new line character, and if so the text
     will be put above the current line rather than at point
     (`vip-Put-back').
   Thus, `" c p' will put back the content of the register `c' into the
buffer.  It is also possible to specify "number register" which is a
numeral between `1' and `9'.  If the number register N is specified,
N-th previously deleted/yanked text will be put back.  It is an error
to specify a number register for the delete/yank commands.


File: vip,  Node: Change Commands,  Next: Repeating and Undoing Modifications,  Prev: Put Back Commands,  Up: Modifying Commands

2.9.4 Change Commands
---------------------

Most commonly used change command takes the following form.

`c MOTION-COMMAND'
     Replace the content of the region determined by the motion command
     MOTION-COMMAND by the text you type.  If the motion command is a
     point command then you will type the text into minibuffer, and if
     the motion command is a line command then the region will be
     deleted first and you can insert the text in INSERT MODE.
   For example, if point is at the beginning of a word `foo' and you
wish to change it to `bar', you can type `c w'.  Then, as `w' is a
point command, you will get the prompt `foo =>' in the minibuffer, for
which you can type `b a r <RET>' to complete the change command.

`c c'
     Change a line.  Given a count, that many lines are changed.

`c r'
     Change current region.

`c R'
     Expand current region and change it.


File: vip,  Node: Repeating and Undoing Modifications,  Next: Other Vi Commands,  Prev: Change Commands,  Up: Modifying Commands

2.9.5 Repeating and Undoing Modifications
-----------------------------------------

VIP records the previous modifying command, so that it is easy to repeat
it.  It is also very easy to undo changes made by modifying commands.

`u'
     Undo the last change.  You can undo more by repeating undo by the
     repeat command `.'.  For example, you can undo 5 previous changes
     by typing `u....'.  If you type `uu', then the second `u' undoes
     the first undo command (`vip-undo').

`.'
     Repeat the last modifying command.  Given count N it becomes the
     new count for the repeated command.  Otherwise, the count for the
     last modifying command is used again (`vip-repeat').


File: vip,  Node: Other Vi Commands,  Next: Commands in Insert Mode,  Prev: Repeating and Undoing Modifications,  Up: Vi Commands

2.10 Other Vi Commands
======================

Miscellaneous Vi commands are collected here.

`Z Z'
     Exit Emacs.  If modified buffers exist, you will be asked whether
     you wish to save them or not (`save-buffers-kill-emacs').

`! MOTION-COMMAND FORMAT-COMMAND'
`N ! ! FORMAT-COMMAND'
     The region determined by the motion command MOTION-COMMAND will be
     given to the shell command FORMAT-COMMAND and the region will be
     replaced by its output.  If a count is given, it will be passed to
     MOTION-COMMAND.  For example, `3!Gsort' will sort the region
     between point and the 3rd line.  If `!' is used instead of
     MOTION-COMMAND then N lines will be processed by FORMAT-COMMAND
     (`vip-command-argument').

`J'
     Join two lines.  Given count, join that many lines.  A space will
     be inserted at each junction (`vip-join-lines').

`< MOTION-COMMAND'
`N < <'
     Shift region determined by the motion command MOTION-COMMAND to
     left by SHIFT-WIDTH (default is 8).  If `<' is used instead of
     MOTION-COMMAND then shift N lines
     (`vip-command-argument').

`> MOTION-COMMAND'
`N > >'
     Shift region determined by the motion command MOTION-COMMAND to
     right by SHIFT-WIDTH (default is 8).  If `<' is used instead of
     MOTION-COMMAND then shift N lines
     (`vip-command-argument').

`= MOTION-COMMAND'
     Indent region determined by the motion command MOTION-COMMAND.  If
     `=' is used instead of MOTION-COMMAND then indent N lines
     (`vip-command-argument').

`*'
     Call last remembered keyboard macro.

`#'
     A new vi operator. *Note New Commands::, for more details.

   The following keys are reserved for future extensions, and currently
assigned to a function that just beeps (`vip-nil').

     &, @, U, [, ], _, q, ~

   VIP uses a special local keymap to interpret key strokes you enter
in vi mode.  The following keys are bound to NIL in the keymap.
Therefore, these keys are interpreted by the global keymap of Emacs.
We give below a short description of the functions bound to these keys
in the global keymap.  See GNU Emacs Manual for details.

`C-@'
     Set mark and push previous mark on mark ring (`set-mark-command').

`TAB'
     Indent line for current major mode (`indent-for-tab-command').

`C-j'
     Insert a newline, then indent according to mode
     (`newline-and-indent').

`C-k'
     Kill the rest of the current line; before a newline, kill the
     newline.  With a numeric argument, kill that many lines from
     point.  Negative arguments kill lines backward (`kill-line').

`C-l'
     Clear the screen and reprint everything (`recenter').

`N C-p'
     Move cursor vertically up N lines (`previous-line').

`C-q'
     Read next input character and insert it.  Useful for inserting
     control characters
     (`quoted-insert').

`C-r'
     Search backward incrementally (`isearch-backward').

`C-s'
     Search forward incrementally (`isearch-forward').

`N C-t'
     Interchange characters around point, moving forward one character.
     With count N, take character before point and drag it forward past
     N other characters.  If no argument and at end of line, the
     previous two characters are exchanged (`transpose-chars').

`N C-v'
     Scroll text upward N lines.  If N is not given, scroll near full
     screen (`scroll-up').

`C-w'
     Kill between point and mark.  The text is save in the kill ring.
     The command `P' or `p' can retrieve it from kill ring
     (`kill-region').


File: vip,  Node: Commands in Insert Mode,  Next: Ex Commands,  Prev: Other Vi Commands,  Up: Vi Commands

2.11 Insert Mode
================

You can enter insert mode by one of the following commands.  In
addition to these, you will enter insert mode if you give a change
command with a line command as the motion command.  Insert commands are
also modifying commands and you can repeat them by the repeat command
`.' (`vip-repeat').

`i'
     Enter insert mode at point (`vip-insert').

`I'
     Enter insert mode at the first non white character on the line
     (`vip-Insert').

`a'
     Move point forward by one character and then enter insert mode
     (`vip-append').

`A'
     Enter insert mode at end of line (`vip-Append').

`o'
     Open a new line below the current line and enter insert mode
     (`vip-open-line').

`O'
     Open a new line above the current line and enter insert mode
     (`vip-Open-line').

`C-o'
     Insert a newline and leave point before it, and then enter insert
     mode
     (`vip-open-line-at-point').

   Insert mode is almost like emacs mode.  Only the following 4 keys
behave differently from emacs mode.

`<ESC>'
     This key will take you back to vi mode (`vip-change-mode-to-vi').

`C-h'
     Delete previous character (`delete-backward-char').

`C-w'
     Delete previous word (`vip-delete-backward-word').

`C-z'
     This key simulates <ESC> key in emacs mode.  For instance, typing
     `C-z x' in insert mode is the same as typing `ESC x' in emacs mode
     (`vip-ESC').
   You can also bind `C-h' to `help-command' if you like.  (*Note
Customizing Key Bindings::, for details.)  Binding `C-h' to
`help-command' has the effect of making the meaning of `C-h' uniform
among emacs, vi and insert modes.

   When you enter insert mode, VIP records point as the start point of
insertion, and when you leave insert mode the region between point and
start point is saved for later use by repeat command etc.  Therefore,
repeat command will not really repeat insertion if you move point by
emacs commands while in insert mode.


File: vip,  Node: Ex Commands,  Next: Ex Command Reference,  Prev: Commands in Insert Mode,  Up: Top

3 Ex Commands
*************

In vi mode, you can execute an Ex command EX-COMMAND by typing:
     : EX-COMMAND <RET>
   Every Ex command follows the following pattern:
     ADDRESS COMMAND ! PARAMETERS COUNT FLAGS
   where all parts are optional.  For the syntax of "address", the
reader is referred to the reference manual of Ex.

   In the current version of VIP, searching by Ex commands is always
"magic".  That is, search patterns are always treated as "regular
expressions".  For example, a typical forward search would be invoked by
`:/PAT/'.  If you wish to include `/' as part of PAT you must preceded
it by `\'.  VIP strips off these `\''s before `/' and the resulting PAT
becomes the actual search pattern.  Emacs provides a different and
richer class or regular expressions than Vi/Ex, and VIP uses Emacs's
regular expressions.  See GNU Emacs Manual for details of regular
expressions.

   Several Ex commands can be entered in a line by separating them by a
pipe character `|'.

* Menu:

* Ex Command Reference::        Explain all the Ex commands available in VIP.


File: vip,  Node: Ex Command Reference,  Next: Customization,  Prev: Ex Commands,  Up: Ex Commands

3.1 Ex Command Reference
========================

In this section we briefly explain all the Ex commands supported by VIP.
Most Ex commands expect ADDRESS as their argument, and they use default
addresses if they are not explicitly given.  In the following, such
default addresses will be shown in parentheses.

   Most command names can and preferably be given in abbreviated forms.
In the following, optional parts of command names will be enclosed in
brackets.  For example, `co[py]' will mean that copy command can be
give as `co' or `cop' or `copy'.

   If COMMAND is empty, point will move to the beginning of the line
specified by the ADDRESS.  If ADDRESS is also empty, point will move to
the beginning of the current line.

   Some commands accept "flags" which are one of `p', `l' and `#'.  If
FLAGS are given, the text affected by the commands will be displayed on
a temporary window, and you will be asked to hit return to continue.
In this way, you can see the text affected by the commands before the
commands will be executed.  If you hit `C-g' instead of <RET> then the
commands will be aborted.  Note that the meaning of FLAGS is different
in VIP from that in Vi/Ex.

`(.,.) co[py] ADDR FLAGS'
`(.,.) t ADDR FLAGS'
     Place a copy of specified lines after ADDR.  If ADDR is `0', it
     will be placed before the first line.

`(.,.) d[elete] REGISTER COUNT FLAGS'
     Delete specified lines.  Text will be saved in a named REGISTER if
     a lower-case letter is given, and appended to a register if a
     capital letter is given.

`e[dit] ! +ADDR FILE'
`e[x] ! +ADDR FILE'
`vi[sual] ! +ADDR FILE'
     Edit a new file FILE in the current window.  The command will abort
     if current buffer is modified, which you can override by giving
     `!'.  If `+'ADDR is given, ADDR becomes the current line.

`file'
     Give information about the current file.

`(1,$) g[lobal] ! /PAT/ CMDS'
`(1,$) v /PAT/ CMDS'
     Among specified lines first mark each line which matches the
     regular expression PAT, and then execute CMDS on each marked line.
     If `!' is given, CMDS will be executed on each line not matching
     PAT.  `v' is same as `g!'.

`(.,.+1) j[oin] ! COUNT FLAGS'
     Join specified lines into a line.  Without `!', a space character
     will be inserted at each junction.

`(.) k CH'
`(.) mar[k] CH'
     Mark specified line by a lower-case character CH.  Then the
     addressing form `''CH will refer to this line.  No white space is
     required between `k' and CH.  A white space is necessary between
     `mark' and CH, however.

`map CH RHS'
     Define a macro for vi mode.  After this command, the character CH
     will be expanded to RHS in vi mode.

`(.,.) m[ove] ADDR'
     Move specified lines after ADDR.

`(.) pu[t] REGISTER'
     Put back previously deleted or yanked text.  If REGISTER is given,
     the text saved in the register will be put back; otherwise, last
     deleted or yanked text will be put back.

`q[uit] !'
     Quit from Emacs.  If modified buffers with associated files exist,
     you will be asked whether you wish to save each of them.  At this
     point, you may choose not to quit, by hitting `C-g'.  If `!' is
     given, exit from Emacs without saving modified buffers.

`(.) r[ead] FILE'
     Read in the content of the file FILE after the specified line.

`(.) r[ead] ! COMMAND'
     Read in the output of the shell command COMMAND after the specified
     line.

`se[t]'
     Set a variable's value.  *Note Customizing Constants::, for the
     list of variables you can set.

`sh[ell]'
     Run a subshell in a window.

`(.,.) s[ubstitute] /PAT/REPL/ OPTIONS COUNT FLAGS'
`(.,.) & OPTIONS COUNT FLAGS'
     On each specified line, the first occurrence of string matching
     regular expression PAT is replaced by replacement pattern REPL.
     Option characters are `g' and `c'.  If global option character `g'
     appears as part of OPTIONS, all occurrences are substituted.  If
     confirm option character `c' appears, you will be asked to give
     confirmation before each substitution.  If `/PAT/REPL/' is
     missing, the last substitution is repeated.

`st[op]'
     Suspend Emacs.

`ta[g] TAG'
     Find first definition of TAG.  If no TAG is given, previously
     given TAG is used and next alternate definition is find.  By
     default, the file `TAGS' in the current directory becomes the
     "selected tags table".  You can select another tags table by `set'
     command.  *Note Customizing Constants::, for details.

`und[o]'
     Undo the last change.

`unm[ap] CH'
     The macro expansion associated with CH is removed.

`ve[rsion]'
     Tell the version number of VIP.

`(1,$) w[rite] ! FILE'
     Write out specified lines into file FILE.  If no FILE is given,
     text will be written to the file associated to the current buffer.
     Unless `!' is given, if FILE is different from the file associated
     to the current buffer and if the file FILE exists, the command
     will not be executed.  Unlike Ex, FILE becomes the file associated
     to the current buffer.

`(1,$) w[rite]>> FILE'
     Write out specified lines at the end of file FILE.  FILE becomes
     the file associated to the current buffer.

`(1,$) wq ! FILE'
     Same as `write' and then `quit'.  If `!' is given, same as `write
     !' then `quit'.

`(.,.) y[ank] REGISTER COUNT'
     Save specified lines into register REGISTER.  If no register is
     specified, text will be saved in an anonymous register.

`ADDR ! COMMAND'
     Execute shell command COMMAND.  The output will be shown in a new
     window.  If ADDR is given, specified lines will be used as standard
     input to COMMAND.

`($) ='
     Print the line number of the addressed line.

`(.,.) > COUNT FLAGS'
     Shift specified lines to the right.  The variable `vip-shift-width'
     (default value is 8) determines the amount of shift.

`(.,.) < COUNT FLAGS'
     Shift specified lines to the left.  The variable `vip-shift-width'
     (default value is 8) determines the amount of shift.

`(.,.) ~ OPTIONS COUNT FLAGS'
     Repeat the previous `substitute' command using previous search
     pattern as PAT for matching.

   The following Ex commands are available in Vi, but not implemented
in VIP.
     abbreviate, list, next, print, preserve, recover, rewind, source,
     unabbreviate, xit, z


File: vip,  Node: Customization,  Next: Customizing Constants,  Prev: Ex Command Reference,  Up: Top

4 Customization
***************

If you have a file called `.vip' in your home directory, then it will
also be loaded when VIP is loaded.  This file is thus useful for
customizing VIP.

* Menu:

* Customizing Constants::       How to change values of constants.
* Customizing Key Bindings::    How to change key bindings.


File: vip,  Node: Customizing Constants,  Next: Customizing Key Bindings,  Prev: Customization,  Up: Customization

4.1 Customizing Constants
=========================

An easy way to customize VIP is to change the values of constants used
in VIP.  Here is the list of the constants used in VIP and their default
values.

`vip-shift-width 8'
     The number of columns shifted by `>' and `<' command.

`vip-re-replace nil'
     If `t' then do regexp replace, if `nil' then do string replace.

`vip-search-wrap-around t'
     If `t', search wraps around the buffer.

`vip-re-search nil'
     If `t' then search is reg-exp search, if `nil' then vanilla search.

`vip-case-fold-search nil'
     If `t' search ignores cases.

`vip-re-query-replace nil'
     If `t' then do reg-exp replace in query replace.

`vip-open-with-indent nil'
     If `t' then indent to the previous current line when open a new
     line by `o' or `O' command.

`vip-tags-file-name "TAGS"'
     The name of the file used as the tags table.

`vip-help-in-insert-mode nil'
     If `t' then <C-h> is bound to `help-command' in insert mode, if
     `nil' then it sis bound to `delete-backward-char'.
   You can reset these constants in VIP by the Ex command `set'.  Or you
can include a line like this in your `.vip' file:
     (setq vip-case-fold-search t)


File: vip,  Node: Customizing Key Bindings,  Prev: Customizing Constants,  Up: Customization

4.2 Customizing Key Bindings
============================

VIP uses `vip-command-mode-map' as the "local keymap" for vi mode.  For
example, in vi mode, <SPC> is bound to the function `vip-scroll'.  But,
if you wish to make <SPC> and some other keys  behave like Vi, you can
include the following lines in your `.vip' file.

     (define-key vip-command-mode-map "\C-g" 'vip-info-on-file)
     (define-key vip-command-mode-map "\C-h" 'vip-backward-char)
     (define-key vip-command-mode-map "\C-m" 'vip-next-line-at-bol)
     (define-key vip-command-mode-map " " 'vip-forward-char)
     (define-key vip-command-mode-map "g" 'vip-keyboard-quit)
     (define-key vip-command-mode-map "s" 'vip-substitute)
     (define-key vip-command-mode-map "C" 'vip-change-to-eol)
     (define-key vip-command-mode-map "R" 'vip-change-to-eol)
     (define-key vip-command-mode-map "S" 'vip-substitute-line)
     (define-key vip-command-mode-map "X" 'vip-delete-backward-char)


File: vip,  Node: GNU Free Documentation License,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008, 2009 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

Key Index
*********

 [index ]
* Menu:

* 000 C-@ (set-mark-command):            Other Vi Commands.   (line  63)
* 001 C-a (vip-beginning-of-line):       New Commands.        (line   9)
* 002 C-b (vip-scroll-back):             Viewing the Buffer.  (line  18)
* 003 C-c (vip-ctl-c) <1>:               Important Keys.      (line  22)
* 003 C-c (vip-ctl-c):                   New Commands.        (line  28)
* 004 C-d (vip-scroll-up):               Viewing the Buffer.  (line  22)
* 005 C-e (vip-scroll-up-one):           Viewing the Buffer.  (line  34)
* 006 C-f (vip-scroll-back):             Viewing the Buffer.  (line  13)
* 007 C-g (vip-keyboard-quit) <1>:       Important Keys.      (line  10)
* 007 C-g (vip-keyboard-quit) <2>:       New Bindings.        (line  14)
* 007 C-g (vip-keyboard-quit):           Changing.            (line  12)
* 010 C-h (delete-backward-char) (insert mode): Commands in Insert Mode.
                                                              (line  46)
* 010 C-h (vip-delete-backward-char) (insert mode): Insert Mode.
                                                              (line  14)
* 011 TAB (indent-for-tab-command):      Other Vi Commands.   (line  66)
* 012 C-j (newline-and-indent):          Other Vi Commands.   (line  69)
* 013 C-k (kill-line):                   Other Vi Commands.   (line  73)
* 014 C-l (recenter) <1>:                Other Vi Commands.   (line  78)
* 014 C-l (recenter):                    Important Keys.      (line  13)
* 015 RET (vip-scroll-back) <1>:         Viewing the Buffer.  (line  18)
* 015 RET (vip-scroll-back):             New Bindings.        (line  20)
* 016 C-n (vip-next-window) <1>:         Buffers and Windows. (line  24)
* 016 C-n (vip-next-window) <2>:         Window Commands.     (line  10)
* 016 C-n (vip-next-window):             New Commands.        (line  12)
* 017 C-o (vip-open-line-at-point) <1>:  Commands in Insert Mode.
                                                              (line  35)
* 017 C-o (vip-open-line-at-point):      New Commands.        (line  16)
* 020 C-p (previous-line):               Other Vi Commands.   (line  81)
* 021 C-q (quoted-insert):               Other Vi Commands.   (line  84)
* 022 C-r (isearch-backward) <1>:        Other Vi Commands.   (line  89)
* 022 C-r (isearch-backward) <2>:        Searching and Replacing.
                                                              (line  34)
* 022 C-r (isearch-backward):            New Commands.        (line  20)
* 023 C-s (isearch-forward) <1>:         Other Vi Commands.   (line  92)
* 023 C-s (isearch-forward) <2>:         Searching and Replacing.
                                                              (line  30)
* 023 C-s (isearch-forward):             New Commands.        (line  23)
* 024 C-t (transpose-chars):             Other Vi Commands.   (line  95)
* 025 C-u (vip-scroll-down):             Viewing the Buffer.  (line  26)
* 026 C-v (scroll-up):                   Other Vi Commands.   (line 101)
* 027 C-w (kill-region):                 Other Vi Commands.   (line 105)
* 027 C-w (vip-delete-backward-word) (insert mode) <1>: Commands in Insert Mode.
                                                              (line  49)
* 027 C-w (vip-delete-backward-word) (insert mode): Insert Mode.
                                                              (line  17)
* 0300 C-x (vip-ctl-x) <1>:              Important Keys.      (line  22)
* 0300 C-x (vip-ctl-x):                  New Commands.        (line  28)
* 0301 C-x C-z (suspend-emacs):          Modes in VIP.        (line   6)
* 031 C-y (vip-scroll-down-one):         Viewing the Buffer.  (line  30)
* 032 C-z (vip-change-mode-to-vi) <1>:   Emacs Mode.          (line   6)
* 032 C-z (vip-change-mode-to-vi):       Modes in VIP.        (line   6)
* 032 C-z (vip-ESC) (insert mode) <1>:   Commands in Insert Mode.
                                                              (line  52)
* 032 C-z (vip-ESC) (insert mode):       Insert Mode.         (line  20)
* 033 ESC (vip-change-mode-to-vi) (insert mode) <1>: Commands in Insert Mode.
                                                              (line  43)
* 033 ESC (vip-change-mode-to-vi) (insert mode): Insert Mode. (line  11)
* 033 ESC (vip-ESC) <1>:                 Important Keys.      (line  22)
* 033 ESC (vip-ESC):                     New Commands.        (line  28)
* 040 SPC (vip-scroll) <1>:              Viewing the Buffer.  (line  13)
* 040 SPC (vip-scroll):                  New Bindings.        (line  20)
* 041 ! (vip-command-argument):          Other Vi Commands.   (line  14)
* 042 " (vip-command-argument):          Delete Commands.     (line  15)
* 0430 # (vip-command-argument):         New Commands.        (line  61)
* 0431 # C (upcase-region):              New Commands.        (line  70)
* 0432 # c (downcase-region):            New Commands.        (line  66)
* 0432 # g (vip-global-execute):         New Commands.        (line  75)
* 0432 # q (vip-quote-region):           New Commands.        (line  79)
* 0432 # s (spell-region):               New Commands.        (line  83)
* 044 $ (vip-goto-eol):                  Motion Commands.     (line  49)
* 045 % (vip-paren-match):               Motion Commands.     (line 141)
* 046 & (vip-nil):                       Other Vi Commands.   (line  54)
* 047 ' (vip-goto-mark-and-skip-white):  Motion Commands.     (line 132)
* 050 ( (vip-backward-sentence):         Motion Commands.     (line 103)
* 051 ) (vip-forward-sentence):          Motion Commands.     (line 107)
* 052 * (vip-call-last-kbd-macro) <1>:   Other Vi Commands.   (line  46)
* 052 * (vip-call-last-kbd-macro) <2>:   Misc Commands.       (line  15)
* 052 * (vip-call-last-kbd-macro):       New Commands.        (line  86)
* 053 + (vip-next-line-at-bol):          Motion Commands.     (line  30)
* 054 , (vip-repeat-find-opposite):      Motion Commands.     (line 171)
* 055 - (vip-previous-line-at-bol):      Motion Commands.     (line  36)
* 056 . (vip-repeat) <1>:                Repeating and Undoing Modifications.
                                                              (line  16)
* 056 . (vip-repeat):                    Undoing.             (line   6)
* 057 / (vip-search-forward) <1>:        Searching and Replacing.
                                                              (line   9)
* 057 / (vip-search-forward) <2>:        Counts.              (line  20)
* 057 / (vip-search-forward):            Searching.           (line   6)
* 060 0 (vip-beginning-of-line):         Motion Commands.     (line  42)
* 061 1 (numeric argument):              Numeric Arguments.   (line   6)
* 062 2 (numeric argument):              Numeric Arguments.   (line   6)
* 063 3 (numeric argument):              Numeric Arguments.   (line   6)
* 064 4 (numeric argument):              Numeric Arguments.   (line   6)
* 065 5 (numeric argument):              Numeric Arguments.   (line   6)
* 066 6 (numeric argument):              Numeric Arguments.   (line   6)
* 067 7 (numeric argument):              Numeric Arguments.   (line   6)
* 068 8 (numeric argument):              Numeric Arguments.   (line   6)
* 069 9 (numeric argument):              Numeric Arguments.   (line   6)
* 072 : (vip-ex):                        Ex Commands.         (line   6)
* 073 ; (vip-repeat-find):               Motion Commands.     (line 168)
* 074 < (vip-command-argument):          Other Vi Commands.   (line  28)
* 075 = (vip-command-argument):          Other Vi Commands.   (line  41)
* 076 > (vip-command-argument):          Other Vi Commands.   (line  35)
* 077 ? (vip-search-backward) <1>:       Searching and Replacing.
                                                              (line  18)
* 077 ? (vip-search-backward) <2>:       Counts.              (line  20)
* 077 ? (vip-search-backward):           Searching.           (line   6)
* 100 @ (vip-nil):                       Other Vi Commands.   (line  54)
* 101 A (vip-Append):                    Commands in Insert Mode.
                                                              (line  24)
* 102 B (vip-backward-Word):             Motion Commands.     (line  69)
* 103 C (vip-ctl-c-equivalent) <1>:      Important Keys.      (line  31)
* 103 C (vip-ctl-c-equivalent):          New Bindings.        (line  34)
* 104 D (vip-kill-line):                 Delete Commands.     (line  37)
* 105 E (vip-end-of-Word):               Motion Commands.     (line  77)
* 106 F (vip-find-char-backward):        Motion Commands.     (line 156)
* 107 G (vip-goto-line):                 Motion Commands.     (line 120)
* 110 H (vip-window-top):                Motion Commands.     (line  87)
* 111 I (vip-Insert):                    Commands in Insert Mode.
                                                              (line  16)
* 112 J (vip-join-lines):                Other Vi Commands.   (line  23)
* 113 K (vip-kill-buffer) <1>:           Buffers and Windows. (line  44)
* 113 K (vip-kill-buffer) <2>:           Buffer Commands.     (line  15)
* 113 K (vip-kill-buffer):               New Commands.        (line  43)
* 114 L (vip-window-bottom):             Motion Commands.     (line  96)
* 115 M (vip-window-middle):             Motion Commands.     (line  91)
* 116 N (vip-search-Next):               Searching and Replacing.
                                                              (line  26)
* 117 O (vip-Open-line) <1>:             Commands in Insert Mode.
                                                              (line  31)
* 117 O (vip-Open-line):                 Counts.              (line  15)
* 120 P (vip-Put-back) <1>:              Put Back Commands.   (line  19)
* 120 P (vip-Put-back):                  Counts.              (line  10)
* 121 Q (vip-query-replace) <1>:         Searching and Replacing.
                                                              (line  49)
* 121 Q (vip-query-replace):             New Commands.        (line  48)
* 122 R (vip-replace-string) <1>:        Searching and Replacing.
                                                              (line  37)
* 122 R (vip-replace-string):            New Commands.        (line  48)
* 123 S (vip-switch-to-buffer-other-window) <1>: Buffers and Windows.
                                                              (line  40)
* 123 S (vip-switch-to-buffer-other-window) <2>: Buffer Commands.
                                                              (line  11)
* 123 S (vip-switch-to-buffer-other-window): New Bindings.    (line  25)
* 124 T (vip-goto-char-backward):        Motion Commands.     (line 164)
* 125 U (vip-nil):                       Other Vi Commands.   (line  54)
* 126 V (vip-find-file-other-window) <1>: Files.              (line  13)
* 126 V (vip-find-file-other-window) <2>: File Commands.      (line  10)
* 126 V (vip-find-file-other-window):    New Commands.        (line  56)
* 127 W (vip-forward-Word):              Motion Commands.     (line  60)
* 1300 X (vip-ctl-x-equivalent) <1>:     Important Keys.      (line  31)
* 1300 X (vip-ctl-x-equivalent):         New Bindings.        (line  34)
* 1301 X ( (start-kbd-macro):            Misc Commands.       (line   8)
* 1301 X ) (end-kbd-macro):              Misc Commands.       (line  12)
* 1301 X 1 (delete-other-windows) <1>:   Buffers and Windows. (line  27)
* 1301 X 1 (delete-other-windows):       Window Commands.     (line  14)
* 1301 X 2 (split-window-vertically) <1>: Buffers and Windows.
                                                              (line  31)
* 1301 X 2 (split-window-vertically):    Window Commands.     (line  18)
* 1301 X 3 (vip-buffer-in-two-windows) <1>: Buffers and Windows.
                                                              (line  34)
* 1301 X 3 (vip-buffer-in-two-windows) <2>: Window Commands.  (line  22)
* 1301 X 3 (vip-buffer-in-two-windows):  New Bindings.        (line  50)
* 1302 X B (list-buffers):               Buffers and Windows. (line  49)
* 1302 X I (insert-file) <1>:            Files.               (line  25)
* 1302 X I (insert-file):                File Commands.       (line  18)
* 1302 X S (save-buffer) <1>:            Files.               (line  17)
* 1302 X S (save-buffer):                Buffer Commands.     (line  19)
* 1302 X W (write-file) <1>:             Files.               (line  22)
* 1302 X W (write-file):                 File Commands.       (line  14)
* 1302 X Z (suspend-emacs):              Misc Commands.       (line  19)
* 131 Y (vip-yank-line):                 Yank Commands.       (line  21)
* 132 Z Z (save-buffers-kill-emacs):     Other Vi Commands.   (line   9)
* 133 [ (vip-nil):                       Other Vi Commands.   (line  54)
* 134 \ (vip-escape-to-emacs) <1>:       Important Keys.      (line  40)
* 134 \ (vip-escape-to-emacs):           New Commands.        (line  35)
* 135 ] (vip-nil):                       Other Vi Commands.   (line  54)
* 136 ^ (vip-bol-and-skip-white):        Motion Commands.     (line  45)
* 137 _ (vip-nil):                       Other Vi Commands.   (line  54)
* 140 ` (vip-goto-mark):                 Motion Commands.     (line 125)
* 141 a (vip-append):                    Commands in Insert Mode.
                                                              (line  20)
* 142 b (vip-backward-word):             Motion Commands.     (line  65)
* 1430 c (vip-command-argument):         Change Commands.     (line   9)
* 1431 c R:                              Change Commands.     (line  26)
* 1432 c c:                              Change Commands.     (line  20)
* 1432 c r:                              Change Commands.     (line  23)
* 1440 d (vip-command-argument):         Delete Commands.     (line   7)
* 1441 d R:                              Delete Commands.     (line  34)
* 1442 d d:                              Delete Commands.     (line  28)
* 1442 d r:                              Delete Commands.     (line  31)
* 145 e (vip-end-of-word):               Motion Commands.     (line  74)
* 146 f (vip-find-char-forward):         Motion Commands.     (line 152)
* 147 g (vip-info-on-file) <1>:          Files.               (line  28)
* 147 g (vip-info-on-file):              New Bindings.        (line  14)
* 150 h (vip-backward-char):             Motion Commands.     (line  11)
* 151 i (vip-insert):                    Commands in Insert Mode.
                                                              (line  13)
* 152 j (vip-next-line):                 Motion Commands.     (line  21)
* 153 k (vip-previous-line):             Motion Commands.     (line  26)
* 154 l (vip-forward-char):              Motion Commands.     (line  16)
* 155 m (vip-mark-point) <1>:            Mark Commands.       (line   9)
* 155 m (vip-mark-point):                Marking.             (line  10)
* 156 n (vip-search-next):               Searching and Replacing.
                                                              (line  22)
* 157 o (vip-open-line) <1>:             Commands in Insert Mode.
                                                              (line  27)
* 157 o (vip-open-line):                 Counts.              (line  15)
* 160 p (vip-put-back) <1>:              Put Back Commands.   (line  10)
* 160 p (vip-put-back):                  Counts.              (line  10)
* 161 q (vip-nil):                       Other Vi Commands.   (line  54)
* 162 r (vip-replace-char):              Searching and Replacing.
                                                              (line  54)
* 163 s (vip-switch-to-buffer) <1>:      Buffers and Windows. (line  37)
* 163 s (vip-switch-to-buffer) <2>:      Buffer Commands.     (line   7)
* 163 s (vip-switch-to-buffer):          New Bindings.        (line  25)
* 164 t (vip-goto-char-forward):         Motion Commands.     (line 160)
* 165 u (vip-undo) <1>:                  Repeating and Undoing Modifications.
                                                              (line  10)
* 165 u (vip-undo):                      Undoing.             (line   6)
* 166 v (vip-find-file) <1>:             Files.               (line  10)
* 166 v (vip-find-file) <2>:             File Commands.       (line   7)
* 166 v (vip-find-file):                 New Commands.        (line  56)
* 167 w (vip-forward-word):              Motion Commands.     (line  56)
* 170 x (vip-delete-char):               Delete Commands.     (line  40)
* 1710 y (vip-command-argument):         Yank Commands.       (line  12)
* 1711 y R:                              Yank Commands.       (line  27)
* 1712 y r:                              Yank Commands.       (line  24)
* 1712 y y (vip-yank-line):              Yank Commands.       (line  21)
* 1721 z RET (vip-line-to-top) <1>:      Viewing the Buffer.  (line  43)
* 1721 z RET (vip-line-to-top):          z Command.           (line   6)
* 1722 z - (vip-line-to-bottom) <1>:     Viewing the Buffer.  (line  55)
* 1722 z - (vip-line-to-bottom):         z Command.           (line   6)
* 1722 z . (vip-line-to-middle) <1>:     Viewing the Buffer.  (line  49)
* 1722 z . (vip-line-to-middle):         z Command.           (line   6)
* 1723 z H (vip-line-to-top) <1>:        Viewing the Buffer.  (line  43)
* 1723 z H (vip-line-to-top):            z Command.           (line   6)
* 1723 z L (vip-line-to-bottom) <1>:     Viewing the Buffer.  (line  55)
* 1723 z L (vip-line-to-bottom):         z Command.           (line   6)
* 1723 z M (vip-line-to-middle) <1>:     Viewing the Buffer.  (line  49)
* 1723 z M (vip-line-to-middle):         z Command.           (line   6)
* 173 { (vip-backward-paragraph):        Motion Commands.     (line 111)
* 174 | (vip-goto-col):                  Motion Commands.     (line  52)
* 175 } (vip-forward-paragraph):         Motion Commands.     (line 115)
* 176 ~ (vip-nil):                       Other Vi Commands.   (line  54)
* 177 DEL (vip-delete-backward-char):    Delete Commands.     (line  44)

Concept Index
*************

 [index ]
* Menu:

* address:                               Ex Commands.         (line  10)
* buffer <1>:                            Buffers and Windows. (line   6)
* buffer:                                Basic Concepts.      (line   9)
* buffer name completion:                Buffers and Windows. (line  51)
* count:                                 Numeric Arguments.   (line   6)
* current buffer:                        Buffers and Windows. (line   6)
* default directory:                     Files.               (line  34)
* emacs mode:                            Modes in VIP.        (line  27)
* end (of buffer):                       Basic Concepts.      (line   9)
* expanding (region):                    Modifying Commands.  (line  15)
* file name completion:                  Files.               (line  41)
* flag:                                  Ex Command Reference.
                                                              (line  20)
* global keymap:                         Basic Concepts.      (line  25)
* insert mode:                           Modes in VIP.        (line  27)
* keymap:                                Basic Concepts.      (line  25)
* line commands:                         Modifying Commands.  (line  10)
* local keymap <1>:                      Customizing Key Bindings.
                                                              (line   6)
* local keymap:                          Basic Concepts.      (line  25)
* looking at:                            Basic Concepts.      (line   9)
* magic:                                 Ex Commands.         (line  13)
* mark:                                  Basic Concepts.      (line   9)
* mark ring:                             Mark Commands.       (line  24)
* mode:                                  Basic Concepts.      (line  25)
* mode line:                             Modes in VIP.        (line  20)
* modified (buffer):                     Buffers and Windows. (line  10)
* number register:                       Put Back Commands.   (line  26)
* numeric arguments:                     Numeric Arguments.   (line   6)
* point:                                 Basic Concepts.      (line   9)
* point commands:                        Modifying Commands.  (line  10)
* region <1>:                            Region Commands.     (line   6)
* region:                                Basic Concepts.      (line   9)
* regular expression:                    Ex Commands.         (line  13)
* regular expression (replacement):      Searching and Replacing.
                                                              (line  34)
* regular expression (search):           Searching and Replacing.
                                                              (line   8)
* selected buffer:                       Buffers and Windows. (line   6)
* selected tags table:                   Ex Command Reference.
                                                              (line 112)
* syntax table:                          Motion Commands.     (line  80)
* tag:                                   Ex Command Reference.
                                                              (line 112)
* text:                                  Basic Concepts.      (line   9)
* vanilla (replacement):                 Searching and Replacing.
                                                              (line  34)
* vi mode:                               Modes in VIP.        (line  12)
* visiting (a file):                     Files.               (line  34)
* window <1>:                            Buffers and Windows. (line  10)
* window:                                Basic Concepts.      (line  20)
* word:                                  Motion Commands.     (line  55)
* yank:                                  Yank Commands.       (line   6)



Tag Table:
Node: Top932
Node: Survey2736
Node: Basic Concepts3264
Node: Loading VIP4918
Node: Modes in VIP5661
Node: Emacs Mode8272
Node: Vi Mode8635
Node: Insert Mode8952
Node: Differences from Vi9584
Node: Undoing10767
Node: Changing11131
Node: Searching11758
Node: z Command12480
Node: Counts12822
Node: Marking13334
Node: Region Commands13843
Node: New Commands14520
Node: New Bindings17280
Node: Window Commands19456
Node: Buffer Commands19932
Node: File Commands20426
Node: Misc Commands20802
Node: Vi Commands21227
Node: Numeric Arguments22247
Node: Important Keys22742
Node: Buffers and Windows24491
Node: Files26720
Node: Viewing the Buffer29971
Node: Mark Commands31879
Node: Motion Commands32721
Node: Searching and Replacing38264
Node: Modifying Commands40544
Node: Delete Commands41971
Node: Yank Commands43683
Node: Put Back Commands44574
Node: Change Commands46034
Node: Repeating and Undoing Modifications47062
Node: Other Vi Commands47886
Node: Commands in Insert Mode51523
Node: Ex Commands53601
Node: Ex Command Reference54785
Node: Customization61253
Node: Customizing Constants61680
Node: Customizing Key Bindings63009
Node: GNU Free Documentation License64066

End Tag Table
